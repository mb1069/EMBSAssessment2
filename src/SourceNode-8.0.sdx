A!	SourceNode-8.0.11706	2.0	Java

X	c:01/000	com.ibm.saguaro.system.Assembly
X	c:01/001	com.ibm.saguaro.system.Util
X	c:01/002	com.ibm.saguaro.system.Timer
X	c:01/003	com.ibm.saguaro.system.Time
X	c:01/004	com.ibm.saguaro.system.MoteException
X	c:01/005	com.ibm.saguaro.system.Device
X	c:01/006	com.ibm.saguaro.system.SDev
X	c:01/007	com.ibm.saguaro.system.CDev
X	c:01/008	com.ibm.saguaro.system.OutOfResourcesException
X	c:01/009	com.ibm.saguaro.system.OsException
X	c:01/00A	com.ibm.saguaro.system.NullReferenceException
X	c:01/00B	com.ibm.saguaro.system.SystemException
X	c:01/00C	com.ibm.saguaro.system.Mote
X	c:01/00D	com.ibm.saguaro.system.LIP
X	c:01/00E	com.ibm.saguaro.system.LED
X	c:01/00F	com.ibm.saguaro.system.InvalidCastException
X	c:01/010	com.ibm.saguaro.system.IndexOutOfRangeException
X	c:01/011	com.ibm.saguaro.system.I2C
X	c:01/012	com.ibm.saguaro.system.GPIO
X	c:01/013	com.ibm.saguaro.system.Err
X	c:01/014	com.ibm.saguaro.system.DeviceException
X	c:01/015	com.ibm.saguaro.system.SPI
X	c:01/016	com.ibm.saguaro.system.Radio
X	c:01/017	com.ibm.saguaro.system.WLIP
X	c:01/018	com.ibm.saguaro.system.ArrayTypeMismatchException
X	c:01/019	com.ibm.saguaro.system.ArithmException
X	c:01/01A	com.ibm.saguaro.system.ArgumentException
X	c:01/01B	com.ibm.saguaro.system.AccessException
X	c:01/01C	com.ibm.saguaro.system.ADC
X	c:02/000	com.ibm.saguaro.logger.Logger

C!	c:006	embs.SourceNode	-1	0	c:000
R	timer1	r:com.ibm.saguaro.system.Timer	0	0
R	xmit	c[]	0	1
R	radio	r:com.ibm.saguaro.system.Radio	0	2
R	sinks	r:embs.SinkParameters[]	0	3
R	channelSwitches	r:embs.ChannelSwitch[]	0	4
F	currentChannel	i	0	0
F	ownPanId	c	0	1
F	ownShortAddr	c	0	2
F	YELLOW_LED	c	0	3
F	GREEN_LED	c	0	4
F	RED_LED	c	0	5
F	N_MIN	i	0	6
F	N_MAX	i	0	7
F	T_MIN	l	0	8
F	T_MAX	l	0	10
F	previousChannel	c	0	12
F	broadcastSet	z	0	13
F	wait	l	0	3327
H	BROADCASTING$UTF8	b[]	0	66,82,79,65,68,67,65,83,84,73,78,71,33
H	Calculated_T$UTF8	b[]	0	67,97,108,99,117,108,97,116,101,100,32,84,58,32
H	Current_Beacon$UTF8	b[]	0	67,117,114,114,101,110,116,32,66,101,97,99,111,110,58,32
H	PREPARING_BROADCAST_for_time$UTF8	b[]	0	80,82,69,80,65,82,73,78,71,32,66,82,79,65,68,67,65,83,84,33,32,102,111,114,32,116,105,109,101,58,32
H	Received_packet$UTF8	b[]	0	82,101,99,101,105,118,101,100,32,112,97,99,107,101,116
H	Transmitted$UTF8	b[]	0	84,114,97,110,115,109,105,116,116,101,100,46
M!	SourceNode(r:embs.SourceNode)v	-1	m:017C	002F8	4
M	access$000(i,c[],i,i,l)i	-1	m:017E	002FC	14
M	access$100(i,c[],i,i,l)i	-1	m:0185	0030A	14
M!	broadcastToSink(c,l)v	-1	m:018C	00318	82
M	createNextBroadcast(i,l,i,l,l)v	-1	m:01B5	0036A	40
M!	getChannelSwitch(l,r:embs.ChannelSwitch[])c	-1	m:01C9	00392	50
M	getDiffN(i[],i)i	-1	m:01E2	003C4	16
M	getDiffT(l[],i)l	-1	m:01EA	003D4	30
M	insertChannelSwitchInBuffer(r:embs.ChannelSwitch[],r:embs.ChannelSwitch)r:embs.ChannelSwitch[]	-1	m:01F9	003F2	60
M	onReceive(i,c[],i,i,l)i	-1	m:0217	0042E	232
M	onTransmit(i,c[],i,i,l)i	-1	m:028B	00516	108
M	setupBroadcastAndCallBack(l,l,i)v	-1	m:02C1	00582	130
M	toggleLed(i)v	-1	m:0302	00604	28

C!	c:008	embs.SinkParameters	1	1	c:000
r	beaconT	l[]	1	0
r	beaconN	i[]	1	1
f	numBeacons	i	1	0
f	T	i	1	1
f	N	i	1	2
f	address	c	1	3
f	panid	c	1	4
f	channel	c	1	5
m!	addBeacon(i,l)v	1	m:0137	0026E	34	0
m!	getAddress()c	1	m:0148	00290	8	7
m!	getBeaconN()i[]	1	m:014C	00298	8	10
m!	getBeaconT()l[]	1	m:0150	002A0	8	12
m!	getChannel()c	1	m:0154	002A8	8	5
m!	getN()i	1	m:0158	002B0	8	4
m!	getNumBeacons()i	1	m:015C	002B8	8	8
m!	getPanid()c	1	m:0160	002C0	8	6
m!	getT()i	1	m:0164	002C8	8	2
m!	setBeaconN(i[])v	1	m:0168	002D0	8	11
m!	setBeaconT(l[])v	1	m:016C	002D8	8	13
m!	setN(i)v	1	m:0170	002E0	8	1
m!	setNumBeacons(i)v	1	m:0174	002E8	8	9
m!	setT(i)v	1	m:0178	002F0	8	3
M!	SinkParameters(r:embs.SinkParameters,c,c,c)v	1	m:0128	00250	30

C!	c:015	embs.ChannelSwitch	2	2	c:000
f	channel	c	2	0
f	time	l	2	1
m!	getChannel()c	2	m:0118	00230	8	3
m!	getTime()l	2	m:011C	00238	8	0
m!	setChannel(c)v	2	m:0120	00240	8	2
m!	setTime(l)v	2	m:0124	00248	8	1
M!	ChannelSwitch(r:embs.ChannelSwitch,l,c)v	2	m:0112	00224	12

C!	c:01A	embs.Broadcast	3	3	c:000
f	deadline	l	3	0
f	broadcastTime	l	3	2
m!	getBroadcastTime()l	3	m:0102	00204	8	0
m!	getDeadline()l	3	m:0106	0020C	8	2
m!	setBroadcastTime(l)v	3	m:010A	00214	8	1
m!	setDeadline(l)v	3	m:010E	0021C	8	3
M!	Broadcast(r:embs.Broadcast,l,l)v	3	m:00FC	001F8	12

C	c:01F	com.ibm.saguaro.system.$tatics	-1	-1	c:01/000
r	embs.SourceNode.timer1	r:com.ibm.saguaro.system.Timer	-1	0
r	embs.SourceNode.xmit	c[]	-1	1
r	embs.SourceNode.radio	r:com.ibm.saguaro.system.Radio	-1	2
r	embs.SourceNode.sinks	r:embs.SinkParameters[]	-1	3
r	embs.SourceNode.channelSwitches	r:embs.ChannelSwitch[]	-1	4
f	embs.SourceNode.currentChannel	i	-1	0
f	embs.SourceNode.ownPanId	c	-1	1
f	embs.SourceNode.ownShortAddr	c	-1	2
f	embs.SourceNode.YELLOW_LED	c	-1	3
f	embs.SourceNode.GREEN_LED	c	-1	4
f	embs.SourceNode.RED_LED	c	-1	5
f	embs.SourceNode.N_MIN	i	-1	6
f	embs.SourceNode.N_MAX	i	-1	7
f	embs.SourceNode.T_MIN	l	-1	8
f	embs.SourceNode.T_MAX	l	-1	10
f	embs.SourceNode.previousChannel	c	-1	12
f	embs.SourceNode.broadcastSet	z	-1	13
M	__init()v	-1	m:0042	00084	372

c	00091	0	13	0	13	0	m:0042
c	0009B	0	15	0	15	0	m:0042
c	000D2	0	20	0	20	0	m:0042
c	000D6	0	21	0	21	0	m:0042
c	000DB	0	22	0	22	0	m:0042
c	000DF	0	25	0	25	0	m:0042
c	000E3	0	26	0	26	0	m:0042
c	000E7	0	27	0	27	0	m:0042
c	000EB	0	29	0	29	0	m:0042
c	000EF	0	30	0	30	0	m:0042
c	000F4	0	31	0	31	0	m:0042
c	000FC	0	32	0	32	0	m:0042
c	00104	0	35	0	35	0	m:0042
c	0010B	0	38	0	38	0	m:0042
c	0010F	0	42	0	42	0	m:0042
c	0011B	0	44	0	44	0	m:0042
c	00120	0	45	0	45	0	m:0042
c	00125	0	46	0	46	0	m:0042
c	0012A	0	48	0	48	0	m:0042
c	00134	0	49	0	49	0	m:0042
c	0013E	0	56	0	56	0	m:0042
c	0014E	0	58	0	58	0	m:0042
c	0015F	0	59	0	59	0	m:0042
c	0016F	0	62	0	62	0	m:0042
c	00175	0	63	0	63	0	m:0042
c	0017B	0	64	0	64	0	m:0042
c	00183	0	65	0	65	0	m:0042
c	00195	0	66	0	66	0	m:0042
c	0019E	0	67	0	67	0	m:0042
c	001B1	0	68	0	68	0	m:0042
c	001C4	0	71	0	71	0	m:0042
c	001CE	0	77	0	77	0	m:0042
c	001D8	0	82	0	82	0	m:0042
c	001E1	0	83	0	83	0	m:0042
c	001F6	0	84	0	84	0	m:0042
e	001F8	m:0042
c	001FB	3	11	0	11	0	m:00FC
l!	001FB	00204	r:embs.Broadcast	this	m:00FC	0
l!	001FB	00204	l	broadcastTime	m:00FC	1
l	001FB	00204	l	cutoffTime	m:00FC	3
c	001FF	3	12	0	12	0	m:00FC
c	00203	3	13	0	13	0	m:00FC
e!	00204	m:00FC
c	00207	3	16	0	16	0	m:0102
l	00207	0020B	r:embs.Broadcast	this	m:0102	0
e!	0020C	m:0102
c	0020F	3	23	0	23	0	m:0106
l	0020F	00213	r:embs.Broadcast	this	m:0106	0
e!	00214	m:0106
c	00217	3	19	0	19	0	m:010A
l!	00217	0021C	r:embs.Broadcast	this	m:010A	0
l	00217	0021C	l	broadcastTime	m:010A	1
c	0021B	3	20	0	20	0	m:010A
e!	0021C	m:010A
c	0021F	3	26	0	26	0	m:010E
l!	0021F	00224	r:embs.Broadcast	this	m:010E	0
l	0021F	00224	l	deadline	m:010E	1
c	00223	3	27	0	27	0	m:010E
e!	00224	m:010E
c	00227	2	15	0	15	0	m:0112
l!	00227	00230	r:embs.ChannelSwitch	this	m:0112	0
l!	00227	00230	l	time	m:0112	1
l	00227	00230	c	channel	m:0112	3
c	0022B	2	16	0	16	0	m:0112
c	0022F	2	17	0	17	0	m:0112
e!	00230	m:0112
c	00233	2	30	0	30	0	m:0118
l	00233	00237	r:embs.ChannelSwitch	this	m:0118	0
e!	00238	m:0118
c	0023B	2	20	0	20	0	m:011C
l	0023B	0023F	r:embs.ChannelSwitch	this	m:011C	0
e!	00240	m:011C
c	00243	2	27	0	27	0	m:0120
l!	00243	00248	r:embs.ChannelSwitch	this	m:0120	0
l	00243	00248	c	channel	m:0120	1
c	00247	2	28	0	28	0	m:0120
e!	00248	m:0120
c	0024B	2	23	0	23	0	m:0124
l!	0024B	00250	r:embs.ChannelSwitch	this	m:0124	0
l	0024B	00250	l	time	m:0124	1
c	0024F	2	24	0	24	0	m:0124
e!	00250	m:0124
c	00253	1	10	0	10	0	m:0128
l!	00253	0026E	r:embs.SinkParameters	this	m:0128	0
l!	00253	0026E	c	channel	m:0128	1
l!	00253	0026E	c	panid	m:0128	2
l!	00253	0026E	c	address	m:0128	3
c	00258	1	11	0	11	0	m:0128
c	0025D	1	12	0	12	0	m:0128
c	00261	1	15	0	15	0	m:0128
c	00265	1	16	0	16	0	m:0128
c	00269	1	17	0	17	0	m:0128
c	0026D	1	18	0	18	0	m:0128
e!	0026E	m:0128
c	00271	1	21	0	21	0	m:0137
l!	00271	00290	r:embs.SinkParameters	this	m:0137	0
l!	00271	00290	i	n	m:0137	1
l	00271	00290	l	t	m:0137	2
c	00277	1	22	0	22	0	m:0137
c	0027F	1	23	0	23	0	m:0137
c	00287	1	24	0	24	0	m:0137
c	0028F	1	26	0	26	0	m:0137
e!	00290	m:0137
c	00293	1	34	0	34	0	m:0148
l	00293	00297	r:embs.SinkParameters	this	m:0148	0
e!	00298	m:0148
c	0029B	1	44	0	44	0	m:014C
l!	0029B	0029F	r:embs.SinkParameters	this	m:014C	0
e!	002A0	m:014C
c	002A3	1	53	0	53	0	m:0150
l!	002A3	002A7	r:embs.SinkParameters	this	m:0150	0
e!	002A8	m:0150
c	002AB	1	32	0	32	0	m:0154
l	002AB	002AF	r:embs.SinkParameters	this	m:0154	0
e!	002B0	m:0154
c	002B3	1	31	0	31	0	m:0158
l	002B3	002B7	r:embs.SinkParameters	this	m:0158	0
e!	002B8	m:0158
c	002BB	1	37	0	37	0	m:015C
l	002BB	002BF	r:embs.SinkParameters	this	m:015C	0
e!	002C0	m:015C
c	002C3	1	33	0	33	0	m:0160
l	002C3	002C7	r:embs.SinkParameters	this	m:0160	0
e!	002C8	m:0160
c	002CB	1	29	0	29	0	m:0164
l	002CB	002CF	r:embs.SinkParameters	this	m:0164	0
e!	002D0	m:0164
c	002D3	1	49	0	49	0	m:0168
l!	002D3	002D8	r:embs.SinkParameters	this	m:0168	0
l	002D3	002D8	i[]	beaconN	m:0168	1
c	002D7	1	50	0	50	0	m:0168
e!	002D8	m:0168
c	002DB	1	58	0	58	0	m:016C
l!	002DB	002E0	r:embs.SinkParameters	this	m:016C	0
l	002DB	002E0	l[]	beaconT	m:016C	1
c	002DF	1	59	0	59	0	m:016C
e!	002E0	m:016C
c	002E3	1	28	0	28	0	m:0170
l!	002E3	002E8	r:embs.SinkParameters	this	m:0170	0
l	002E3	002E8	i	n	m:0170	1
e!	002E8	m:0170
c	002EB	1	39	0	39	0	m:0174
l!	002EB	002F0	r:embs.SinkParameters	this	m:0174	0
l	002EB	002F0	i	numBeacons	m:0174	1
c	002EF	1	41	0	41	0	m:0174
e!	002F0	m:0174
c	002F3	1	30	0	30	0	m:0178
l!	002F3	002F8	r:embs.SinkParameters	this	m:0178	0
l	002F3	002F8	i	t	m:0178	1
e!	002F8	m:0178
c	002FB	0	8	0	8	0	m:017C
l!	002FB	002FC	r:embs.SourceNode	this	m:017C	0
e!	002FC	m:017C
c	002FF	0	8	0	8	0	m:017E
l	002FF	00309	i	x0	m:017E	0
l	002FF	00309	c[]	x1	m:017E	1
l	002FF	00309	i	x2	m:017E	2
l	002FF	00309	i	x3	m:017E	3
l	002FF	00309	l	x4	m:017E	4
e	0030A	m:017E
c	0030D	0	8	0	8	0	m:0185
l	0030D	00317	i	x0	m:0185	0
l	0030D	00317	c[]	x1	m:0185	1
l	0030D	00317	i	x2	m:0185	2
l	0030D	00317	i	x3	m:0185	3
l	0030D	00317	l	x4	m:0185	4
e	00318	m:0185
c	0031B	0	147	0	147	0	m:018C
l!	0031B	00369	c	param	m:018C	0
l!	0031B	00369	l	time	m:018C	1
c	00320	0	148	0	148	0	m:018C
c	00326	0	149	0	149	0	m:018C
c	0032A	0	151	0	151	0	m:018C
c	00330	0	152	0	152	0	m:018C
c	00334	0	153	0	153	0	m:018C
c	0033C	0	157	0	157	0	m:018C
l	0033C	00369	c	channelNum	m:018C	3
c	00345	0	158	0	158	0	m:018C
c	0034C	0	159	0	159	0	m:018C
c	0035E	0	160	0	160	0	m:018C
c	00364	0	161	0	161	0	m:018C
c	00368	0	162	0	162	0	m:018C
e!	0036A	m:018C
c	0036D	0	174	0	174	0	m:01B5
l	0036D	00392	i	beaconN	m:01B5	0
l	0036D	00392	l	beaconT	m:01B5	1
l	0036D	00392	i	channel	m:01B5	3
l	0036D	00392	l	t	m:01B5	4
l	0036D	00392	l	currentTime	m:01B5	6
c	00377	0	175	0	175	0	m:01B5
l	00377	00392	l	broadcastTime	m:01B5	8
c	0037F	0	176	0	176	0	m:01B5
l	0037F	00392	l	deadline	m:01B5	10
c	00391	0	177	0	177	0	m:01B5
e	00392	m:01B5
c	00395	0	165	0	165	0	m:01C9
l!	00395	003C4	l	time	m:01C9	0
l	00395	003C4	r:embs.ChannelSwitch[]	css	m:01C9	2
c	003A4	0	166	0	166	0	m:01C9
l	003A4	003B4	r:embs.ChannelSwitch	cs	m:01C9	6
c	003AF	0	167	0	167	0	m:01C9
c	003B4	0	165	0	165	0	m:01C9
c	003B9	0	170	0	170	0	m:01C9
e!	003C4	m:01C9
c	003C7	0	217	0	217	0	m:01E2
l	003C7	003D3	i[]	beaconN	m:01E2	0
l	003C7	003D3	i	numBeacons	m:01E2	1
e	003D4	m:01E2
c	003D7	0	221	0	221	0	m:01EA
l	003D7	003F2	l[]	beaconT	m:01EA	0
l	003D7	003F2	i	numBeacons	m:01EA	1
c	003E3	0	222	0	222	0	m:01EA
l	003E3	003F2	l	diffT	m:01EA	2
e	003F2	m:01EA
c	003F5	0	201	0	201	0	m:01F9
l	003F5	0042E	r:embs.ChannelSwitch[]	css	m:01F9	0
l	003F5	0042E	r:embs.ChannelSwitch	cs	m:01F9	1
l	003F7	0042E	i	x	m:01F9	2
c	003FC	0	202	0	202	0	m:01F9
c	00401	0	203	0	203	0	m:01F9
c	00405	0	204	0	204	0	m:01F9
c	00407	0	201	0	201	0	m:01F9
c	0040C	0	207	0	207	0	m:01F9
c	00414	0	208	0	208	0	m:01F9
l	00414	0042E	r:embs.ChannelSwitch[]	newCss	m:01F9	3
c	0041B	0	209	0	209	0	m:01F9
c	00421	0	208	0	208	0	m:01F9
c	00426	0	211	0	211	0	m:01F9
c	0042C	0	212	0	212	0	m:01F9
e	0042E	m:01F9
c	00431	0	106	0	106	0	m:0217
l	00431	00515	i	flags	m:0217	0
l	00431	00515	c[]	data	m:0217	1
l	00431	00515	i	len	m:0217	2
l	00431	00515	i	info	m:0217	3
l	00431	00515	l	time	m:0217	4
c	00437	0	107	0	107	0	m:0217
c	0043B	0	108	0	108	0	m:0217
c	0043E	0	110	0	110	0	m:0217
c	00443	0	112	0	112	0	m:0217
c	00445	0	114	0	114	0	m:0217
c	0044B	0	115	0	115	0	m:0217
l	0044B	00515	i	n	m:0217	6
c	00451	0	116	0	116	0	m:0217
l	00451	00515	l	currentTime	m:0217	7
c	0045E	0	117	0	117	0	m:0217
c	0046A	0	118	0	118	0	m:0217
l	0046A	00515	i	numBeacons	m:0217	9
c	00476	0	119	0	119	0	m:0217
c	0047A	0	120	0	120	0	m:0217
c	00493	0	121	0	121	0	m:0217
l	00493	004FB	i	diffN	m:0217	10
c	004AC	0	122	0	122	0	m:0217
l	004AC	004FB	l	diffT	m:0217	11
c	004BC	0	123	0	123	0	m:0217
c	004C4	0	124	0	124	0	m:0217
l	004C4	004FB	l	t	m:0217	13
c	004CA	0	125	0	125	0	m:0217
c	004CF	0	126	0	126	0	m:0217
c	004D3	0	127	0	127	0	m:0217
c	004FB	0	130	0	130	0	m:0217
c	00501	0	131	0	131	0	m:0217
c	00509	0	132	0	132	0	m:0217
c	0050D	0	134	0	134	0	m:0217
c	00513	0	141	0	141	0	m:0217
e	00516	m:0217
c	00519	0	87	0	87	0	m:028B
l	00519	00582	i	flags	m:028B	0
l	00519	00582	c[]	data	m:028B	1
l	00519	00582	i	len	m:028B	2
l	00519	00582	i	info	m:028B	3
l	00519	00582	l	time	m:028B	4
c	0051D	0	89	0	89	0	m:028B
c	00527	0	90	0	90	0	m:028B
c	0052D	0	92	0	92	0	m:028B
c	00536	0	93	0	93	0	m:028B
c	00540	0	94	0	94	0	m:028B
c	0055D	0	98	0	98	0	m:028B
c	00569	0	99	0	99	0	m:028B
c	00575	0	100	0	100	0	m:028B
c	00580	0	101	0	101	0	m:028B
e	00582	m:028B
c	00585	0	180	0	180	0	m:02C1
l	00585	00603	l	broadcastTime	m:02C1	0
l	00585	00603	l	deadline	m:02C1	2
l	00585	00603	i	sinkIndex	m:02C1	4
c	00591	0	181	0	181	0	m:02C1
c	00596	0	182	0	182	0	m:02C1
c	005A0	0	183	0	183	0	m:02C1
l	005A0	00603	r:embs.Broadcast	b	m:02C1	5
c	005B1	0	184	0	184	0	m:02C1
l	005B1	00603	r:embs.ChannelSwitch	cs	m:02C1	6
c	005C8	0	185	0	185	0	m:02C1
l	005C8	005D6	r:embs.ChannelSwitch	c	m:02C1	10
c	005D5	0	186	0	186	0	m:02C1
c	005D6	0	184	0	184	0	m:02C1
c	005DB	0	190	0	190	0	m:02C1
c	005E1	0	191	0	191	0	m:02C1
c	005E5	0	192	0	192	0	m:02C1
c	005E9	0	193	0	193	0	m:02C1
c	005F3	0	194	0	194	0	m:02C1
c	00602	0	195	0	195	0	m:02C1
e	00604	m:02C1
c	00607	0	226	0	226	0	m:0302
l	00607	0061F	i	led	m:0302	0
c	0060D	0	227	0	227	0	m:0302
l	0060D	0061F	i	ledState	m:0302	1
c	00610	0	228	0	228	0	m:0302
c	00618	0	230	0	230	0	m:0302
c	0061E	0	232	0	232	0	m:0302
e	00620	m:0302
S	M:/EMBS/EMBS_assessment2/part2/src/embs/SourceNode.java
:	package embs;
:	
:	import com.ibm.saguaro.system.*;
:	import com.ibm.saguaro.logger.*;
:	//import embs.SinkParameter;
:	
:	
:	public class SourceNode {
:	
:		static Timer  timer1;
:		static byte[] xmit;
:		static long   wait;
:		static Radio radio = new Radio();
:	
:		private static SinkParameters[] sinks = {
:			new SinkParameters((byte) 11,(byte)  0x11,(byte)  0x11), 
:			new SinkParameters((byte) 12, (byte) 0x12, (byte) 0x12),
:			new SinkParameters((byte) 13, (byte) 0x13, (byte) 0x13)};
:		// settings for SourceNode A
:		static int currentChannel = 0;
:		static byte ownPanId = 0x11;
:		static byte ownShortAddr = 0x1;
:	
:	
:		static byte YELLOW_LED = (byte) 0;
:		static byte GREEN_LED = (byte) 1;
:		static byte RED_LED = (byte) 2;
:	
:		static int N_MIN = 2;
:		static int N_MAX = 10;
:		static long T_MIN = 250;
:		static long T_MAX = 1500;
:		
:	
:		static ChannelSwitch[] channelSwitches = new ChannelSwitch[5];
:	
:		static byte previousChannel;
:		static boolean broadcastSet = false;
:		
:		static {
:			// Open the default radio
:			radio.open(Radio.DID, null, 0, 0);
:	
:			LED.setState((byte) 0, (byte) 1);
:			LED.setState((byte) 1, (byte) 1);
:			LED.setState((byte) 2, (byte) 1);
:	
:			timer1 = new Timer();
:			timer1.setCallback(new TimerEvent(null){
:				public void invoke(byte param, long time){
:					SourceNode.broadcastToSink(param, time);
:				}
:			});
:	
:			// Set channel 
:			radio.setChannel((byte) sinks[currentChannel].getChannel());
:			// Set the PAN ID and the short address
:			radio.setPanId(sinks[currentChannel].getPanid(), true);
:			radio.setShortAddr(sinks[currentChannel].getAddress());
:	
:			// Prepare beacon frame with source and destination addressing
:			xmit = new byte[12];
:			xmit[0] = Radio.FCF_BEACON;
:			xmit[1] = Radio.FCA_SRC_SADDR|Radio.FCA_DST_SADDR;
:			Util.set16le(xmit, 3, sinks[currentChannel].getPanid()); // destination PAN address 
:			Util.set16le(xmit, 5, 0xFFFF); // broadcast address 
:			Util.set16le(xmit, 7, sinks[currentChannel].getPanid()); // own PAN address 
:			Util.set16le(xmit, 9, sinks[currentChannel].getAddress()); // own short address 
:	
:			// register delegate for received frames
:			radio.setRxHandler(new DevCallback(null){
:				public int invoke (int flags, byte[] data, int len, int info, long time) {
:					return  SourceNode.onReceive(flags, data, len, info, time);
:				}
:			});
:	
:			radio.setTxHandler(new DevCallback(null){
:				public int invoke(int flags, byte[] data, int len, int info, long time) {
:					return SourceNode.onTransmit(flags, data, len, info, time);
:				}
:			});
:			radio.setRxMode(Radio.RXMODE_PROMISCUOUS);
:			radio.startRx(Device.ASAP, 0, Time.currentTicks()+0x7FFFFFFF);
:		}
:	
:		private static int onTransmit(int flags, byte[] data, int len, int info, long time) {
:			broadcastSet = false;
:			
:			if (radio.getState()==Device.S_RXEN){
:				radio.stopRx();
:			}
:			radio.setChannel((byte) previousChannel);
:			if (radio.getState()!=Device.S_RXEN){
:				radio.startRx(Device.TIMED, Time.currentTicks()+Time.toTickSpan(Time.MILLISECS, 10), Time.currentTicks()+0x7FFFFFFF);
:			}
:	//		Logger.appendString(csr.s2b("Turned on radio:"));
:	//		Logger.flush(Mote.INFO);
:			sinks[currentChannel].setBeaconN(new int[3]);
:			sinks[currentChannel].setBeaconT(new long[3]);
:			sinks[currentChannel].setNumBeacons(0);
:			return 0;
:		}
:	
:		// Called when a frame is received or at the end of a reception period 
:		private static int onReceive (int flags, byte[] data, int len, int info, long time) {
:			Logger.appendString(csr.s2b("Received packet"));
:			Logger.flush(Mote.INFO);
:			if (data == null) { // marks end of reception period
:				// turn green LED off 
:				LED.setState((byte)1, (byte)0);
:				
:				return 0;
:			}
:			int n = data[11];
:			long currentTime = Time.currentTime(Time.MILLISECS);
:			sinks[currentChannel].addBeacon(n, currentTime);
:			int numBeacons = sinks[currentChannel].getNumBeacons();
:			if (numBeacons>1 && !broadcastSet){
:				broadcastSet  = true;
:				int diffN = getDiffN(sinks[currentChannel].getBeaconN(), sinks[currentChannel].getNumBeacons());
:				long diffT = getDiffT(sinks[currentChannel].getBeaconT(), sinks[currentChannel].getNumBeacons());
:				if (diffN>0 && diffT<=(T_MAX*diffN)){
:					long t = diffT/diffN;
:					Logger.appendString(csr.s2b("Calculated T: "));
:					Logger.appendLong(t);
:					Logger.flush(Mote.WARN);
:					createNextBroadcast(sinks[currentChannel].getBeaconN()[numBeacons-1], sinks[currentChannel].getBeaconT()[numBeacons-1], currentChannel, t, currentTime);
:				}
:			}
:			Logger.appendString(csr.s2b("Current Beacon: "));
:			Logger.appendByte(data[11]);
:			Logger.flush(Mote.WARN);
:			// frame received, so blink red LED and log its payload
:			toggleLed(currentChannel);
:			//        if (n==1){
:			//	        int nextChannel = (currentChannel+1) % 3;
:			//	        setChannel(nextChannel);
:			//        }
:	
:	
:			return 0;
:		}
:	
:	
:		protected static void broadcastToSink(byte param, long time){
:			
:			LED.setState((byte) 2, (byte) 1);
:			Logger.appendString(csr.s2b("BROADCASTING!"));
:			Logger.flush(Mote.WARN);
:			
:			radio.stopRx();
:			toggleLed(2);
:			byte channelNum = getChannelSwitch(time, channelSwitches);
:	//		Logger.appendString(csr.s2b("Got channelNum: "));
:	//		Logger.appendByte(channelNum);
:	//		Logger.flush(Mote.INFO);
:			previousChannel = radio.getChannel();
:			radio.setChannel(channelNum);
:			radio.transmit(Device.ASAP|Radio.TXMODE_POWER_MAX, xmit, 0, 12, 0);
:			Logger.appendString(csr.s2b("Transmitted."));
:			Logger.flush(Mote.INFO);
:		}
:	
:		protected static byte getChannelSwitch(long time, ChannelSwitch[] css){
:			for (ChannelSwitch cs: css){
:				if (cs!=null && cs.getTime()==time){
:					return cs.getChannel();
:				}
:			}
:			return sinks[currentChannel].getChannel();
:		}
:	
:		private static void createNextBroadcast(int beaconN, long beaconT, int channel, long t, long currentTime) {
:			long broadcastTime = (t  * beaconN) + currentTime;
:			long deadline = broadcastTime + T_MIN;
:			setupBroadcastAndCallBack(broadcastTime + (T_MIN/2), deadline, channel);
:		}
:	
:		private static void setupBroadcastAndCallBack(long broadcastTime, long deadline, int sinkIndex){
:			broadcastTime+= T_MIN/4;
:			LED.setState((byte) 2, (byte) 0);
:			Broadcast b = new Broadcast(broadcastTime, deadline);
:			ChannelSwitch cs = new ChannelSwitch(broadcastTime, sinks[sinkIndex].getChannel());
:			for (ChannelSwitch c: channelSwitches){
:				if (c!=null && c.getTime()==broadcastTime){
:					return;
:				}
:			}
:			
:			Logger.appendString(csr.s2b("PREPARING BROADCAST! for time: "));
:			Logger.appendLong(broadcastTime);
:			Logger.flush(Mote.WARN);
:			channelSwitches = insertChannelSwitchInBuffer(channelSwitches, cs);
:			timer1.setAlarmBySpan(Time.toTickSpan(Time.MILLISECS, broadcastTime)-Time.currentTicks());
:		}
:		
:		
:		private static ChannelSwitch[] insertChannelSwitchInBuffer(ChannelSwitch[] css, ChannelSwitch cs){
:			// If space available in buffer
:			int x;
:			for (x=0; x<css.length; x++){
:				if (css[x]==null){
:					css[x] = cs;
:					return css;
:				}
:			}
:			ChannelSwitch[] newCss = new ChannelSwitch[css.length+2];
:			for (x=0; x<css.length; x++){
:				newCss[x] = css[x];
:			}
:			newCss[x+1] = cs;
:			return newCss;
:		}
:	
:	
:		private static int getDiffN(int[] beaconN, int numBeacons) {
:			return beaconN[numBeacons-2]-beaconN[numBeacons-1];
:		}
:	
:		private static long getDiffT(long[] beaconT, int numBeacons) {
:			long diffT = beaconT[numBeacons-1]-beaconT[numBeacons-2];
:			return (diffT < 0) ? -diffT : diffT;
:		}
:	
:		private static void toggleLed(int led){
:			int ledState = LED.getState((byte) led);
:			if (ledState==0){
:				LED.setState((byte) led, (byte) 1);
:			} else {
:				LED.setState((byte) led, (byte) 0);
:			}
:		}
:	
:		//	// Called on a timer alarm
:		//    public static void periodicSend(byte param, long time) {
:		//        
:		//        if(nc>0){
:		//	        // transmit a beacon 
:		//    	    radio.transmit(Device.ASAP|Radio.TXMODE_POWER_MAX, xmit, 0, 12, 0);
:		//        	// program new alarm
:		//        	tsend.setAlarmBySpan(wait);
:		//        	nc--;
:		//        	xmit[11]--;
:		//        }
:		//        else{
:		//        	//start reception phase
:		//	        radio.startRx(Device.ASAP, 0, Time.currentTicks()+wait);
:		//	        // turn green LED on 
:		//	        LED.setState((byte)1, (byte)1);
:		//	        
:		//        }
:		//        
:		//    }
:	}
S	M:/EMBS/EMBS_assessment2/part2/src/embs/SinkParameters.java
:	package embs;
:	
:	public class SinkParameters {
:	    private byte channel;
:	    private byte panid;
:	    private byte address;
:	    
:	    private int N;
:	    private int T;
:	    private int[] beaconN = new int[3];
:	    private long[] beaconT = new long[3];
:	    private int numBeacons = 0;
:	    
:	    public SinkParameters(byte channel, byte panid, byte address){
:	    	this.channel =  channel;
:	    	this.panid =  panid;
:	    	this.address =  address;
:	    }
:	
:	    public void addBeacon(int n, long t){
:	    	if (numBeacons<2){
:		    	beaconN[numBeacons]=n;
:		    	beaconT[numBeacons]=t;
:		    	numBeacons++;
:	    	}
:	    }
:	    
:		public void setN(int n) {this.N = n;}
:		public int getT() {return T;}
:		public void setT(int t) {this.T = t;}
:		public int getN() {return N;}
:		public byte getChannel() {return channel;}
:		public byte getPanid() {return panid;}
:		public byte getAddress() {return address;}
:	
:		public int getNumBeacons() {
:			return numBeacons;
:		}
:		public void setNumBeacons(int numBeacons) {this.numBeacons = numBeacons;
:	
:		}
:	
:		public int[] getBeaconN() {
:			return beaconN;
:		}
:	
:		public void setBeaconN(int[] beaconN) {
:	
:			this.beaconN = beaconN;
:		}
:	
:		public long[] getBeaconT() {
:			return beaconT;
:		}
:	
:		public void setBeaconT(long[] beaconT) {
:	
:			this.beaconT = beaconT;
:		}
:	    
:		
:	}
S	M:/EMBS/EMBS_assessment2/part2/src/embs/ChannelSwitch.java
:	package embs;
:	
:	/**
:	 * Class used to represent channel switch events
:	 */
:	public class ChannelSwitch {
:	
:	    // Time: time at which to switch from current channel to channel specified below
:	    private long time;
:	
:	    // Channel: channel to begin listening to at time Time
:	    private byte channel;
:	
:	    public ChannelSwitch(long time, byte channel) {
:	        this.time = time;
:	        this.channel = channel;
:	    }
:	
:	    public long getTime() {
:	        return time;
:	    }
:	    public void setTime(long time) {
:	        this.time = time;
:	    }
:	
:	    public void setChannel(byte channel) {
:	        this.channel = channel;
:	    }
:	    public byte getChannel() {
:	        return channel;
:	    }
:	}
S	M:/EMBS/EMBS_assessment2/part2/src/embs/Broadcast.java
:	package embs;
:	
:	/**
:	 * Represents a scheduled broadcast
:	 */
:	public class Broadcast{
:	    private long broadcastTime; // broadcastTime: time at which to broadcast
:	    private long deadline; // deadline: time at which
:	
:	    public Broadcast(long broadcastTime, long cutoffTime) {
:	        this.broadcastTime = broadcastTime;
:	        this.deadline = cutoffTime;
:	    }
:	
:	    public long getBroadcastTime() {
:	        return broadcastTime;
:	    }
:	    public void setBroadcastTime(long broadcastTime) {
:	        this.broadcastTime = broadcastTime;
:	    }
:	
:	    public long getDeadline() {
:	        return deadline;
:	    }
:	    public void setDeadline(long deadline) {
:	        this.deadline = deadline;
:	    }
:	}
