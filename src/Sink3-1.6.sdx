A!	Sink3-1.6.58376	2.0	Java

X	c:01/000	com.ibm.saguaro.system.Assembly
X	c:01/001	com.ibm.saguaro.system.Util
X	c:01/002	com.ibm.saguaro.system.Timer
X	c:01/003	com.ibm.saguaro.system.Time
X	c:01/004	com.ibm.saguaro.system.MoteException
X	c:01/005	com.ibm.saguaro.system.Device
X	c:01/006	com.ibm.saguaro.system.SDev
X	c:01/007	com.ibm.saguaro.system.CDev
X	c:01/008	com.ibm.saguaro.system.OutOfResourcesException
X	c:01/009	com.ibm.saguaro.system.OsException
X	c:01/00A	com.ibm.saguaro.system.NullReferenceException
X	c:01/00B	com.ibm.saguaro.system.SystemException
X	c:01/00C	com.ibm.saguaro.system.Mote
X	c:01/00D	com.ibm.saguaro.system.LIP
X	c:01/00E	com.ibm.saguaro.system.LED
X	c:01/00F	com.ibm.saguaro.system.InvalidCastException
X	c:01/010	com.ibm.saguaro.system.IndexOutOfRangeException
X	c:01/011	com.ibm.saguaro.system.I2C
X	c:01/012	com.ibm.saguaro.system.GPIO
X	c:01/013	com.ibm.saguaro.system.Err
X	c:01/014	com.ibm.saguaro.system.DeviceException
X	c:01/015	com.ibm.saguaro.system.SPI
X	c:01/016	com.ibm.saguaro.system.Radio
X	c:01/017	com.ibm.saguaro.system.WLIP
X	c:01/018	com.ibm.saguaro.system.ArrayTypeMismatchException
X	c:01/019	com.ibm.saguaro.system.ArithmException
X	c:01/01A	com.ibm.saguaro.system.ArgumentException
X	c:01/01B	com.ibm.saguaro.system.AccessException
X	c:01/01C	com.ibm.saguaro.system.ADC
X	c:02/000	com.ibm.saguaro.logger.Logger

C!	c:004	embs.Sink3	-1	0	c:000
R	tsend	r:com.ibm.saguaro.system.Timer	0	0
R	tstart	r:com.ibm.saguaro.system.Timer	0	1
R	flashTimer	r:com.ibm.saguaro.system.Timer	0	2
R	xmit	c[]	0	3
R	radio	r:com.ibm.saguaro.system.Radio	0	4
F	light	z	0	0
F	wait	l	0	1
F	n	i	0	3
F	nc	i	0	4
F	t	i	0	5
F	channel	c	0	6
F	panid	c	0	7
F	address	c	0	8
F	okCount	i	0	9
F	okCountTemp	i	0	10
H	sink13_end_receive$UTF8	b[]	0	115,105,110,107,49,51,32,101,110,100,32,114,101,99,101,105,118,101
H	sink13_receiving$UTF8	b[]	0	115,105,110,107,49,51,32,114,101,99,101,105,118,105,110,103
M!	Sink3(r:embs.Sink3)v	-1	m:0097	0012E	4
M	access$000(i,c[],i,i,l)i	-1	m:0099	00132	14
M	access$100(c,l)v	-1	m:00A0	00140	10
M	flash(c,l)v	-1	m:00A5	0014A	46
M	onReceive(i,c[],i,i,l)i	-1	m:00BC	00178	116
M!	periodicSend(c,l)v	-1	m:00F6	001EC	102
M!	restart(c,l)v	-1	m:0129	00252	46

C	c:006	com.ibm.saguaro.system.$tatics	-1	-1	c:01/000
r	embs.Sink3.tsend	r:com.ibm.saguaro.system.Timer	-1	0
r	embs.Sink3.tstart	r:com.ibm.saguaro.system.Timer	-1	1
r	embs.Sink3.flashTimer	r:com.ibm.saguaro.system.Timer	-1	2
r	embs.Sink3.xmit	c[]	-1	3
r	embs.Sink3.radio	r:com.ibm.saguaro.system.Radio	-1	4
f	embs.Sink3.light	z	-1	0
f	embs.Sink3.wait	l	-1	1
f	embs.Sink3.n	i	-1	3
f	embs.Sink3.nc	i	-1	4
f	embs.Sink3.t	i	-1	5
f	embs.Sink3.channel	c	-1	6
f	embs.Sink3.panid	c	-1	7
f	embs.Sink3.address	c	-1	8
f	embs.Sink3.okCount	i	-1	9
f	embs.Sink3.okCountTemp	i	-1	10
M	__init()v	-1	m:0010	00020	270

c	0002D	0	12	0	12	0	m:0010
c	00031	0	16	0	16	0	m:0010
c	0003B	0	17	0	17	0	m:0010
c	0003F	0	20	0	20	0	m:0010
c	00044	0	23	0	23	0	m:0010
c	00048	0	24	0	24	0	m:0010
c	0004D	0	25	0	25	0	m:0010
c	00052	0	27	0	27	0	m:0010
c	00056	0	28	0	28	0	m:0010
c	0005A	0	32	0	32	0	m:0010
c	00066	0	36	0	36	0	m:0010
c	0006F	0	40	0	40	0	m:0010
c	00079	0	41	0	41	0	m:0010
c	00082	0	45	0	45	0	m:0010
c	00088	0	46	0	46	0	m:0010
c	0008E	0	47	0	47	0	m:0010
c	00096	0	48	0	48	0	m:0010
c	000A1	0	49	0	49	0	m:0010
c	000AA	0	50	0	50	0	m:0010
c	000B6	0	51	0	51	0	m:0010
c	000C2	0	53	0	53	0	m:0010
c	000CC	0	56	0	56	0	m:0010
c	000D6	0	65	0	65	0	m:0010
c	000E0	0	66	0	66	0	m:0010
c	000EA	0	72	0	72	0	m:0010
c	000F4	0	73	0	73	0	m:0010
c	000FE	0	82	0	82	0	m:0010
c	00108	0	83	0	83	0	m:0010
c	00112	0	91	0	91	0	m:0010
c	0011D	0	94	0	94	0	m:0010
c	0012C	0	98	0	98	0	m:0010
e	0012E	m:0010
c	00131	0	7	0	7	0	m:0097
l!	00131	00132	r:embs.Sink3	this	m:0097	0
e!	00132	m:0097
c	00135	0	7	0	7	0	m:0099
l	00135	0013F	i	x0	m:0099	0
l	00135	0013F	c[]	x1	m:0099	1
l	00135	0013F	i	x2	m:0099	2
l	00135	0013F	i	x3	m:0099	3
l	00135	0013F	l	x4	m:0099	4
e	00140	m:0099
c	00143	0	7	0	7	0	m:00A0
l	00143	00149	c	x0	m:00A0	0
l	00143	00149	l	x1	m:00A0	1
e	0014A	m:00A0
c	0014D	0	101	0	101	0	m:00A5
l	0014D	00177	c	param	m:00A5	0
l	0014D	00177	l	time	m:00A5	1
c	00158	0	102	0	102	0	m:00A5
c	00167	0	103	0	103	0	m:00A5
c	00176	0	105	0	105	0	m:00A5
e	00178	m:00A5
c	0017B	0	109	0	109	0	m:00BC
l	0017B	001EC	i	flags	m:00BC	0
l	0017B	001EC	c[]	data	m:00BC	1
l	0017B	001EC	i	len	m:00BC	2
l	0017B	001EC	i	info	m:00BC	3
l	0017B	001EC	l	time	m:00BC	4
c	0017E	0	111	0	111	0	m:00BC
c	00183	0	112	0	112	0	m:00BC
c	00188	0	113	0	113	0	m:00BC
c	0018D	0	116	0	116	0	m:00BC
c	00197	0	117	0	117	0	m:00BC
c	001A6	0	119	0	119	0	m:00BC
c	001AE	0	120	0	120	0	m:00BC
c	001B7	0	122	0	122	0	m:00BC
c	001B9	0	128	0	128	0	m:00BC
c	001BE	0	129	0	129	0	m:00BC
c	001C5	0	132	0	132	0	m:00BC
c	001CA	0	134	0	134	0	m:00BC
c	001D6	0	136	0	136	0	m:00BC
c	001DE	0	137	0	137	0	m:00BC
c	001E2	0	138	0	138	0	m:00BC
c	001EA	0	140	0	140	0	m:00BC
e	001EC	m:00BC
c	001EF	0	148	0	148	0	m:00F6
l!	001EF	00252	c	param	m:00F6	0
l!	001EF	00252	l	time	m:00F6	1
c	001F4	0	150	0	150	0	m:00F6
c	00206	0	152	0	152	0	m:00F6
c	0020F	0	153	0	153	0	m:00F6
c	00217	0	154	0	154	0	m:00F6
c	00225	0	158	0	158	0	m:00F6
c	0022F	0	159	0	159	0	m:00F6
c	00242	0	161	0	161	0	m:00F6
c	00247	0	162	0	162	0	m:00F6
c	0024C	0	163	0	163	0	m:00F6
c	00251	0	167	0	167	0	m:00F6
e!	00252	m:00F6
c	00255	0	173	0	173	0	m:0129
l!	00255	00280	c	param	m:0129	0
l!	00255	00280	l	time	m:0129	1
c	0025B	0	174	0	174	0	m:0129
c	00265	0	175	0	175	0	m:0129
c	00270	0	177	0	177	0	m:0129
c	00275	0	178	0	178	0	m:0129
c	0027A	0	179	0	179	0	m:0129
c	0027F	0	180	0	180	0	m:0129
e!	00280	m:0129
S	M:/EMBS/EMBS_assessment2/part2/src/embs/Sink3.java
:	package embs;
:	
:	import com.ibm.saguaro.logger.Logger;
:	import com.ibm.saguaro.system.*;
:	
:	@SuppressWarnings("Duplicates")
:	public class Sink3 {
:	
:	    private static Timer  tsend;
:	    private static Timer  tstart;
:	    private static Timer flashTimer;
:	    private static boolean light=false;
:	
:	    private static byte[] xmit;
:	    private static long   wait;
:	    static Radio radio = new Radio();
:	    private static int n = 4; // number of beacons of sync phase - sample only, assessment will use unknown values
:	    private static int nc;
:	
:	    private static int t = 250; // milliseconds between beacons - sample only, assessment will use unknown values
:	
:	    // settings for sink A
:	    private static byte channel = 2; // channel 11
:	    private static byte panid = (byte) (0x13);
:	    private static byte address = (byte) (0x13);
:	
:	    private static int okCount = 0;
:	    private static int okCountTemp = 0;
:	
:	    static {
:	        // Open the default radio
:	        radio.open(Radio.DID, null, 0, 0);
:	
:	
:	        // Set channel
:	        radio.setChannel((byte)channel);
:	
:	
:	        // Set the PAN ID and the short address
:	        radio.setPanId(panid, true);
:	        radio.setShortAddr(address);
:	
:	
:	        // Prepare beacon frame with source and destination addressing
:	        xmit = new byte[12];
:	        xmit[0] = Radio.FCF_BEACON;
:	        xmit[1] = Radio.FCA_SRC_SADDR|Radio.FCA_DST_SADDR;
:	        Util.set16le(xmit, 3, panid); // destination PAN address
:	        Util.set16le(xmit, 5, 0xFFFF); // broadcast address
:	        Util.set16le(xmit, 7, panid); // own PAN address
:	        Util.set16le(xmit, 9, address); // own short address
:	
:	        xmit[11] = (byte)n;
:	
:	        // register delegate for received frames
:	        radio.setRxHandler(new DevCallback(null){
:	            public int invoke (int flags, byte[] data, int len, int info, long time) {
:	                return  Sink3.onReceive(flags, data, len, info, time);
:	            }
:	        });
:	
:	
:	
:	        // Setup a periodic timer callback for beacon transmissions
:	        tsend = new Timer();
:	        tsend.setCallback(new TimerEvent(null){
:	            public void invoke(byte param, long time){
:	                Sink3.periodicSend(param, time);
:	            }
:	        });
:	
:	        flashTimer = new Timer();
:	        flashTimer.setCallback(new TimerEvent(null) {
:	            @Override
:	            public void invoke(byte param, long time) { Sink3.flash(param, time); }
:	        });
:	
:	
:	
:	
:	        // Setup a periodic timer callback to restart the protocol
:	        tstart = new Timer();
:	        tstart.setCallback(new TimerEvent(null){
:	            public void invoke(byte param, long time){
:	                Sink3.restart(param, time);
:	            }
:	        });
:	
:	
:	        // Convert the periodic delay from ms to platform ticks
:	        wait = Time.toTickSpan(Time.MILLISECS, t);
:	
:	
:	        tstart.setAlarmBySpan(Time.toTickSpan(Time.SECONDS, 1)); //starts the protocol 5 seconds after constructing the assembly
:	
:	
:	
:	    }
:	
:	    private static void flash(byte param, long time) {
:	        if(okCountTemp-- > 0) {
:	            LED.setState((byte) 2, LED.getState((byte) 2) == 1 ? (byte) 0 : (byte) 1);
:	            flashTimer.setAlarmBySpan(Time.toTickSpan(Time.MILLISECS, 300));
:	        }
:	    }
:	
:	    // Called when a frame is received or at the end of a reception period
:	    private static int onReceive (int flags, byte[] data, int len, int info, long time) {
:	        if (data == null) { // marks end of reception period
:	            // turn green LED off
:	            LED.setState((byte)0, (byte)0);
:	            LED.setState((byte)1, (byte)0);
:	            LED.setState((byte)2, (byte)0);
:	
:	            //set alarm to restart protocol
:	            Logger.appendString(csr.s2b("sink13 end receive")); Logger.flush(Mote.WARN);
:	            tstart.setAlarmBySpan(10*wait);
:	
:	            okCountTemp = okCount<<1;
:	            flashTimer.setAlarmBySpan(wait);
:	
:	            return 0;
:	        }
:	
:	
:	        // frame received, so blink red LED and log its payload
:	
:	        if(light){
:	            LED.setState((byte)2, (byte)1);
:	        }
:	        else{
:	            LED.setState((byte)2, (byte)0);
:	        }
:	        light=!light;
:	
:	        Logger.appendByte(data[11]);
:	        Logger.flush(Mote.ERROR);
:	        okCount++;
:	
:	        return 0;
:	
:	    }
:	
:	
:	    // Called on a timer alarm
:	    public static void periodicSend(byte param, long time) {
:	
:	        if(nc>0){
:	            // transmit a beacon
:	            radio.transmit(Device.ASAP|Radio.TXMODE_POWER_MAX, xmit, 0, 12, 0);
:	            // program new alarm
:	            tsend.setAlarmBySpan(wait);
:	            nc--;
:	            xmit[11]--;
:	        }
:	        else{
:	            //start reception phase
:	            Logger.appendString(csr.s2b("sink13 receiving")); Logger.flush(Mote.WARN);
:	            radio.startRx(Device.ASAP, 0, Time.currentTicks()+wait);
:	            // turn green LED on
:	            LED.setState((byte)0, (byte)0);
:	            LED.setState((byte)1, (byte)1);
:	            LED.setState((byte)2, (byte)0);
:	
:	        }
:	
:	    }
:	
:	
:	    // Called on a timer alarm, starts the protocol
:	    public static void restart(byte param, long time) {
:	
:	        nc=n;
:	        xmit[11]=(byte)n;
:	        tsend.setAlarmBySpan(0);
:	
:	        LED.setState((byte)0, (byte)1);
:	        LED.setState((byte)1, (byte)0);
:	        LED.setState((byte)2, (byte)0);
:	    }
:	
:	
:	
:	}
