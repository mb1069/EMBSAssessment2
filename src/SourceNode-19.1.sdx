A!	SourceNode-19.1.60976	2.0	Java

X	c:01/000	com.ibm.saguaro.system.Assembly
X	c:01/001	com.ibm.saguaro.system.Util
X	c:01/002	com.ibm.saguaro.system.Timer
X	c:01/003	com.ibm.saguaro.system.Time
X	c:01/004	com.ibm.saguaro.system.MoteException
X	c:01/005	com.ibm.saguaro.system.Device
X	c:01/006	com.ibm.saguaro.system.SDev
X	c:01/007	com.ibm.saguaro.system.CDev
X	c:01/008	com.ibm.saguaro.system.OutOfResourcesException
X	c:01/009	com.ibm.saguaro.system.OsException
X	c:01/00A	com.ibm.saguaro.system.NullReferenceException
X	c:01/00B	com.ibm.saguaro.system.SystemException
X	c:01/00C	com.ibm.saguaro.system.Mote
X	c:01/00D	com.ibm.saguaro.system.LIP
X	c:01/00E	com.ibm.saguaro.system.LED
X	c:01/00F	com.ibm.saguaro.system.InvalidCastException
X	c:01/010	com.ibm.saguaro.system.IndexOutOfRangeException
X	c:01/011	com.ibm.saguaro.system.I2C
X	c:01/012	com.ibm.saguaro.system.GPIO
X	c:01/013	com.ibm.saguaro.system.Err
X	c:01/014	com.ibm.saguaro.system.DeviceException
X	c:01/015	com.ibm.saguaro.system.SPI
X	c:01/016	com.ibm.saguaro.system.Radio
X	c:01/017	com.ibm.saguaro.system.WLIP
X	c:01/018	com.ibm.saguaro.system.ArrayTypeMismatchException
X	c:01/019	com.ibm.saguaro.system.ArithmException
X	c:01/01A	com.ibm.saguaro.system.ArgumentException
X	c:01/01B	com.ibm.saguaro.system.AccessException
X	c:01/01C	com.ibm.saguaro.system.ADC
X	c:02/000	com.ibm.saguaro.logger.Logger

C!	c:006	embs.SourceNode	-1	0	c:000
R	timer0	r:com.ibm.saguaro.system.Timer	0	0
R	timer1	r:com.ibm.saguaro.system.Timer	0	1
R	timer2	r:com.ibm.saguaro.system.Timer	0	2
R	xmit	c[]	0	3
R	radio	r:com.ibm.saguaro.system.Radio	0	4
R	sinks	r:embs.SinkParameters[]	0	5
R	broadcasted	i[]	0	6
R	broadcasts	r:embs.Broadcast[]	0	7
F	currentSinkIndex	i	0	0
F	ownPanId	c	0	1
F	ownShortAddr	c	0	2
F	YELLOW_LED	c	0	3
F	GREEN_LED	c	0	4
F	RED_LED	c	0	5
F	N_MIN	i	0	6
F	N_MAX	i	0	7
F	T_MIN	l	0	8
F	T_MAX	l	0	10
F	previousChannel	i	0	12
F	TIME_ADJUSTMENT	l	0	13
F	lastChannelSwitch	l	0	15
F	wait	l	0	3327
H	BROADCASTING_on_channel$UTF8	b[]	0	66,82,79,65,68,67,65,83,84,73,78,71,33,32,111,110,32,99,104,97,110,110,101,108,58,32
H	Broadcast_results$UTF8	b[]	0	66,114,111,97,100,99,97,115,116,32,114,101,115,117,108,116,115,58,32
H	Calculated_T$UTF8	b[]	0	67,97,108,99,117,108,97,116,101,100,32,84,58,32
H	Changed_channel_to$UTF8	b[]	0	67,104,97,110,103,101,100,32,99,104,97,110,110,101,108,32,116,111,58,32
H	Finished_broadcast$UTF8	b[]	0	70,105,110,105,115,104,101,100,32,98,114,111,97,100,99,97,115,116,46
H	PAA$UTF8	b[]	0	80,65,65,33,58,32
H	PICKED_DIFFERENT_CHANNEL$UTF8	b[]	0	80,73,67,75,69,68,32,68,73,70,70,69,82,69,78,84,32,67,72,65,78,78,69,76,33,58,32
H	PREPARING_BROADCAST_for_channel$UTF8	b[]	0	80,82,69,80,65,82,73,78,71,32,66,82,79,65,68,67,65,83,84,33,32,102,111,114,32,99,104,97,110,110,101,108,58,32
H	Received_packet_c$UTF8	b[]	0	82,101,99,101,105,118,101,100,32,112,97,99,107,101,116,32,99,58
H	at_time$UTF8	b[]	0	97,116,32,116,105,109,101,58,32
H	at_time0$UTF8	b[]	0	32,97,116,32,116,105,109,101,58,32
H	n$UTF8	b[]	0	32,110,58
H	s$UTF8	b[]	0	47
M!	SourceNode(r:embs.SourceNode)v	-1	m:019E	0033C	4
M	access$000(i,c[],i,i,l)i	-1	m:01A0	00340	14
M	access$100(i,c[],i,i,l)i	-1	m:01A7	0034E	14
M!	broadcastToSink(c,l)v	-1	m:01AE	0035C	110
M	createNextBroadcast(i,l,i,l,l)v	-1	m:01E5	003CA	52
M	getDiffN(i,i)i	-1	m:01FF	003FE	8
M	getDiffT(l,l)l	-1	m:0203	00406	26
M!	isValidPeriod(l)z	-1	m:0210	00420	30
M	onReceive(i,c[],i,i,l)i	-1	m:021F	0043E	358
M	onTransmit(i,c[],i,i,l)i	-1	m:02D2	005A4	114
M	pickNextSink(i)i	-1	m:030B	00616	118
M	setChannel(i)v	-1	m:0346	0068C	128
M	setLEDListening(c)v	-1	m:0386	0070C	60
M	setupBroadcastAndCallBack(l,l,i,l)v	-1	m:03A4	00748	70
M	startListening()v	-1	m:03C7	0078E	34
M	toggleLed(i)v	-1	m:03D8	007B0	28

C!	c:008	embs.SinkParameters	1	1	c:000
f	nextBeaconTime	l	1	0
f	broadcastSet	z	1	2
f	beaconT	l	1	3
f	beaconN	i	1	5
f	T	l	1	6
f	maxObservedN	i	1	8
f	address	c	1	9
f	panid	c	1	10
f	channel	c	1	11
m!	addBeacon(i,l)v	1	m:015C	002B8	12	2
m!	getAddress()c	1	m:0162	002C4	8	9
m!	getBeaconN()i	1	m:0166	002CC	8	10
m!	getBeaconT()l	1	m:016A	002D4	8	12
m!	getBroadcastSet()z	1	m:016E	002DC	8	0
m!	getChannel()c	1	m:0172	002E4	8	7
m!	getMaxObservedN()i	1	m:0176	002EC	8	6
m!	getNextBeaconTime()l	1	m:017A	002F4	8	15
m!	getPanid()c	1	m:017E	002FC	8	8
m!	getT()l	1	m:0182	00304	8	4
m!	setBeaconN(i)v	1	m:0186	0030C	8	11
m!	setBeaconT(l)v	1	m:018A	00314	8	13
m!	setBroadcastSet(z)v	1	m:018E	0031C	8	1
m!	setMaxObservedN(i)v	1	m:0192	00324	8	3
m!	setNextBeaconTime(l)v	1	m:0196	0032C	8	14
m!	setT(l)v	1	m:019A	00334	8	5
M!	SinkParameters(r:embs.SinkParameters,c,c,c)v	1	m:0146	0028C	44

C!	c:016	embs.ChannelSwitch	2	2	c:000
f	channel	c	2	0
f	time	l	2	1
m!	getChannel()c	2	m:0136	0026C	8	3
m!	getTime()l	2	m:013A	00274	8	0
m!	setChannel(c)v	2	m:013E	0027C	8	2
m!	setTime(l)v	2	m:0142	00284	8	1
M!	ChannelSwitch(r:embs.ChannelSwitch,l,c)v	2	m:0130	00260	12

C!	c:01B	embs.Broadcast	3	3	c:000
f	broadcastTime	l	3	0
m!	getBroadcastTime()l	3	m:0128	00250	8	0
m!	setBroadcastTime(l)v	3	m:012C	00258	8	1
M!	Broadcast(r:embs.Broadcast,l)v	3	m:0124	00248	8

C	c:01F	com.ibm.saguaro.system.$tatics	-1	-1	c:01/000
r	embs.SourceNode.timer0	r:com.ibm.saguaro.system.Timer	-1	0
r	embs.SourceNode.timer1	r:com.ibm.saguaro.system.Timer	-1	1
r	embs.SourceNode.timer2	r:com.ibm.saguaro.system.Timer	-1	2
r	embs.SourceNode.xmit	c[]	-1	3
r	embs.SourceNode.radio	r:com.ibm.saguaro.system.Radio	-1	4
r	embs.SourceNode.sinks	r:embs.SinkParameters[]	-1	5
r	embs.SourceNode.broadcasted	i[]	-1	6
r	embs.SourceNode.broadcasts	r:embs.Broadcast[]	-1	7
f	embs.SourceNode.currentSinkIndex	i	-1	0
f	embs.SourceNode.ownPanId	c	-1	1
f	embs.SourceNode.ownShortAddr	c	-1	2
f	embs.SourceNode.YELLOW_LED	c	-1	3
f	embs.SourceNode.GREEN_LED	c	-1	4
f	embs.SourceNode.RED_LED	c	-1	5
f	embs.SourceNode.N_MIN	i	-1	6
f	embs.SourceNode.N_MAX	i	-1	7
f	embs.SourceNode.T_MIN	l	-1	8
f	embs.SourceNode.T_MAX	l	-1	10
f	embs.SourceNode.previousChannel	i	-1	12
f	embs.SourceNode.TIME_ADJUSTMENT	l	-1	13
f	embs.SourceNode.lastChannelSwitch	l	-1	15
M	__init()v	-1	m:0042	00084	452

c	00091	0	16	0	16	0	m:0042
c	0009B	0	18	0	18	0	m:0042
c	000D2	0	23	0	23	0	m:0042
c	000D6	0	24	0	24	0	m:0042
c	000DB	0	25	0	25	0	m:0042
c	000DF	0	28	0	28	0	m:0042
c	000E3	0	29	0	29	0	m:0042
c	000E7	0	30	0	30	0	m:0042
c	000EB	0	32	0	32	0	m:0042
c	000EF	0	33	0	33	0	m:0042
c	000F4	0	34	0	34	0	m:0042
c	000FC	0	35	0	35	0	m:0042
c	00104	0	37	0	37	0	m:0042
c	00115	0	40	0	40	0	m:0042
c	0011C	0	43	0	43	0	m:0042
c	00124	0	44	0	44	0	m:0042
c	0012C	0	49	0	49	0	m:0042
c	00138	0	51	0	51	0	m:0042
c	0013D	0	52	0	52	0	m:0042
c	00142	0	53	0	53	0	m:0042
c	00147	0	55	0	55	0	m:0042
c	00151	0	56	0	56	0	m:0042
c	00158	0	57	0	57	0	m:0042
c	00162	0	63	0	63	0	m:0042
c	0016C	0	64	0	64	0	m:0042
c	00173	0	65	0	65	0	m:0042
c	0017D	0	71	0	71	0	m:0042
c	00187	0	72	0	72	0	m:0042
c	0018E	0	73	0	73	0	m:0042
c	00198	0	80	0	80	0	m:0042
c	001A8	0	82	0	82	0	m:0042
c	001B9	0	83	0	83	0	m:0042
c	001C9	0	86	0	86	0	m:0042
c	001CF	0	87	0	87	0	m:0042
c	001D5	0	88	0	88	0	m:0042
c	001DD	0	89	0	89	0	m:0042
c	001EF	0	90	0	90	0	m:0042
c	001F8	0	91	0	91	0	m:0042
c	0020B	0	92	0	92	0	m:0042
c	0021E	0	95	0	95	0	m:0042
c	00228	0	101	0	101	0	m:0042
c	00232	0	107	0	107	0	m:0042
c	00247	0	108	0	108	0	m:0042
e	00248	m:0042
c	0024B	3	10	0	10	0	m:0124
l!	0024B	00250	r:embs.Broadcast	this	m:0124	0
l!	0024B	00250	l	broadcastTime	m:0124	1
c	0024F	3	11	0	11	0	m:0124
e!	00250	m:0124
c	00253	3	14	0	14	0	m:0128
l	00253	00257	r:embs.Broadcast	this	m:0128	0
e!	00258	m:0128
c	0025B	3	17	0	17	0	m:012C
l!	0025B	00260	r:embs.Broadcast	this	m:012C	0
l	0025B	00260	l	broadcastTime	m:012C	1
c	0025F	3	18	0	18	0	m:012C
e!	00260	m:012C
c	00263	2	15	0	15	0	m:0130
l!	00263	0026C	r:embs.ChannelSwitch	this	m:0130	0
l!	00263	0026C	l	time	m:0130	1
l	00263	0026C	c	channel	m:0130	3
c	00267	2	16	0	16	0	m:0130
c	0026B	2	17	0	17	0	m:0130
e!	0026C	m:0130
c	0026F	2	30	0	30	0	m:0136
l	0026F	00273	r:embs.ChannelSwitch	this	m:0136	0
e!	00274	m:0136
c	00277	2	20	0	20	0	m:013A
l	00277	0027B	r:embs.ChannelSwitch	this	m:013A	0
e!	0027C	m:013A
c	0027F	2	27	0	27	0	m:013E
l!	0027F	00284	r:embs.ChannelSwitch	this	m:013E	0
l	0027F	00284	c	channel	m:013E	1
c	00283	2	28	0	28	0	m:013E
e!	00284	m:013E
c	00287	2	23	0	23	0	m:0142
l!	00287	0028C	r:embs.ChannelSwitch	this	m:0142	0
l	00287	0028C	l	time	m:0142	1
c	0028B	2	24	0	24	0	m:0142
e!	0028C	m:0142
c	0028F	1	10	0	10	0	m:0146
l!	0028F	002B8	r:embs.SinkParameters	this	m:0146	0
l!	0028F	002B8	c	channel	m:0146	1
l!	0028F	002B8	c	panid	m:0146	2
l!	0028F	002B8	c	address	m:0146	3
c	00293	1	11	0	11	0	m:0146
c	0029B	1	12	0	12	0	m:0146
c	0029F	1	13	0	13	0	m:0146
c	002A7	1	14	0	14	0	m:0146
c	002AB	1	18	0	18	0	m:0146
c	002AF	1	19	0	19	0	m:0146
c	002B3	1	20	0	20	0	m:0146
c	002B7	1	21	0	21	0	m:0146
e!	002B8	m:0146
c	002BB	1	32	0	32	0	m:015C
l!	002BB	002C4	r:embs.SinkParameters	this	m:015C	0
l!	002BB	002C4	i	n	m:015C	1
l	002BB	002C4	l	t	m:015C	2
c	002BF	1	33	0	33	0	m:015C
c	002C3	1	34	0	34	0	m:015C
e!	002C4	m:015C
c	002C7	1	42	0	42	0	m:0162
l	002C7	002CB	r:embs.SinkParameters	this	m:0162	0
e!	002CC	m:0162
c	002CF	1	45	0	45	0	m:0166
l	002CF	002D3	r:embs.SinkParameters	this	m:0166	0
e!	002D4	m:0166
c	002D7	1	51	0	51	0	m:016A
l	002D7	002DB	r:embs.SinkParameters	this	m:016A	0
e!	002DC	m:016A
c	002DF	1	24	0	24	0	m:016E
l	002DF	002E3	r:embs.SinkParameters	this	m:016E	0
e!	002E4	m:016E
c	002E7	1	40	0	40	0	m:0172
l	002E7	002EB	r:embs.SinkParameters	this	m:0172	0
e!	002EC	m:0172
c	002EF	1	39	0	39	0	m:0176
l	002EF	002F3	r:embs.SinkParameters	this	m:0176	0
e!	002F4	m:0176
c	002F7	1	62	0	62	0	m:017A
l	002F7	002FB	r:embs.SinkParameters	this	m:017A	0
e!	002FC	m:017A
c	002FF	1	41	0	41	0	m:017E
l	002FF	00303	r:embs.SinkParameters	this	m:017E	0
e!	00304	m:017E
c	00307	1	37	0	37	0	m:0182
l	00307	0030B	r:embs.SinkParameters	this	m:0182	0
e!	0030C	m:0182
c	0030F	1	48	0	48	0	m:0186
l!	0030F	00314	r:embs.SinkParameters	this	m:0186	0
l	0030F	00314	i	beaconN	m:0186	1
c	00313	1	49	0	49	0	m:0186
e!	00314	m:0186
c	00317	1	54	0	54	0	m:018A
l!	00317	0031C	r:embs.SinkParameters	this	m:018A	0
l	00317	0031C	l	beaconT	m:018A	1
c	0031B	1	55	0	55	0	m:018A
e!	0031C	m:018A
c	0031F	1	28	0	28	0	m:018E
l!	0031F	00324	r:embs.SinkParameters	this	m:018E	0
l	0031F	00324	z	value	m:018E	1
c	00323	1	29	0	29	0	m:018E
e!	00324	m:018E
c	00327	1	36	0	36	0	m:0192
l!	00327	0032C	r:embs.SinkParameters	this	m:0192	0
l	00327	0032C	i	n	m:0192	1
e!	0032C	m:0192
c	0032F	1	58	0	58	0	m:0196
l!	0032F	00334	r:embs.SinkParameters	this	m:0196	0
l	0032F	00334	l	l	m:0196	1
c	00333	1	59	0	59	0	m:0196
e!	00334	m:0196
c	00337	1	38	0	38	0	m:019A
l!	00337	0033C	r:embs.SinkParameters	this	m:019A	0
l	00337	0033C	l	t	m:019A	1
e!	0033C	m:019A
c	0033F	0	8	0	8	0	m:019E
l!	0033F	00340	r:embs.SourceNode	this	m:019E	0
e!	00340	m:019E
c	00343	0	8	0	8	0	m:01A0
l	00343	0034D	i	x0	m:01A0	0
l	00343	0034D	c[]	x1	m:01A0	1
l	00343	0034D	i	x2	m:01A0	2
l	00343	0034D	i	x3	m:01A0	3
l	00343	0034D	l	x4	m:01A0	4
e	0034E	m:01A0
c	00351	0	8	0	8	0	m:01A7
l	00351	0035B	i	x0	m:01A7	0
l	00351	0035B	c[]	x1	m:01A7	1
l	00351	0035B	i	x2	m:01A7	2
l	00351	0035B	i	x3	m:01A7	3
l	00351	0035B	l	x4	m:01A7	4
e	0035C	m:01A7
c	0035F	0	165	0	165	0	m:01AE
l!	0035F	003CA	c	sinkIndex	m:01AE	0
l!	0035F	003CA	l	time	m:01AE	1
c	00369	0	166	0	166	0	m:01AE
c	0036F	0	168	0	168	0	m:01AE
c	00375	0	169	0	169	0	m:01AE
c	00380	0	170	0	170	0	m:01AE
c	00386	0	171	0	171	0	m:01AE
c	0038C	0	172	0	172	0	m:01AE
c	00390	0	174	0	174	0	m:01AE
c	00394	0	175	0	175	0	m:01AE
c	0039D	0	176	0	176	0	m:01AE
c	003A1	0	178	0	178	0	m:01AE
c	003BF	0	179	0	179	0	m:01AE
c	003C5	0	180	0	180	0	m:01AE
c	003C9	0	181	0	181	0	m:01AE
e!	003CA	m:01AE
c	003CD	0	256	0	256	0	m:01E5
l	003CD	003FE	i	beaconN	m:01E5	0
l	003CD	003FE	l	beaconT	m:01E5	1
l	003CD	003FE	i	channel	m:01E5	3
l	003CD	003FE	l	t	m:01E5	4
l	003CD	003FE	l	currentTimeMS	m:01E5	6
c	003D4	0	257	0	257	0	m:01E5
l	003D4	003FE	l	broadcastTimeByMSSpan	m:01E5	8
c	003DC	0	258	0	258	0	m:01E5
l	003DC	003FE	l	deadline	m:01E5	10
c	003E6	0	259	0	259	0	m:01E5
c	003F1	0	260	0	260	0	m:01E5
c	003FA	0	261	0	261	0	m:01E5
c	003FD	0	262	0	262	0	m:01E5
e	003FE	m:01E5
c	00401	0	310	0	310	0	m:01FF
l	00401	00405	i	beacon1N	m:01FF	0
l	00401	00405	i	beacon2N	m:01FF	1
e	00406	m:01FF
c	00409	0	314	0	314	0	m:0203
l	00409	00420	l	beacon1T	m:0203	0
l	00409	00420	l	beacon2T	m:0203	2
c	0040E	0	315	0	315	0	m:0203
l	0040E	00420	l	diffT	m:0203	4
e	00420	m:0203
c	00423	0	161	0	161	0	m:0210
l!	00423	0043E	l	period	m:0210	0
e!	0043E	m:0210
c	00441	0	113	0	113	0	m:021F
l	00441	005A3	i	flags	m:021F	0
l	00441	005A3	c[]	data	m:021F	1
l	00441	005A3	i	len	m:021F	2
l	00441	005A3	i	info	m:021F	3
l	00441	005A3	l	time	m:021F	4
c	00444	0	114	0	114	0	m:021F
c	00446	0	117	0	117	0	m:021F
c	0044C	0	119	0	119	0	m:021F
l	0044C	005A3	i	n	m:021F	6
c	00459	0	120	0	120	0	m:021F
c	00464	0	122	0	122	0	m:021F
c	0046A	0	123	0	123	0	m:021F
c	00477	0	124	0	124	0	m:021F
c	0047D	0	125	0	125	0	m:021F
c	00485	0	126	0	126	0	m:021F
c	00489	0	127	0	127	0	m:021F
c	0048F	0	130	0	130	0	m:021F
l	0048F	005A3	l	currentTime	m:021F	7
c	004A0	0	131	0	131	0	m:021F
c	004B6	0	132	0	132	0	m:021F
c	004BF	0	133	0	133	0	m:021F
c	004C2	0	134	0	134	0	m:021F
c	004C4	0	136	0	136	0	m:021F
c	004D1	0	138	0	138	0	m:021F
c	004E3	0	139	0	139	0	m:021F
c	004FB	0	141	0	141	0	m:021F
c	0051A	0	142	0	142	0	m:021F
c	0052A	0	143	0	143	0	m:021F
l	0052A	0058A	i	diffN	m:021F	9
c	0053B	0	144	0	144	0	m:021F
l	0053B	0058A	l	diffT	m:021F	10
c	0055A	0	145	0	145	0	m:021F
c	00562	0	146	0	146	0	m:021F
l	00562	0058A	l	t	m:021F	12
c	0056E	0	147	0	147	0	m:021F
c	00574	0	148	0	148	0	m:021F
c	00579	0	149	0	149	0	m:021F
c	0057D	0	150	0	150	0	m:021F
c	0058A	0	155	0	155	0	m:021F
c	00595	0	156	0	156	0	m:021F
c	005A1	0	157	0	157	0	m:021F
e	005A4	m:021F
c	005A7	0	184	0	184	0	m:02D2
l	005A7	00616	i	flags	m:02D2	0
l	005A7	00616	c[]	data	m:02D2	1
l	005A7	00616	i	len	m:02D2	2
l	005A7	00616	i	info	m:02D2	3
l	005A7	00616	l	time	m:02D2	4
c	005CF	0	188	0	188	0	m:02D2
c	005DA	0	189	0	189	0	m:02D2
c	005E3	0	190	0	190	0	m:02D2
c	005E6	0	191	0	191	0	m:02D2
c	005EC	0	192	0	192	0	m:02D2
c	005F4	0	193	0	193	0	m:02D2
c	005FA	0	194	0	194	0	m:02D2
c	00602	0	195	0	195	0	m:02D2
c	00608	0	196	0	196	0	m:02D2
c	00610	0	197	0	197	0	m:02D2
c	00614	0	198	0	198	0	m:02D2
e	00616	m:02D2
c	00619	0	203	0	203	0	m:030B
l	00619	0068C	i	currSinkIndex	m:030B	0
l	00619	0068C	i	x	m:030B	1
c	0061F	0	204	0	204	0	m:030B
l	0061F	0068C	l	nextBeaconTime	m:030B	2
c	00621	0	205	0	205	0	m:030B
l	00621	0068C	i	nextBeaconSinkIndex	m:030B	4
c	0062A	0	206	0	206	0	m:030B
c	0062E	0	207	0	207	0	m:030B
c	0064E	0	208	0	208	0	m:030B
c	00657	0	209	0	209	0	m:030B
c	00659	0	205	0	205	0	m:030B
c	0065E	0	213	0	213	0	m:030B
c	00662	0	214	0	214	0	m:030B
c	0066B	0	216	0	216	0	m:030B
c	00671	0	217	0	217	0	m:030B
c	00675	0	218	0	218	0	m:030B
c	00680	0	219	0	219	0	m:030B
c	00686	0	221	0	221	0	m:030B
c	0068A	0	222	0	222	0	m:030B
e	0068C	m:030B
c	0068F	0	229	0	229	0	m:0346
l	0068F	0070B	i	sinkIndex	m:0346	0
c	00699	0	230	0	230	0	m:0346
c	0069F	0	233	0	233	0	m:0346
c	006AF	0	234	0	234	0	m:0346
c	006B8	0	235	0	235	0	m:0346
c	006C9	0	237	0	237	0	m:0346
c	006D7	0	238	0	238	0	m:0346
c	006E6	0	241	0	241	0	m:0346
c	006EA	0	242	0	242	0	m:0346
c	006EF	0	244	0	244	0	m:0346
c	006F5	0	245	0	245	0	m:0346
c	00700	0	246	0	246	0	m:0346
c	00706	0	247	0	247	0	m:0346
c	0070A	0	248	0	248	0	m:0346
e	0070C	m:0346
c	0070F	0	328	0	328	0	m:0386
l	0070F	00748	c	led	m:0386	0
c	00732	0	329	0	329	0	m:0386
l	00732	00742	c	b	m:0386	4
c	00736	0	330	0	330	0	m:0386
c	0073D	0	332	0	332	0	m:0386
c	00742	0	328	0	328	0	m:0386
c	00747	0	335	0	335	0	m:0386
e	00748	m:0386
c	0074B	0	273	0	273	0	m:03A4
l	0074B	0078D	l	broadcastTime	m:03A4	0
l	0074B	0078D	l	deadline	m:03A4	2
l	0074B	0078D	i	sinkIndex	m:03A4	4
l	0074B	0078D	l	currentTimeMS	m:03A4	5
c	00751	0	274	0	274	0	m:03A4
c	00755	0	275	0	275	0	m:03A4
c	00759	0	277	0	277	0	m:03A4
c	00767	0	279	0	279	0	m:03A4
c	00772	0	280	0	280	0	m:03A4
c	00774	0	282	0	282	0	m:03A4
c	0077F	0	283	0	283	0	m:03A4
c	00781	0	285	0	285	0	m:03A4
c	0078C	0	288	0	288	0	m:03A4
e	0078E	m:03A4
c	00791	0	252	0	252	0	m:03C7
c	007AE	0	253	0	253	0	m:03C7
e	007B0	m:03C7
c	007B3	0	319	0	319	0	m:03D8
l	007B3	007CB	i	led	m:03D8	0
c	007B9	0	320	0	320	0	m:03D8
l	007B9	007CB	i	ledState	m:03D8	1
c	007BC	0	321	0	321	0	m:03D8
c	007C4	0	323	0	323	0	m:03D8
c	007CA	0	325	0	325	0	m:03D8
e	007CC	m:03D8
S	M:/EMBS/EMBS_assessment2/part2/src/embs/SourceNode.java
:	package embs;
:	
:	import com.ibm.saguaro.system.*;
:	import com.ibm.saguaro.logger.*;
:	//import embs.SinkParameter;
:	
:	
:	public class SourceNode {
:	
:		static Timer  timer0;
:		static Timer  timer1;
:		static Timer  timer2;
:		
:		static byte[] xmit;
:		static long   wait;
:		static Radio radio = new Radio();
:		
:		private static SinkParameters[] sinks = {
:			new SinkParameters((byte) 11,(byte)  0x11,(byte)  0x11), 
:			new SinkParameters((byte) 12, (byte) 0x12, (byte) 0x12),
:			new SinkParameters((byte) 13, (byte) 0x13, (byte) 0x13)};
:		// settings for SourceNode A
:		static int currentSinkIndex = 2;
:		static byte ownPanId = 0x11;
:		static byte ownShortAddr = 0x1;
:	
:	
:		static byte YELLOW_LED = (byte) 0;
:		static byte GREEN_LED = (byte) 1;
:		static byte RED_LED = (byte) 2;
:	
:		static int N_MIN = 2;
:		static int N_MAX = 10;
:		static long T_MIN = 250;
:		static long T_MAX = 1500;
:		
:		static int[] broadcasted = new int[]{0,0,0};
:	
:	//	static ChannelSwitch[] channelSwitches = new ChannelSwitch[3];
:		static Broadcast[] broadcasts = new Broadcast[3];
:	
:		static int previousChannel;
:		static long TIME_ADJUSTMENT = 3;
:		static long lastChannelSwitch = 0;
:		
:		
:		static {
:			// Open the default radio
:			radio.open(Radio.DID, null, 0, 0);
:	
:			LED.setState((byte) 0, (byte) 1);
:			LED.setState((byte) 1, (byte) 1);
:			LED.setState((byte) 2, (byte) 1);
:	
:			timer0 = new Timer();
:			timer0.setParam((byte) 0);
:			timer0.setCallback(new TimerEvent(null){
:				public void invoke(byte param, long time){
:					SourceNode.broadcastToSink(param, time);
:				}
:			});
:			
:			timer1 = new Timer();
:			timer1.setParam((byte) 1);
:			timer1.setCallback(new TimerEvent(null){
:				public void invoke(byte param, long time){
:					SourceNode.broadcastToSink(param, time);
:				}
:			});
:			
:			timer2 = new Timer();
:			timer2.setParam((byte) 2);
:			timer2.setCallback(new TimerEvent(null){
:				public void invoke(byte param, long time){
:					SourceNode.broadcastToSink(param, time);
:				}
:			});
:	
:			// Set channel 
:			radio.setChannel((byte) sinks[currentSinkIndex].getChannel());
:			// Set the PAN ID and the short address
:			radio.setPanId(sinks[currentSinkIndex].getPanid(), true);
:			radio.setShortAddr(sinks[currentSinkIndex].getAddress());
:	
:			// Prepare beacon frame with source and destination addressing
:			xmit = new byte[12];
:			xmit[0] = Radio.FCF_BEACON;
:			xmit[1] = Radio.FCA_SRC_SADDR|Radio.FCA_DST_SADDR;
:			Util.set16le(xmit, 3, sinks[currentSinkIndex].getPanid()); // destination PAN address 
:			Util.set16le(xmit, 5, 0xFFFF); // broadcast address 
:			Util.set16le(xmit, 7, sinks[currentSinkIndex].getPanid()); // own PAN address 
:			Util.set16le(xmit, 9, sinks[currentSinkIndex].getAddress()); // own short address 
:	
:			// register delegate for received frames
:			radio.setRxHandler(new DevCallback(null){
:				public int invoke (int flags, byte[] data, int len, int info, long time) {
:					return  SourceNode.onReceive(flags, data, len, info, time);
:				}
:			});
:	
:			radio.setTxHandler(new DevCallback(null){
:				public int invoke(int flags, byte[] data, int len, int info, long time) {
:					return SourceNode.onTransmit(flags, data, len, info, time);
:				}
:			});
:	//		radio.setRxMode(Radio.RXMODE_PROMISCUOUS);
:			radio.startRx(Device.ASAP, 0, Time.currentTicks()+0x7FFFFFFF);
:		}
:	
:		// Called when a frame is received or at the end of a reception period 
:		private static int onReceive (int flags, byte[] data, int len, int info, long time) {
:	
:			if (data == null) { // marks end of reception period
:				return 0;
:			}
:				
:			int n = data[11];
:			
:			if (n>sinks[currentSinkIndex].getMaxObservedN()){
:				sinks[currentSinkIndex].setMaxObservedN(n);
:			}
:			Logger.appendString(csr.s2b("Received packet c:"));
:			Logger.appendByte(sinks[currentSinkIndex].getChannel());
:			Logger.appendString(csr.s2b(" n:"));
:			Logger.appendByte(data[11]);
:			Logger.flush(Mote.WARN);
:			long currentTime = Time.currentTime(Time.MILLISECS);
:			
:			//Case where first beacon received is n=1 and no previous known beacons, switch channel
:			if (sinks[currentSinkIndex].getBeaconN()==-1 && n==1){
:				sinks[currentSinkIndex].setNextBeaconTime(currentTime + (11*T_MIN));
:				setChannel(pickNextSink(currentSinkIndex));
:				startListening();
:				return 0;
:			}
:			if (!sinks[currentSinkIndex].getBroadcastSet()){
:				//If T is known for sink
:				if (sinks[currentSinkIndex].getT()!=-1){
:					createNextBroadcast(n, currentTime, currentSinkIndex, sinks[currentSinkIndex].getT(), currentTime);
:				} else {
:					if (sinks[currentSinkIndex].getBeaconT()!=-1 && sinks[currentSinkIndex].getBeaconN()!=-1){
:						int diffN = getDiffN(sinks[currentSinkIndex].getBeaconN(), n);
:						long diffT = getDiffT(sinks[currentSinkIndex].getBeaconT(), currentTime);
:						if (diffN>0 && diffT-TIME_ADJUSTMENT <=(T_MAX*diffN)  && isValidPeriod(diffT/diffN)){
:							long t = diffT/diffN;
:							sinks[currentSinkIndex].setT(t);
:							Logger.appendString(csr.s2b("Calculated T: "));
:							Logger.appendLong(t);
:							Logger.flush(Mote.WARN);
:							createNextBroadcast(n, currentTime, currentSinkIndex, t, currentTime);
:						}
:					}
:				}
:			}
:			sinks[currentSinkIndex].setBeaconN(n);
:			sinks[currentSinkIndex].setBeaconT(currentTime);
:			return 0;
:		}
:	
:		protected static boolean isValidPeriod(long period){
:			return T_MIN-TIME_ADJUSTMENT<=period && period <= T_MAX+TIME_ADJUSTMENT;
:		}
:	
:		protected static void broadcastToSink(byte sinkIndex, long time){
:			if (radio.getState()==Device.S_RXEN){
:				radio.stopRx();
:			}
:			Logger.appendString(csr.s2b("BROADCASTING! on channel: "));
:			Logger.appendByte(sinks[sinkIndex].getChannel());
:			Logger.appendString(csr.s2b("at time: "));
:			Logger.appendLong(Time.currentTicks());
:			Logger.flush(Mote.WARN);
:			
:			setChannel((int) sinkIndex);
:			broadcasted[sinkIndex]++;
:			previousChannel = (int) sinkIndex;
:			
:			radio.transmit(Device.TIMED, xmit, 0, 12, Time.currentTicks()+Time.toTickSpan(Time.MILLISECS, T_MIN/2));
:			Logger.appendString(csr.s2b("Finished broadcast."));
:			Logger.flush(Mote.INFO);
:		}
:	
:		private static int onTransmit(int flags, byte[] data, int len, int info, long time) {
:			sinks[currentSinkIndex].setNextBeaconTime(Time.currentTime(Time.MILLISECS)+(sinks[currentSinkIndex].getT()*(11+sinks[currentSinkIndex].getMaxObservedN())));
:			//TODO schedule listen callback
:	//		Logger.appendInt(currentSinkIndex);
:	//		Logger.flush(Mote.ERROR);
:			sinks[currentSinkIndex].setBroadcastSet(false);
:			setChannel(pickNextSink(currentSinkIndex));
:			startListening();
:			Logger.appendString(csr.s2b("Broadcast results: "));
:			Logger.appendInt(broadcasted[0]);
:			Logger.appendString(csr.s2b("/"));
:			Logger.appendInt(broadcasted[1]);
:			Logger.appendString(csr.s2b("/"));
:			Logger.appendInt(broadcasted[2]);
:			Logger.flush(Mote.WARN);
:			return 0;
:		}
:		
:		private static int pickNextSink(int currSinkIndex){
:			int x = 0;
:			long nextBeaconTime = -1;
:			int nextBeaconSinkIndex = -1;
:			for (x=0; x<sinks.length;x++){
:				if (x!=currSinkIndex){
:					if (nextBeaconTime==-1 | sinks[x].getNextBeaconTime()<nextBeaconTime){
:						nextBeaconTime = sinks[x].getNextBeaconTime();
:						nextBeaconSinkIndex = x;
:					}
:				}
:			}
:			if (nextBeaconSinkIndex==-1){
:				return (currSinkIndex+1) % (sinks.length);
:			} else {
:				Logger.appendString(csr.s2b("PICKED DIFFERENT CHANNEL!: "));
:				Logger.appendInt(nextBeaconSinkIndex);
:				if (((currSinkIndex+1) % (sinks.length))==nextBeaconSinkIndex){
:					Logger.appendString(csr.s2b("PAA!: "));
:				}
:				Logger.flush(Mote.ERROR);
:				return nextBeaconSinkIndex;
:			}
:		}
:		
:		
:		private static void setChannel(int sinkIndex){
:	
:			if (radio.getState()==Device.S_RXEN){
:				radio.stopRx();
:			}
:			
:			Util.set16le(xmit, 3, sinks[sinkIndex].getPanid()); // destination PAN address 
:			Util.set16le(xmit, 5, 0xFFFF); // broadcast address 
:			Util.set16le(xmit, 7, sinks[sinkIndex].getPanid()); // own PAN address 
:			
:			radio.setChannel((byte) sinks[sinkIndex].getChannel());
:			radio.setPanId(sinks[sinkIndex].getPanid(), true);
:	//		radio.setShortAddr(sinks[sinkIndex].getAddress());
:					
:			currentSinkIndex = sinkIndex;
:			setLEDListening((byte) sinkIndex);
:	
:			Logger.appendString(csr.s2b("Changed channel to: "));
:			Logger.appendByte(sinks[sinkIndex].getChannel());
:			Logger.appendString(csr.s2b(" at time: "));
:			Logger.flush(Mote.WARN);
:		}
:	
:		
:		private static void startListening(){
:			radio.startRx(Device.TIMED, Time.currentTicks()+Time.toTickSpan(Time.MILLISECS, 10), Time.currentTicks()+0x7FFFFFFF);
:		}
:		
:		private static void createNextBroadcast(int beaconN, long beaconT, int channel, long t, long currentTimeMS) {
:			long broadcastTimeByMSSpan = (t  * beaconN);
:			long deadline = broadcastTimeByMSSpan + T_MIN;
:			setupBroadcastAndCallBack(broadcastTimeByMSSpan, deadline, channel, currentTimeMS);
:			sinks[currentSinkIndex].setBroadcastSet(true);
:			setChannel(pickNextSink(currentSinkIndex));
:			startListening();
:		}
:	
:		private static void setupBroadcastAndCallBack(long broadcastTime, long deadline, int sinkIndex, long currentTimeMS){
:	//		ChannelSwitch cs = new ChannelSwitch(broadcastTime, sinks[sinkIndex].getChannel());
:	//		for (ChannelSwitch c: channelSwitches){
:	//			if (c!=null && c.getTime()==broadcastTime){
:	//				return;
:	//			}
:	//		}
:	//		channelSwitches = insertChannelSwitchInBuffer(channelSwitches, cs);
:			
:			Logger.appendString(csr.s2b("PREPARING BROADCAST! for channel: "));
:			Logger.appendInt(sinkIndex);
:			Logger.flush(Mote.WARN);
:			
:			switch (sinkIndex){
:			case 0:
:				timer0.setAlarmBySpan(Time.toTickSpan(Time.MILLISECS, broadcastTime));
:				break;
:			case 1:
:				timer1.setAlarmBySpan(Time.toTickSpan(Time.MILLISECS, broadcastTime));
:				break;
:			case 2:
:				timer2.setAlarmBySpan(Time.toTickSpan(Time.MILLISECS, broadcastTime));
:				break;
:			}
:		}
:		
:		
:	//	private static ChannelSwitch[] insertChannelSwitchInBuffer(ChannelSwitch[] css, ChannelSwitch cs){
:	//		// If space available in buffer
:	//		int x;
:	//		for (x=0; x<css.length; x++){
:	//			if (css[x]==null){
:	//				css[x] = cs;
:	//				return css;
:	//			}
:	//		}
:	//		ChannelSwitch[] newCss = new ChannelSwitch[css.length+2];
:	//		for (x=0; x<css.length; x++){
:	//			newCss[x] = css[x];
:	//		}
:	//		newCss[x+1] = cs;
:	//		return newCss;
:	//	}
:	
:	
:		private static int getDiffN(int beacon1N, int beacon2N) {
:			return beacon1N - beacon2N;
:		}
:	
:		private static long getDiffT(long beacon1T, long beacon2T) {
:			long diffT = beacon1T-beacon2T;
:			return (diffT < 0) ? -diffT : diffT;
:		}
:	
:		private static void toggleLed(int led){
:			int ledState = LED.getState((byte) led);
:			if (ledState==0){
:				LED.setState((byte) led, (byte) 1);
:			} else {
:				LED.setState((byte) led, (byte) 0);
:			}
:		}
:	
:		private static void setLEDListening(byte led){
:			for (byte b: new byte[]{YELLOW_LED, RED_LED, GREEN_LED}){
:				if (b==led){
:					LED.setState(b, (byte) 1);
:				} else {
:					LED.setState(b, (byte) 0);
:				}
:			}
:		}
:		
:		//	// Called on a timer alarm
:		//    public static void periodicSend(byte param, long time) {
:		//        
:		//        if(nc>0){
:		//	        // transmit a beacon 
:		//    	    radio.transmit(Device.ASAP|Radio.TXMODE_POWER_MAX, xmit, 0, 12, 0);
:		//        	// program new alarm
:		//        	tsend.setAlarmBySpan(wait);
:		//        	nc--;
:		//        	xmit[11]--;
:		//        }
:		//        else{
:		//        	//start reception phase
:		//	        radio.startRx(Device.ASAP, 0, Time.currentTicks()+wait);
:		//	        // turn green LED on 
:		//	        LED.setState((byte)1, (byte)1);
:		//	        
:		//        }
:		//        
:		//    }
:	}
S	M:/EMBS/EMBS_assessment2/part2/src/embs/SinkParameters.java
:	package embs;
:	
:	import com.ibm.saguaro.system.Timer;
:	
:	public class SinkParameters {
:	    private byte channel;
:	    private byte panid;
:	    private byte address;
:	    
:	    private int maxObservedN = -1;
:	    private long T = -1;
:	    private int beaconN = -1;
:	    private long beaconT = -1;
:	    private boolean broadcastSet = false;
:		private long nextBeaconTime;
:	    
:	    public SinkParameters(byte channel, byte panid, byte address){
:	    	this.channel =  channel;
:	    	this.panid =  panid;
:	    	this.address =  address;
:	    }
:	
:	    public boolean getBroadcastSet(){
:	    	return this.broadcastSet;
:	    }
:	    
:	    public void setBroadcastSet(boolean value){
:	    	this.broadcastSet = value;
:	    }
:	    
:	    public void addBeacon(int n, long t){
:	    	this.beaconN = n;
:	    	this.beaconT = t;
:	    }
:	    
:		public void setMaxObservedN(int n) {this.maxObservedN = n;}
:		public long getT() {return T;}
:		public void setT(long t) {this.T = t;}
:		public int getMaxObservedN() {return maxObservedN;}
:		public byte getChannel() {return channel;}
:		public byte getPanid() {return panid;}
:		public byte getAddress() {return address;}
:	
:		public int getBeaconN() {
:			return beaconN;
:		}
:		public void setBeaconN(int beaconN) {
:			this.beaconN = beaconN;
:		}
:		public long getBeaconT() {
:			return beaconT;
:		}
:		public void setBeaconT(long beaconT) {
:			this.beaconT = beaconT;
:		}
:	
:		public void setNextBeaconTime(long l) {
:			this.nextBeaconTime = l;
:		}
:		
:		public long getNextBeaconTime(){
:			return this.nextBeaconTime;
:		}
:	  
:		
:	}
S	M:/EMBS/EMBS_assessment2/part2/src/embs/ChannelSwitch.java
:	package embs;
:	
:	/**
:	 * Class used to represent channel switch events
:	 */
:	public class ChannelSwitch {
:	
:	    // Time: time at which to switch from current channel to channel specified below
:	    private long time;
:	
:	    // Channel: channel to begin listening to at time Time
:	    private byte channel;
:	
:	    public ChannelSwitch(long time, byte channel) {
:	        this.time = time;
:	        this.channel = channel;
:	    }
:	
:	    public long getTime() {
:	        return time;
:	    }
:	    public void setTime(long time) {
:	        this.time = time;
:	    }
:	
:	    public void setChannel(byte channel) {
:	        this.channel = channel;
:	    }
:	    public byte getChannel() {
:	        return channel;
:	    }
:	}
S	M:/EMBS/EMBS_assessment2/part2/src/embs/Broadcast.java
:	package embs;
:	
:	/**
:	 * Represents a scheduled broadcast
:	 */
:	public class Broadcast{
:	    private long broadcastTime; // broadcastTime: time at which to broadcast
:	
:	    public Broadcast(long broadcastTime) {
:	        this.broadcastTime = broadcastTime;
:	    }
:	
:	    public long getBroadcastTime() {
:	        return broadcastTime;
:	    }
:	    public void setBroadcastTime(long broadcastTime) {
:	        this.broadcastTime = broadcastTime;
:	    }
:	}
