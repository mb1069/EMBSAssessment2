A!	SourceNode-20.7.03791	2.0	Java

X	c:01/000	com.ibm.saguaro.system.Assembly
X	c:01/001	com.ibm.saguaro.system.Util
X	c:01/002	com.ibm.saguaro.system.Timer
X	c:01/003	com.ibm.saguaro.system.Time
X	c:01/004	com.ibm.saguaro.system.MoteException
X	c:01/005	com.ibm.saguaro.system.Device
X	c:01/006	com.ibm.saguaro.system.SDev
X	c:01/007	com.ibm.saguaro.system.CDev
X	c:01/008	com.ibm.saguaro.system.OutOfResourcesException
X	c:01/009	com.ibm.saguaro.system.OsException
X	c:01/00A	com.ibm.saguaro.system.NullReferenceException
X	c:01/00B	com.ibm.saguaro.system.SystemException
X	c:01/00C	com.ibm.saguaro.system.Mote
X	c:01/00D	com.ibm.saguaro.system.LIP
X	c:01/00E	com.ibm.saguaro.system.LED
X	c:01/00F	com.ibm.saguaro.system.InvalidCastException
X	c:01/010	com.ibm.saguaro.system.IndexOutOfRangeException
X	c:01/011	com.ibm.saguaro.system.I2C
X	c:01/012	com.ibm.saguaro.system.GPIO
X	c:01/013	com.ibm.saguaro.system.Err
X	c:01/014	com.ibm.saguaro.system.DeviceException
X	c:01/015	com.ibm.saguaro.system.SPI
X	c:01/016	com.ibm.saguaro.system.Radio
X	c:01/017	com.ibm.saguaro.system.WLIP
X	c:01/018	com.ibm.saguaro.system.ArrayTypeMismatchException
X	c:01/019	com.ibm.saguaro.system.ArithmException
X	c:01/01A	com.ibm.saguaro.system.ArgumentException
X	c:01/01B	com.ibm.saguaro.system.AccessException
X	c:01/01C	com.ibm.saguaro.system.ADC
X	c:02/000	com.ibm.saguaro.logger.Logger

C!	c:005	embs.SourceNode	-1	0	c:000
R	timer0	r:com.ibm.saguaro.system.Timer	0	0
R	timer1	r:com.ibm.saguaro.system.Timer	0	1
R	timer2	r:com.ibm.saguaro.system.Timer	0	2
R	xmit	c[]	0	3
R	radio	r:com.ibm.saguaro.system.Radio	0	4
R	sinks	r:embs.SinkParameters[]	0	5
R	sendPerSink	i[]	0	6
F	currentSinkIndex	i	0	0
F	YELLOW_LED	c	0	1
F	GREEN_LED	c	0	2
F	RED_LED	c	0	3
F	N_MIN	i	0	4
F	N_MAX	i	0	5
F	T_MIN	l	0	6
F	T_MAX	l	0	8
F	previousSinkIndex	i	0	10
F	TIME_ADJUSTMENT	l	0	11
F	lastChannelSwitch	l	0	13
H	BROADCASTING_on_channel$UTF8	b[]	0	66,82,79,65,68,67,65,83,84,73,78,71,33,32,111,110,32,99,104,97,110,110,101,108,58,32
H	Broadcast_results$UTF8	b[]	0	66,114,111,97,100,99,97,115,116,32,114,101,115,117,108,116,115,58,32
H	Calculated_T$UTF8	b[]	0	67,97,108,99,117,108,97,116,101,100,32,84,58,32
H	Changed_channel_to$UTF8	b[]	0	67,104,97,110,103,101,100,32,99,104,97,110,110,101,108,32,116,111,58,32
H	Finished_broadcast$UTF8	b[]	0	70,105,110,105,115,104,101,100,32,98,114,111,97,100,99,97,115,116,46
H	PREPARING_BROADCAST_for_channel$UTF8	b[]	0	80,82,69,80,65,82,73,78,71,32,66,82,79,65,68,67,65,83,84,33,32,102,111,114,32,99,104,97,110,110,101,108,58,32
H	Received_packet_c$UTF8	b[]	0	82,101,99,101,105,118,101,100,32,112,97,99,107,101,116,32,99,58
H	at_time$UTF8	b[]	0	97,116,32,116,105,109,101,58,32
H	at_time0$UTF8	b[]	0	32,97,116,32,116,105,109,101,58,32
H	n$UTF8	b[]	0	32,110,58
H	s$UTF8	b[]	0	47
M!	SourceNode(r:embs.SourceNode)v	-1	m:014B	00296	4
M	access$000(i,c[],i,i,l)i	-1	m:014D	0029A	14
M	access$100(i,c[],i,i,l)i	-1	m:0154	002A8	14
M!	broadcastToSink(c,l)v	-1	m:015B	002B6	120
M	createNextBroadcast(i,l,i,l,l)v	-1	m:0197	0032E	52
M	getDiffN(i,i)i	-1	m:01B1	00362	8
M	getDiffT(l,l)l	-1	m:01B5	0036A	26
M!	isValidPeriod(l)z	-1	m:01C2	00384	30
M	onReceive(i,c[],i,i,l)i	-1	m:01D1	003A2	358
M	onTransmit(i,c[],i,i,l)i	-1	m:0284	00508	140
M	pickNextSink(i)i	-1	m:02CA	00594	88
M	setChannel(i)v	-1	m:02F6	005EC	134
M	setLEDListening(c)v	-1	m:0339	00672	60
M	setupBroadcastAndCallBack(l,l,i,l)v	-1	m:0357	006AE	70
M	startListening()v	-1	m:037A	006F4	34
M	toggleLed(i)v	-1	m:038B	00716	28

C!	c:007	embs.SinkParameters	1	1	c:000
f	nextBeaconTime	l	1	0
f	broadcastSet	z	1	2
f	beaconT	l	1	3
f	beaconN	i	1	5
f	T	l	1	6
f	maxObservedN	i	1	8
f	address	c	1	9
f	panid	c	1	10
f	channel	c	1	11
m!	addBeacon(i,l)v	1	m:0109	00212	12	2
m!	getAddress()c	1	m:010F	0021E	8	9
m!	getBeaconN()i	1	m:0113	00226	8	10
m!	getBeaconT()l	1	m:0117	0022E	8	12
m!	getBroadcastSet()z	1	m:011B	00236	8	0
m!	getChannel()c	1	m:011F	0023E	8	7
m!	getMaxObservedN()i	1	m:0123	00246	8	6
m!	getNextBeaconTime()l	1	m:0127	0024E	8	15
m!	getPanid()c	1	m:012B	00256	8	8
m!	getT()l	1	m:012F	0025E	8	4
m!	setBeaconN(i)v	1	m:0133	00266	8	11
m!	setBeaconT(l)v	1	m:0137	0026E	8	13
m!	setBroadcastSet(z)v	1	m:013B	00276	8	1
m!	setMaxObservedN(i)v	1	m:013F	0027E	8	3
m!	setNextBeaconTime(l)v	1	m:0143	00286	8	14
m!	setT(l)v	1	m:0147	0028E	8	5
M!	SinkParameters(r:embs.SinkParameters,c,c,c)v	1	m:00F3	001E6	44

C	c:015	com.ibm.saguaro.system.$tatics	-1	-1	c:01/000
r	embs.SourceNode.timer0	r:com.ibm.saguaro.system.Timer	-1	0
r	embs.SourceNode.timer1	r:com.ibm.saguaro.system.Timer	-1	1
r	embs.SourceNode.timer2	r:com.ibm.saguaro.system.Timer	-1	2
r	embs.SourceNode.xmit	c[]	-1	3
r	embs.SourceNode.radio	r:com.ibm.saguaro.system.Radio	-1	4
r	embs.SourceNode.sinks	r:embs.SinkParameters[]	-1	5
r	embs.SourceNode.sendPerSink	i[]	-1	6
f	embs.SourceNode.currentSinkIndex	i	-1	0
f	embs.SourceNode.YELLOW_LED	c	-1	1
f	embs.SourceNode.GREEN_LED	c	-1	2
f	embs.SourceNode.RED_LED	c	-1	3
f	embs.SourceNode.N_MIN	i	-1	4
f	embs.SourceNode.N_MAX	i	-1	5
f	embs.SourceNode.T_MIN	l	-1	6
f	embs.SourceNode.T_MAX	l	-1	8
f	embs.SourceNode.previousSinkIndex	i	-1	10
f	embs.SourceNode.TIME_ADJUSTMENT	l	-1	11
f	embs.SourceNode.lastChannelSwitch	l	-1	13
M	__init()v	-1	m:002E	0005C	394

c	00069	0	18	0	18	0	m:002E
c	00073	0	21	0	21	0	m:002E
c	000A7	0	27	0	27	0	m:002E
c	000AB	0	30	0	30	0	m:002E
c	000AF	0	31	0	31	0	m:002E
c	000B3	0	32	0	32	0	m:002E
c	000B7	0	34	0	34	0	m:002E
c	000BB	0	35	0	35	0	m:002E
c	000C0	0	36	0	36	0	m:002E
c	000C8	0	37	0	37	0	m:002E
c	000D0	0	39	0	39	0	m:002E
c	000E1	0	42	0	42	0	m:002E
c	000E9	0	43	0	43	0	m:002E
c	000F1	0	48	0	48	0	m:002E
c	000FD	0	51	0	51	0	m:002E
c	00104	0	52	0	52	0	m:002E
c	0010B	0	53	0	53	0	m:002E
c	00112	0	56	0	56	0	m:002E
c	0011C	0	57	0	57	0	m:002E
c	00123	0	58	0	58	0	m:002E
c	0012D	0	65	0	65	0	m:002E
c	00137	0	66	0	66	0	m:002E
c	0013E	0	67	0	67	0	m:002E
c	00148	0	74	0	74	0	m:002E
c	00152	0	75	0	75	0	m:002E
c	00159	0	76	0	76	0	m:002E
c	00163	0	83	0	83	0	m:002E
c	00173	0	86	0	86	0	m:002E
c	00184	0	87	0	87	0	m:002E
c	00194	0	90	0	90	0	m:002E
c	0019A	0	91	0	91	0	m:002E
c	001A0	0	92	0	92	0	m:002E
c	001A8	0	93	0	93	0	m:002E
c	001BB	0	97	0	97	0	m:002E
c	001C5	0	103	0	103	0	m:002E
c	001CF	0	109	0	109	0	m:002E
c	001E4	0	110	0	110	0	m:002E
e	001E6	m:002E
c	001E9	1	13	0	13	0	m:00F3
l!	001E9	00212	r:embs.SinkParameters	this	m:00F3	0
l!	001E9	00212	c	channel	m:00F3	1
l!	001E9	00212	c	panid	m:00F3	2
l!	001E9	00212	c	address	m:00F3	3
c	001ED	1	14	0	14	0	m:00F3
c	001F5	1	15	0	15	0	m:00F3
c	001F9	1	16	0	16	0	m:00F3
c	00201	1	17	0	17	0	m:00F3
c	00205	1	21	0	21	0	m:00F3
c	00209	1	22	0	22	0	m:00F3
c	0020D	1	23	0	23	0	m:00F3
c	00211	1	24	0	24	0	m:00F3
e!	00212	m:00F3
c	00215	1	33	0	33	0	m:0109
l!	00215	0021E	r:embs.SinkParameters	this	m:0109	0
l!	00215	0021E	i	n	m:0109	1
l	00215	0021E	l	t	m:0109	2
c	00219	1	34	0	34	0	m:0109
c	0021D	1	35	0	35	0	m:0109
e!	0021E	m:0109
c	00221	1	42	0	42	0	m:010F
l	00221	00225	r:embs.SinkParameters	this	m:010F	0
e!	00226	m:010F
c	00229	1	44	0	44	0	m:0113
l	00229	0022D	r:embs.SinkParameters	this	m:0113	0
e!	0022E	m:0113
c	00231	1	50	0	50	0	m:0117
l	00231	00235	r:embs.SinkParameters	this	m:0117	0
e!	00236	m:0117
c	00239	1	27	0	27	0	m:011B
l	00239	0023D	r:embs.SinkParameters	this	m:011B	0
e!	0023E	m:011B
c	00241	1	40	0	40	0	m:011F
l	00241	00245	r:embs.SinkParameters	this	m:011F	0
e!	00246	m:011F
c	00249	1	39	0	39	0	m:0123
l	00249	0024D	r:embs.SinkParameters	this	m:0123	0
e!	0024E	m:0123
c	00251	1	59	0	59	0	m:0127
l	00251	00255	r:embs.SinkParameters	this	m:0127	0
e!	00256	m:0127
c	00259	1	41	0	41	0	m:012B
l	00259	0025D	r:embs.SinkParameters	this	m:012B	0
e!	0025E	m:012B
c	00261	1	37	0	37	0	m:012F
l	00261	00265	r:embs.SinkParameters	this	m:012F	0
e!	00266	m:012F
c	00269	1	47	0	47	0	m:0133
l!	00269	0026E	r:embs.SinkParameters	this	m:0133	0
l	00269	0026E	i	beaconN	m:0133	1
c	0026D	1	48	0	48	0	m:0133
e!	0026E	m:0133
c	00271	1	53	0	53	0	m:0137
l!	00271	00276	r:embs.SinkParameters	this	m:0137	0
l	00271	00276	l	beaconT	m:0137	1
c	00275	1	54	0	54	0	m:0137
e!	00276	m:0137
c	00279	1	30	0	30	0	m:013B
l!	00279	0027E	r:embs.SinkParameters	this	m:013B	0
l	00279	0027E	z	value	m:013B	1
c	0027D	1	31	0	31	0	m:013B
e!	0027E	m:013B
c	00281	1	36	0	36	0	m:013F
l!	00281	00286	r:embs.SinkParameters	this	m:013F	0
l	00281	00286	i	n	m:013F	1
e!	00286	m:013F
c	00289	1	56	0	56	0	m:0143
l!	00289	0028E	r:embs.SinkParameters	this	m:0143	0
l	00289	0028E	l	l	m:0143	1
c	0028D	1	57	0	57	0	m:0143
e!	0028E	m:0143
c	00291	1	38	0	38	0	m:0147
l!	00291	00296	r:embs.SinkParameters	this	m:0147	0
l	00291	00296	l	t	m:0147	1
e!	00296	m:0147
c	00299	0	9	0	9	0	m:014B
l!	00299	0029A	r:embs.SourceNode	this	m:014B	0
e!	0029A	m:014B
c	0029D	0	9	0	9	0	m:014D
l	0029D	002A7	i	x0	m:014D	0
l	0029D	002A7	c[]	x1	m:014D	1
l	0029D	002A7	i	x2	m:014D	2
l	0029D	002A7	i	x3	m:014D	3
l	0029D	002A7	l	x4	m:014D	4
e	002A8	m:014D
c	002AB	0	9	0	9	0	m:0154
l	002AB	002B5	i	x0	m:0154	0
l	002AB	002B5	c[]	x1	m:0154	1
l	002AB	002B5	i	x2	m:0154	2
l	002AB	002B5	i	x3	m:0154	3
l	002AB	002B5	l	x4	m:0154	4
e	002B6	m:0154
c	002B9	0	167	0	167	0	m:015B
l!	002B9	0032D	c	sinkIndex	m:015B	0
l!	002B9	0032D	l	time	m:015B	1
c	002C3	0	168	0	168	0	m:015B
c	002C9	0	170	0	170	0	m:015B
c	002CF	0	171	0	171	0	m:015B
c	002DA	0	172	0	172	0	m:015B
c	002E0	0	173	0	173	0	m:015B
c	002E6	0	174	0	174	0	m:015B
c	002EA	0	176	0	176	0	m:015B
c	002F0	0	178	0	178	0	m:015B
c	002F4	0	179	0	179	0	m:015B
c	002FD	0	180	0	180	0	m:015B
c	0030C	0	182	0	182	0	m:015B
l	0030C	0032D	l	sinkDelay	m:015B	3
c	00322	0	183	0	183	0	m:015B
c	00328	0	184	0	184	0	m:015B
c	0032C	0	185	0	185	0	m:015B
e!	0032E	m:015B
c	00331	0	257	0	257	0	m:0197
l	00331	00362	i	beaconN	m:0197	0
l	00331	00362	l	beaconT	m:0197	1
l	00331	00362	i	channel	m:0197	3
l	00331	00362	l	t	m:0197	4
l	00331	00362	l	currentTimeMS	m:0197	6
c	00338	0	258	0	258	0	m:0197
l	00338	00362	l	broadcastTimeByMSSpan	m:0197	8
c	00340	0	259	0	259	0	m:0197
l	00340	00362	l	deadline	m:0197	10
c	0034A	0	260	0	260	0	m:0197
c	00355	0	261	0	261	0	m:0197
c	0035E	0	262	0	262	0	m:0197
c	00361	0	263	0	263	0	m:0197
e	00362	m:0197
c	00365	0	311	0	311	0	m:01B1
l	00365	00369	i	beacon1N	m:01B1	0
l	00365	00369	i	beacon2N	m:01B1	1
e	0036A	m:01B1
c	0036D	0	315	0	315	0	m:01B5
l	0036D	00384	l	beacon1T	m:01B5	0
l	0036D	00384	l	beacon2T	m:01B5	2
c	00372	0	316	0	316	0	m:01B5
l	00372	00384	l	diffT	m:01B5	4
e	00384	m:01B5
c	00387	0	163	0	163	0	m:01C2
l!	00387	003A2	l	period	m:01C2	0
e!	003A2	m:01C2
c	003A5	0	115	0	115	0	m:01D1
l	003A5	00507	i	flags	m:01D1	0
l	003A5	00507	c[]	data	m:01D1	1
l	003A5	00507	i	len	m:01D1	2
l	003A5	00507	i	info	m:01D1	3
l	003A5	00507	l	time	m:01D1	4
c	003A8	0	116	0	116	0	m:01D1
c	003AA	0	119	0	119	0	m:01D1
c	003B0	0	121	0	121	0	m:01D1
l	003B0	00507	i	n	m:01D1	6
c	003BD	0	122	0	122	0	m:01D1
c	003C8	0	124	0	124	0	m:01D1
c	003CE	0	125	0	125	0	m:01D1
c	003DB	0	126	0	126	0	m:01D1
c	003E1	0	127	0	127	0	m:01D1
c	003E9	0	128	0	128	0	m:01D1
c	003ED	0	129	0	129	0	m:01D1
c	003F3	0	132	0	132	0	m:01D1
l	003F3	00507	l	currentTime	m:01D1	7
c	00404	0	133	0	133	0	m:01D1
c	0041A	0	134	0	134	0	m:01D1
c	00423	0	135	0	135	0	m:01D1
c	00426	0	136	0	136	0	m:01D1
c	00428	0	138	0	138	0	m:01D1
c	00435	0	140	0	140	0	m:01D1
c	00447	0	141	0	141	0	m:01D1
c	0045F	0	143	0	143	0	m:01D1
c	0047E	0	144	0	144	0	m:01D1
c	0048E	0	145	0	145	0	m:01D1
l	0048E	004EE	i	diffN	m:01D1	9
c	0049F	0	146	0	146	0	m:01D1
l	0049F	004EE	l	diffT	m:01D1	10
c	004BE	0	147	0	147	0	m:01D1
c	004C6	0	148	0	148	0	m:01D1
l	004C6	004EE	l	t	m:01D1	12
c	004D2	0	149	0	149	0	m:01D1
c	004D8	0	150	0	150	0	m:01D1
c	004DD	0	151	0	151	0	m:01D1
c	004E1	0	152	0	152	0	m:01D1
c	004EE	0	157	0	157	0	m:01D1
c	004F9	0	158	0	158	0	m:01D1
c	00505	0	159	0	159	0	m:01D1
e	00508	m:01D1
c	0050B	0	188	0	188	0	m:0284
l	0050B	00594	i	flags	m:0284	0
l	0050B	00594	c[]	data	m:0284	1
l	0050B	00594	i	len	m:0284	2
l	0050B	00594	i	info	m:0284	3
l	0050B	00594	l	time	m:0284	4
c	00533	0	190	0	190	0	m:0284
c	0053E	0	191	0	191	0	m:0284
c	00550	0	192	0	192	0	m:0284
c	00558	0	194	0	194	0	m:0284
c	00561	0	196	0	196	0	m:0284
c	00564	0	197	0	197	0	m:0284
c	0056A	0	198	0	198	0	m:0284
c	00572	0	199	0	199	0	m:0284
c	00578	0	200	0	200	0	m:0284
c	00580	0	201	0	201	0	m:0284
c	00586	0	202	0	202	0	m:0284
c	0058E	0	203	0	203	0	m:0284
c	00592	0	204	0	204	0	m:0284
e	00594	m:0284
c	00597	0	209	0	209	0	m:02CA
l	00597	005EB	i	currSinkIndex	m:02CA	0
l	00597	005EB	i	x	m:02CA	1
c	0059D	0	210	0	210	0	m:02CA
l	0059D	005EB	l	nextBeaconTime	m:02CA	2
c	0059F	0	211	0	211	0	m:02CA
l	0059F	005EB	i	nextBeaconSinkIndex	m:02CA	4
c	005A8	0	212	0	212	0	m:02CA
c	005AC	0	213	0	213	0	m:02CA
c	005CC	0	214	0	214	0	m:02CA
c	005D5	0	215	0	215	0	m:02CA
c	005D7	0	211	0	211	0	m:02CA
c	005DC	0	219	0	219	0	m:02CA
c	005E0	0	220	0	220	0	m:02CA
c	005E9	0	222	0	222	0	m:02CA
e	005EC	m:02CA
c	005EF	0	229	0	229	0	m:02F6
l	005EF	00671	i	sinkIndex	m:02F6	0
c	005F9	0	230	0	230	0	m:02F6
c	005FF	0	233	0	233	0	m:02F6
c	0060F	0	234	0	234	0	m:02F6
c	00618	0	235	0	235	0	m:02F6
c	00629	0	237	0	237	0	m:02F6
c	00637	0	238	0	238	0	m:02F6
c	00646	0	241	0	241	0	m:02F6
c	0064A	0	242	0	242	0	m:02F6
c	0064F	0	244	0	244	0	m:02F6
c	00655	0	245	0	245	0	m:02F6
c	00660	0	246	0	246	0	m:02F6
c	00666	0	247	0	247	0	m:02F6
c	0066C	0	248	0	248	0	m:02F6
c	00670	0	249	0	249	0	m:02F6
e	00672	m:02F6
c	00675	0	329	0	329	0	m:0339
l	00675	006AE	c	led	m:0339	0
c	00698	0	330	0	330	0	m:0339
l	00698	006A8	c	b	m:0339	4
c	0069C	0	331	0	331	0	m:0339
c	006A3	0	333	0	333	0	m:0339
c	006A8	0	329	0	329	0	m:0339
c	006AD	0	336	0	336	0	m:0339
e	006AE	m:0339
c	006B1	0	274	0	274	0	m:0357
l	006B1	006F3	l	broadcastTime	m:0357	0
l	006B1	006F3	l	deadline	m:0357	2
l	006B1	006F3	i	sinkIndex	m:0357	4
l	006B1	006F3	l	currentTimeMS	m:0357	5
c	006B7	0	275	0	275	0	m:0357
c	006BB	0	276	0	276	0	m:0357
c	006BF	0	278	0	278	0	m:0357
c	006CD	0	280	0	280	0	m:0357
c	006D8	0	281	0	281	0	m:0357
c	006DA	0	283	0	283	0	m:0357
c	006E5	0	284	0	284	0	m:0357
c	006E7	0	286	0	286	0	m:0357
c	006F2	0	289	0	289	0	m:0357
e	006F4	m:0357
c	006F7	0	253	0	253	0	m:037A
c	00714	0	254	0	254	0	m:037A
e	00716	m:037A
c	00719	0	320	0	320	0	m:038B
l	00719	00731	i	led	m:038B	0
c	0071F	0	321	0	321	0	m:038B
l	0071F	00731	i	ledState	m:038B	1
c	00722	0	322	0	322	0	m:038B
c	0072A	0	324	0	324	0	m:038B
c	00730	0	326	0	326	0	m:038B
e	00732	m:038B
S	M:/EMBS/EMBS_assessment2/part2/src/embs/SourceNode.java
:	package embs;
:	
:	import com.ibm.saguaro.system.*;
:	import com.ibm.saguaro.logger.*;
:	
:	/**
:	 * Exam candidate number: Y0076159
:	 */
:	public class SourceNode {
:	
:		
:		// Timers to schedule broadcast callbacks
:		static Timer  timer0; // Timer for sink 0
:		static Timer  timer1; // Timer for sink 1
:		static Timer  timer2; // Timer for sink 2
:		
:		static byte[] xmit; // Xmit: array of bytes send during transmission
:		static Radio radio = new Radio(); // Radio: reference to radio used to transmit and receive from sinks
:		
:		// Sinks: array of SinkParameter objects used to record information about each individual sink
:		private static SinkParameters[] sinks = {
:			new SinkParameters((byte) 0,(byte)  0x11,(byte)  0x11), 
:			new SinkParameters((byte) 1, (byte) 0x12, (byte) 0x12),
:			new SinkParameters((byte) 2, (byte) 0x13, (byte) 0x13)};
:		
:		
:		static int currentSinkIndex = 0; // Current Sink Index: used to set initial context of mote (Channel to listen to and SinkParameter object to record data into)
:	
:	
:		static byte YELLOW_LED = (byte) 0; // Yellow LED: constant for easier reference to LED 
:		static byte GREEN_LED = (byte) 1; // Green LED: constant for easier reference to LED 
:		static byte RED_LED = (byte) 2; // Red LED: constant for easier reference to LED 
:	
:		static int N_MIN = 2; // N_Min: constant reference to minimum number of beacons per cycle from a sink
:		static int N_MAX = 10; // N_Max: constant reference to maximum number of beacons per cycle from a sink
:		static long T_MIN = 250; // T_Min: constant reference to minimum time interval (in milliseconds) between beacons from the same sink
:		static long T_MAX = 1500; // T_Min: constant reference to maximum time interval (in milliseconds) between beacons from the same sink
:		
:		static int[] sendPerSink = new int[]{0,0,0}; // Send per sink: used to record the number of transmissions to each sink
:	
:		static int previousSinkIndex; // Previous sink index: used to record previous context when executing a call back to transmit to a sink
:		static long TIME_ADJUSTMENT = 3; // Time adjustment: permissible variation in results from calculation, used to account for variations in performance of the mote's processing capabilities
:		static long lastChannelSwitch = 0; // Last channel switch: used to record the time of the most recent channel switch (in milliseconds since start of execution)
:		
:		
:		static {
:			// Open the default radio
:			radio.open(Radio.DID, null, 0, 0);
:	
:			// Initialise all LED's to on state to signal correct load
:			LED.setState((byte) YELLOW_LED, (byte) 1);
:			LED.setState((byte) GREEN_LED, (byte) 1);
:			LED.setState((byte) RED_LED, (byte) 1);
:	
:			// Initialise timer for sink index 0
:			timer0 = new Timer();
:			timer0.setParam((byte) 0); // Set param to sink index in sinks, used to carry forward context into callback
:			timer0.setCallback(new TimerEvent(null){
:				public void invoke(byte param, long time){
:					SourceNode.broadcastToSink(param, time);
:				}
:			});
:			
:			// Initialise timer for sink index 1
:			timer1 = new Timer();
:			timer1.setParam((byte) 1); // Set param to sink index in sinks, used to carry forward context into callback
:			timer1.setCallback(new TimerEvent(null){
:				public void invoke(byte param, long time){
:					SourceNode.broadcastToSink(param, time);
:				}
:			});
:			
:			// Initialise timer for sink index 2
:			timer2 = new Timer();
:			timer2.setParam((byte) 2); // Set param to sink index in sinks, used to carry forward context into callback
:			timer2.setCallback(new TimerEvent(null){
:				public void invoke(byte param, long time){
:					SourceNode.broadcastToSink(param, time);
:				}
:			});
:	
:			
:			radio.setChannel((byte) sinks[currentSinkIndex].getChannel()); // Set channel 
:			
:			// Set the PAN ID and the short address
:			radio.setPanId(sinks[currentSinkIndex].getPanid(), true);
:			radio.setShortAddr(sinks[currentSinkIndex].getAddress());
:	
:			// Initialise xmit with parameters of local radio
:			xmit = new byte[12];
:			xmit[0] = Radio.FCF_BEACON;
:			xmit[1] = Radio.FCA_SRC_SADDR|Radio.FCA_DST_SADDR;
:			Util.set16le(xmit, 9, sinks[currentSinkIndex].getAddress()); // own short address 
:	
:			
:			// register delegate for received frames
:			radio.setRxHandler(new DevCallback(null){
:				public int invoke (int flags, byte[] data, int len, int info, long time) {
:					return  SourceNode.onReceive(flags, data, len, info, time);
:				}
:			});
:	
:			radio.setTxHandler(new DevCallback(null){
:				public int invoke(int flags, byte[] data, int len, int info, long time) {
:					return SourceNode.onTransmit(flags, data, len, info, time);
:				}
:			});
:	
:			radio.startRx(Device.ASAP, 0, Time.currentTicks()+0x7FFFFFFF);
:		}
:	
:		// Called when a frame is received or at the end of a reception period 
:		private static int onReceive (int flags, byte[] data, int len, int info, long time) {
:	
:			if (data == null) { // marks end of reception period
:				return 0;
:			}
:				
:			int n = data[11];
:			
:			if (n>sinks[currentSinkIndex].getMaxObservedN()){
:				sinks[currentSinkIndex].setMaxObservedN(n);
:			}
:			Logger.appendString(csr.s2b("Received packet c:"));
:			Logger.appendByte(sinks[currentSinkIndex].getChannel());
:			Logger.appendString(csr.s2b(" n:"));
:			Logger.appendByte(data[11]);
:			Logger.flush(Mote.WARN);
:			long currentTime = Time.currentTime(Time.MILLISECS);
:			
:			//Case where first beacon received is n=1 and no previous known beacons, switch channel
:			if (sinks[currentSinkIndex].getBeaconN()==-1 && n==1){
:				sinks[currentSinkIndex].setNextBeaconTime(currentTime + (11*T_MIN));
:				setChannel(pickNextSink(currentSinkIndex));
:				startListening();
:				return 0;
:			}
:			if (!sinks[currentSinkIndex].getBroadcastSet()){
:				//If T is known for sink
:				if (sinks[currentSinkIndex].getT()!=-1){
:					createNextBroadcast(n, currentTime, currentSinkIndex, sinks[currentSinkIndex].getT(), currentTime);
:				} else {
:					if (sinks[currentSinkIndex].getBeaconT()!=-1 && sinks[currentSinkIndex].getBeaconN()!=-1){
:						int diffN = getDiffN(sinks[currentSinkIndex].getBeaconN(), n);
:						long diffT = getDiffT(sinks[currentSinkIndex].getBeaconT(), currentTime);
:						if (diffN>0 && diffT-TIME_ADJUSTMENT <=(T_MAX*diffN)  && isValidPeriod(diffT/diffN)){
:							long t = diffT/diffN;
:							sinks[currentSinkIndex].setT(t);
:							Logger.appendString(csr.s2b("Calculated T: "));
:							Logger.appendLong(t);
:							Logger.flush(Mote.WARN);
:							createNextBroadcast(n, currentTime, currentSinkIndex, t, currentTime);
:						}
:					}
:				}
:			}
:			sinks[currentSinkIndex].setBeaconN(n);
:			sinks[currentSinkIndex].setBeaconT(currentTime);
:			return 0;
:		}
:	
:		protected static boolean isValidPeriod(long period){
:			return T_MIN-TIME_ADJUSTMENT<=period && period <= T_MAX+TIME_ADJUSTMENT;
:		}
:	
:		protected static void broadcastToSink(byte sinkIndex, long time){
:			if (radio.getState()==Device.S_RXEN){
:				radio.stopRx();
:			}
:			Logger.appendString(csr.s2b("BROADCASTING! on channel: "));
:			Logger.appendByte(sinks[sinkIndex].getChannel());
:			Logger.appendString(csr.s2b("at time: "));
:			Logger.appendLong(Time.currentTicks());
:			Logger.flush(Mote.WARN);
:	
:			previousSinkIndex = (int) currentSinkIndex;
:			
:			setChannel((int) sinkIndex);
:			sendPerSink[sinkIndex]++;
:			long sinkDelay = sinks[sinkIndex].getT()/2;
:			
:			radio.transmit(Device.TIMED, xmit, 0, 12, Time.currentTicks()+Time.toTickSpan(Time.MILLISECS, sinkDelay));
:			Logger.appendString(csr.s2b("Finished broadcast."));
:			Logger.flush(Mote.INFO);
:		}
:	
:		private static int onTransmit(int flags, byte[] data, int len, int info, long time) {
:			sinks[currentSinkIndex].setNextBeaconTime(Time.currentTime(Time.MILLISECS)+(sinks[currentSinkIndex].getT()*(11+sinks[currentSinkIndex].getMaxObservedN())));
:	
:			sinks[currentSinkIndex].setBroadcastSet(false);
:			if (sinks[previousSinkIndex].getT()==-1){
:				setChannel(previousSinkIndex);
:			} else {
:				setChannel(pickNextSink(currentSinkIndex));
:			}
:			startListening();
:			Logger.appendString(csr.s2b("Broadcast results: "));
:			Logger.appendInt(sendPerSink[0]);
:			Logger.appendString(csr.s2b("/"));
:			Logger.appendInt(sendPerSink[1]);
:			Logger.appendString(csr.s2b("/"));
:			Logger.appendInt(sendPerSink[2]);
:			Logger.flush(Mote.WARN);
:			return 0;
:		}
:		
:		private static int pickNextSink(int currSinkIndex){
:			int x = 0;
:			long nextBeaconTime = -1;
:			int nextBeaconSinkIndex = -1;
:			for (x=0; x<sinks.length;x++){
:				if (x!=currSinkIndex){
:					if (nextBeaconTime==-1 | sinks[x].getNextBeaconTime()<nextBeaconTime){
:						nextBeaconTime = sinks[x].getNextBeaconTime();
:						nextBeaconSinkIndex = x;
:					}
:				}
:			}
:			if (nextBeaconSinkIndex==-1){
:				return (currSinkIndex+1) % (sinks.length);
:			} else {
:				return nextBeaconSinkIndex;
:			}
:		}
:		
:		
:		private static void setChannel(int sinkIndex){
:	
:			if (radio.getState()==Device.S_RXEN){
:				radio.stopRx();
:			}
:			
:			Util.set16le(xmit, 3, sinks[sinkIndex].getPanid()); // destination PAN address 
:			Util.set16le(xmit, 5, 0xFFFF); // broadcast address 
:			Util.set16le(xmit, 7, sinks[sinkIndex].getPanid()); // own PAN address 
:			
:			radio.setChannel((byte) sinks[sinkIndex].getChannel());
:			radio.setPanId(sinks[sinkIndex].getPanid(), true);
:	//		radio.setShortAddr(sinks[sinkIndex].getAddress());
:					
:			currentSinkIndex = sinkIndex;
:			setLEDListening((byte) sinkIndex);
:	
:			Logger.appendString(csr.s2b("Changed channel to: "));
:			Logger.appendByte(sinks[sinkIndex].getChannel());
:			Logger.appendString(csr.s2b(" at time: "));
:			Logger.appendLong(Time.currentTicks());
:			Logger.flush(Mote.WARN);
:		}
:	
:		
:		private static void startListening(){
:			radio.startRx(Device.TIMED, Time.currentTicks()+Time.toTickSpan(Time.MILLISECS, 10), Time.currentTicks()+0x7FFFFFFF);
:		}
:		
:		private static void createNextBroadcast(int beaconN, long beaconT, int channel, long t, long currentTimeMS) {
:			long broadcastTimeByMSSpan = (t  * beaconN);
:			long deadline = broadcastTimeByMSSpan + T_MIN;
:			setupBroadcastAndCallBack(broadcastTimeByMSSpan, deadline, channel, currentTimeMS);
:			sinks[currentSinkIndex].setBroadcastSet(true);
:			setChannel(pickNextSink(currentSinkIndex));
:			startListening();
:		}
:	
:		private static void setupBroadcastAndCallBack(long broadcastTime, long deadline, int sinkIndex, long currentTimeMS){
:	//		ChannelSwitch cs = new ChannelSwitch(broadcastTime, sinks[sinkIndex].getChannel());
:	//		for (ChannelSwitch c: channelSwitches){
:	//			if (c!=null && c.getTime()==broadcastTime){
:	//				return;
:	//			}
:	//		}
:	//		channelSwitches = insertChannelSwitchInBuffer(channelSwitches, cs);
:			
:			Logger.appendString(csr.s2b("PREPARING BROADCAST! for channel: "));
:			Logger.appendInt(sinkIndex);
:			Logger.flush(Mote.WARN);
:			
:			switch (sinkIndex){
:			case 0:
:				timer0.setAlarmBySpan(Time.toTickSpan(Time.MILLISECS, broadcastTime));
:				break;
:			case 1:
:				timer1.setAlarmBySpan(Time.toTickSpan(Time.MILLISECS, broadcastTime));
:				break;
:			case 2:
:				timer2.setAlarmBySpan(Time.toTickSpan(Time.MILLISECS, broadcastTime));
:				break;
:			}
:		}
:		
:		
:	//	private static ChannelSwitch[] insertChannelSwitchInBuffer(ChannelSwitch[] css, ChannelSwitch cs){
:	//		// If space available in buffer
:	//		int x;
:	//		for (x=0; x<css.length; x++){
:	//			if (css[x]==null){
:	//				css[x] = cs;
:	//				return css;
:	//			}
:	//		}
:	//		ChannelSwitch[] newCss = new ChannelSwitch[css.length+2];
:	//		for (x=0; x<css.length; x++){
:	//			newCss[x] = css[x];
:	//		}
:	//		newCss[x+1] = cs;
:	//		return newCss;
:	//	}
:	
:	
:		private static int getDiffN(int beacon1N, int beacon2N) {
:			return beacon1N - beacon2N;
:		}
:	
:		private static long getDiffT(long beacon1T, long beacon2T) {
:			long diffT = beacon2T-beacon1T;
:			return (diffT < 0) ? -diffT : diffT;
:		}
:	
:		private static void toggleLed(int led){
:			int ledState = LED.getState((byte) led);
:			if (ledState==0){
:				LED.setState((byte) led, (byte) 1);
:			} else {
:				LED.setState((byte) led, (byte) 0);
:			}
:		}
:	
:		private static void setLEDListening(byte led){
:			for (byte b: new byte[]{YELLOW_LED, RED_LED, GREEN_LED}){
:				if (b==led){
:					LED.setState(b, (byte) 1);
:				} else {
:					LED.setState(b, (byte) 0);
:				}
:			}
:		}
:		
:		//	// Called on a timer alarm
:		//    public static void periodicSend(byte param, long time) {
:		//        
:		//        if(nc>0){
:		//	        // transmit a beacon 
:		//    	    radio.transmit(Device.ASAP|Radio.TXMODE_POWER_MAX, xmit, 0, 12, 0);
:		//        	// program new alarm
:		//        	tsend.setAlarmBySpan(wait);
:		//        	nc--;
:		//        	xmit[11]--;
:		//        }
:		//        else{
:		//        	//start reception phase
:		//	        radio.startRx(Device.ASAP, 0, Time.currentTicks()+wait);
:		//	        // turn green LED on 
:		//	        LED.setState((byte)1, (byte)1);
:		//	        
:		//        }
:		//        
:		//    }
:	}
S	M:/EMBS/EMBS_assessment2/part2/src/embs/SinkParameters.java
:	package embs;
:	
:	/**
:	 * Exam candidate number: Y0076159
:	 * Class to store all known data for an individual sink
:	 */
:	
:	public class SinkParameters {
:	    private byte channel; // Channel: channel number used to communicate to Sink, in Mote Runner representation 
:	    private byte panid; // Pan id: pan id of Sink, used to configure radio
:	    private byte address; // Address: address of Sink, used to configure radio
:	    
:	    private int maxObservedN = -1; // Max observed N: highest value of beacon payload observed since the start of execution
:	    private long T = -1; // T: interval between received beacons
:	    private int beaconN = -1; // Beacon N: value of payload byte in latest beacon received from this sink
:	    private long beaconT = -1; // Beacon N: time in ms at which latest beacon was received from this sink
:	    private boolean broadcastSet = false; // Broadcast set: True if a there exists a scheduled broadcast on this sink in the future, false otherwise
:		private long nextBeaconTime; // Next beacon time: estimated earliest time at which the next beacon may occur
:	    
:	    public SinkParameters(byte channel, byte panid, byte address){
:	    	this.channel =  channel;
:	    	this.panid =  panid;
:	    	this.address =  address;
:	    }
:	    //Getters and settings for all fields
:	    public boolean getBroadcastSet(){
:	    	return this.broadcastSet;
:	    }
:	    public void setBroadcastSet(boolean value){
:	    	this.broadcastSet = value;
:	    }
:	    public void addBeacon(int n, long t){
:	    	this.beaconN = n;
:	    	this.beaconT = t;
:	    }  
:		public void setMaxObservedN(int n) {this.maxObservedN = n;}
:		public long getT() {return T;}
:		public void setT(long t) {this.T = t;}
:		public int getMaxObservedN() {return maxObservedN;}
:		public byte getChannel() {return channel;}
:		public byte getPanid() {return panid;}
:		public byte getAddress() {return address;}
:		public int getBeaconN() {
:			return beaconN;
:		}
:		public void setBeaconN(int beaconN) {
:			this.beaconN = beaconN;
:		}
:		public long getBeaconT() {
:			return beaconT;
:		}
:		public void setBeaconT(long beaconT) {
:			this.beaconT = beaconT;
:		}
:		public void setNextBeaconTime(long l) {
:			this.nextBeaconTime = l;
:		}	
:		public long getNextBeaconTime(){
:			return this.nextBeaconTime;
:		}
:	  
:		
:	}
