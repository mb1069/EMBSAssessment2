A!	SourceNode-6.0.16728	2.0	Java

X	c:01/000	com.ibm.saguaro.system.Assembly
X	c:01/001	com.ibm.saguaro.system.Util
X	c:01/002	com.ibm.saguaro.system.Timer
X	c:01/003	com.ibm.saguaro.system.Time
X	c:01/004	com.ibm.saguaro.system.MoteException
X	c:01/005	com.ibm.saguaro.system.Device
X	c:01/006	com.ibm.saguaro.system.SDev
X	c:01/007	com.ibm.saguaro.system.CDev
X	c:01/008	com.ibm.saguaro.system.OutOfResourcesException
X	c:01/009	com.ibm.saguaro.system.OsException
X	c:01/00A	com.ibm.saguaro.system.NullReferenceException
X	c:01/00B	com.ibm.saguaro.system.SystemException
X	c:01/00C	com.ibm.saguaro.system.Mote
X	c:01/00D	com.ibm.saguaro.system.LIP
X	c:01/00E	com.ibm.saguaro.system.LED
X	c:01/00F	com.ibm.saguaro.system.InvalidCastException
X	c:01/010	com.ibm.saguaro.system.IndexOutOfRangeException
X	c:01/011	com.ibm.saguaro.system.I2C
X	c:01/012	com.ibm.saguaro.system.GPIO
X	c:01/013	com.ibm.saguaro.system.Err
X	c:01/014	com.ibm.saguaro.system.DeviceException
X	c:01/015	com.ibm.saguaro.system.SPI
X	c:01/016	com.ibm.saguaro.system.Radio
X	c:01/017	com.ibm.saguaro.system.WLIP
X	c:01/018	com.ibm.saguaro.system.ArrayTypeMismatchException
X	c:01/019	com.ibm.saguaro.system.ArithmException
X	c:01/01A	com.ibm.saguaro.system.ArgumentException
X	c:01/01B	com.ibm.saguaro.system.AccessException
X	c:01/01C	com.ibm.saguaro.system.ADC
X	c:02/000	com.ibm.saguaro.logger.Logger

C!	c:004	embs.SourceNode	-1	0	c:000
R	tstart	r:com.ibm.saguaro.system.Timer	0	0
R	xmit	c[]	0	1
R	radio	r:com.ibm.saguaro.system.Radio	0	2
R	sinks	r:embs.SinkParameters[]	0	3
R	tsend	r:com.ibm.saguaro.system.Timer	0	3327
F	light	z	0	0
F	wait	l	0	1
F	currentChannel	i	0	3
F	ownPanId	c	0	4
F	ownShortAddr	c	0	5
F	YELLOW_LED	c	0	6
F	GREEN_LED	c	0	7
F	RED_LED	c	0	8
H	Changing_channel_to$UTF8	b[]	0	67,104,97,110,103,105,110,103,32,99,104,97,110,110,101,108,32,116,111,58,32
H	Current_n$UTF8	b[]	0	67,117,114,114,101,110,116,32,110,58,32
M!	SourceNode(r:embs.SourceNode)v	-1	m:00CF	0019E	4
M	access$000(i,c[],i,i,l)i	-1	m:00D1	001A2	14
M	onReceive(i,c[],i,i,l)i	-1	m:00D8	001B0	68
M	setChannel(i)v	-1	m:00FA	001F4	80
M	toggleLed(i)v	-1	m:0122	00244	28

C!	c:006	embs.SinkParameters	1	1	c:000
f	T	i	1	0
f	N	i	1	1
f	address	c	1	2
f	panid	c	1	3
f	channel	c	1	4
m!	getAddress()c	1	m:00B3	00166	8	6
m!	getChannel()c	1	m:00B7	0016E	8	4
m!	getN()i	1	m:00BB	00176	8	3
m!	getPanid()c	1	m:00BF	0017E	8	5
m!	getT()i	1	m:00C3	00186	8	1
m!	setN(i)v	1	m:00C7	0018E	8	0
m!	setT(i)v	1	m:00CB	00196	8	2
M!	SinkParameters(r:embs.SinkParameters,c,c,c)v	1	m:00AB	00156	16

C	c:00E	com.ibm.saguaro.system.$tatics	-1	-1	c:01/000
r	embs.SourceNode.tstart	r:com.ibm.saguaro.system.Timer	-1	0
r	embs.SourceNode.xmit	c[]	-1	1
r	embs.SourceNode.radio	r:com.ibm.saguaro.system.Radio	-1	2
r	embs.SourceNode.sinks	r:embs.SinkParameters[]	-1	3
f	embs.SourceNode.light	z	-1	0
f	embs.SourceNode.wait	l	-1	1
f	embs.SourceNode.currentChannel	i	-1	3
f	embs.SourceNode.ownPanId	c	-1	4
f	embs.SourceNode.ownShortAddr	c	-1	5
f	embs.SourceNode.YELLOW_LED	c	-1	6
f	embs.SourceNode.GREEN_LED	c	-1	7
f	embs.SourceNode.RED_LED	c	-1	8
M	__init()v	-1	m:0020	00040	278

c	0004D	0	12	0	12	0	m:0020
c	00051	0	16	0	16	0	m:0020
c	0005B	0	18	0	18	0	m:0020
c	00092	0	23	0	23	0	m:0020
c	00096	0	24	0	24	0	m:0020
c	0009B	0	25	0	25	0	m:0020
c	0009F	0	28	0	28	0	m:0020
c	000A3	0	29	0	29	0	m:0020
c	000A7	0	30	0	30	0	m:0020
c	000AB	0	34	0	34	0	m:0020
c	000B7	0	38	0	38	0	m:0020
c	000BF	0	40	0	40	0	m:0020
c	000D0	0	41	0	41	0	m:0020
c	000E0	0	44	0	44	0	m:0020
c	000E6	0	45	0	45	0	m:0020
c	000EC	0	46	0	46	0	m:0020
c	000F4	0	47	0	47	0	m:0020
c	00106	0	48	0	48	0	m:0020
c	0010F	0	49	0	49	0	m:0020
c	00122	0	50	0	50	0	m:0020
c	00135	0	53	0	53	0	m:0020
c	0013F	0	59	0	59	0	m:0020
c	00154	0	60	0	60	0	m:0020
e	00156	m:0020
c	00159	1	12	0	12	0	m:00AB
l!	00159	00166	r:embs.SinkParameters	this	m:00AB	0
l!	00159	00166	c	channel	m:00AB	1
l!	00159	00166	c	panid	m:00AB	2
l!	00159	00166	c	address	m:00AB	3
c	0015D	1	13	0	13	0	m:00AB
c	00161	1	14	0	14	0	m:00AB
c	00165	1	15	0	15	0	m:00AB
e!	00166	m:00AB
c	00169	1	23	0	23	0	m:00B3
l	00169	0016D	r:embs.SinkParameters	this	m:00B3	0
e!	0016E	m:00B3
c	00171	1	21	0	21	0	m:00B7
l	00171	00175	r:embs.SinkParameters	this	m:00B7	0
e!	00176	m:00B7
c	00179	1	20	0	20	0	m:00BB
l	00179	0017D	r:embs.SinkParameters	this	m:00BB	0
e!	0017E	m:00BB
c	00181	1	22	0	22	0	m:00BF
l	00181	00185	r:embs.SinkParameters	this	m:00BF	0
e!	00186	m:00BF
c	00189	1	18	0	18	0	m:00C3
l	00189	0018D	r:embs.SinkParameters	this	m:00C3	0
e!	0018E	m:00C3
c	00191	1	17	0	17	0	m:00C7
l!	00191	00196	r:embs.SinkParameters	this	m:00C7	0
l	00191	00196	i	n	m:00C7	1
e!	00196	m:00C7
c	00199	1	19	0	19	0	m:00CB
l!	00199	0019E	r:embs.SinkParameters	this	m:00CB	0
l	00199	0019E	i	t	m:00CB	1
e!	0019E	m:00CB
c	001A1	0	8	0	8	0	m:00CF
l!	001A1	001A2	r:embs.SourceNode	this	m:00CF	0
e!	001A2	m:00CF
c	001A5	0	8	0	8	0	m:00D1
l	001A5	001AF	i	x0	m:00D1	0
l	001A5	001AF	c[]	x1	m:00D1	1
l	001A5	001AF	i	x2	m:00D1	2
l	001A5	001AF	i	x3	m:00D1	3
l	001A5	001AF	l	x4	m:00D1	4
e	001B0	m:00D1
c	001B3	0	64	0	64	0	m:00D8
l	001B3	001F4	i	flags	m:00D8	0
l	001B3	001F4	c[]	data	m:00D8	1
l	001B3	001F4	i	len	m:00D8	2
l	001B3	001F4	i	info	m:00D8	3
l	001B3	001F4	l	time	m:00D8	4
c	001B6	0	66	0	66	0	m:00D8
c	001BB	0	69	0	69	0	m:00D8
c	001CA	0	71	0	71	0	m:00D8
c	001CC	0	73	0	73	0	m:00D8
c	001D2	0	74	0	74	0	m:00D8
l	001D2	001F4	i	n	m:00D8	6
c	001D8	0	75	0	75	0	m:00D8
c	001DC	0	76	0	76	0	m:00D8
c	001E0	0	78	0	78	0	m:00D8
c	001E6	0	81	0	81	0	m:00D8
l	001E6	001F4	i	nextChannel	m:00D8	7
c	001EE	0	82	0	82	0	m:00D8
c	001F2	0	83	0	83	0	m:00D8
e	001F4	m:00D8
c	001F7	0	98	0	98	0	m:00FA
l	001F7	00244	i	channel	m:00FA	0
c	001FD	0	99	0	99	0	m:00FA
c	00201	0	100	0	100	0	m:00FA
c	00205	0	101	0	101	0	m:00FA
c	0020B	0	102	0	102	0	m:00FA
l	0020B	00244	r:embs.SinkParameters	sp	m:00FA	1
c	00211	0	103	0	103	0	m:00FA
c	0021B	0	104	0	104	0	m:00FA
c	00226	0	105	0	105	0	m:00FA
c	0023F	0	106	0	106	0	m:00FA
c	00243	0	107	0	107	0	m:00FA
e	00244	m:00FA
c	00247	0	88	0	88	0	m:0122
l	00247	0025F	i	led	m:0122	0
c	0024D	0	89	0	89	0	m:0122
l	0024D	0025F	i	ledState	m:0122	1
c	00250	0	90	0	90	0	m:0122
c	00258	0	92	0	92	0	m:0122
c	0025E	0	94	0	94	0	m:0122
e	00260	m:0122
S	M:/EMBS/EMBS_assessment2/part2/src/embs/SourceNode.java
:	package embs;
:	
:	import com.ibm.saguaro.system.*;
:	import com.ibm.saguaro.logger.*;
:	//import embs.SinkParameter;
:	
:	
:	public class SourceNode {
:	
:	    private static Timer  tsend;
:	    private static Timer  tstart;
:	    private static boolean light=false;
:	    
:	    private static byte[] xmit;
:	    private static long   wait;
:	    static Radio radio = new Radio();
:	
:	    private static SinkParameters[] sinks = {
:	    	new SinkParameters((byte) 11,(byte)  0x11,(byte)  0x11), 
:	    	new SinkParameters((byte) 12, (byte) 0x12, (byte) 0x12),
:	    	new SinkParameters((byte) 13, (byte) 0x13, (byte) 0x13)};
:	    // settings for SourceNode A
:	    private static int currentChannel = 1;
:	    private static byte ownPanId = 0x11;
:	    private static byte ownShortAddr = 0x1;
:	    
:	
:	    private static byte YELLOW_LED = (byte) 0;
:	    private static byte GREEN_LED = (byte) 1;
:	    private static byte RED_LED = (byte) 2;
:	    
:	    static {
:	        // Open the default radio
:	        radio.open(Radio.DID, null, 0, 0);
:	
:	        
:	        // Set channel 
:	        radio.setChannel((byte) 12);
:	        // Set the PAN ID and the short address
:	        radio.setPanId(sinks[currentChannel].getPanid(), true);
:	        radio.setShortAddr(sinks[currentChannel].getAddress());
:	        
:	        // Prepare beacon frame with source and destination addressing
:	        xmit = new byte[12];
:	        xmit[0] = Radio.FCF_BEACON;
:	        xmit[1] = Radio.FCA_SRC_SADDR|Radio.FCA_DST_SADDR;
:	        Util.set16le(xmit, 3, sinks[currentChannel].getPanid()); // destination PAN address 
:	        Util.set16le(xmit, 5, 0xFFFF); // broadcast address 
:	        Util.set16le(xmit, 7, sinks[currentChannel].getPanid()); // own PAN address 
:	        Util.set16le(xmit, 9, sinks[currentChannel].getAddress()); // own short address 
:	
:			// register delegate for received frames
:	        radio.setRxHandler(new DevCallback(null){
:	                public int invoke (int flags, byte[] data, int len, int info, long time) {
:	                    return  SourceNode.onReceive(flags, data, len, info, time);
:	                }
:	            });
:	
:	        radio.startRx(Device.ASAP, 0, Time.currentTicks()+0x7FFFFFFF);
:	    }
:	
:	    // Called when a frame is received or at the end of a reception period 
:	    private static int onReceive (int flags, byte[] data, int len, int info, long time) {
:	        if (data == null) { // marks end of reception period
:	            // turn green LED off 
:		        LED.setState((byte)1, (byte)0);
:		        
:		        //set alarm to restart protocol
:		    	tstart.setAlarmBySpan(10*wait);
:	                    
:	            return 0;
:	        }
:	        int n = data[11];
:	    	Logger.appendString(csr.s2b("Current n: "));
:	    	Logger.appendInt(n);
:	    	Logger.flush(Mote.ERROR);
:			// frame received, so blink red LED and log its payload
:	        toggleLed(currentChannel);
:	        int nextChannel = (currentChannel+1) % 3;
:	//        setChannel(nextChannel);
:			Logger.appendByte(data[11]);
:	        Logger.flush(Mote.WARN);
:	        return 0;
:	        
:	    }
:	    
:	    private static void toggleLed(int led){
:	    	int ledState = LED.getState((byte) led);
:	    	if (ledState==0){
:	    		LED.setState((byte) led, (byte) 1);
:	    	} else {
:	    		LED.setState((byte) led, (byte) 0);
:	    	}
:	    }
:	
:	
:	    private static void setChannel(int channel) {
:	    	Logger.appendString(csr.s2b("Changing channel to: "));
:	    	Logger.appendInt(channel);
:	    	Logger.flush(Mote.ERROR);
:	    	SinkParameters sp = sinks[channel];
:	    	radio.stopRx();
:	        radio.setChannel(sp.getChannel());
:	        radio.setPanId(sp.getPanid(), true);
:	        radio.startRx(Device.TIMED, Time.toTickSpan(Time.MILLISECS, 5), Time.currentTicks()+0x7FFFFFFF);
:	        currentChannel = channel;
:		}
:	
:	
:	//	// Called on a timer alarm
:	//    public static void periodicSend(byte param, long time) {
:	//        
:	//        if(nc>0){
:	//	        // transmit a beacon 
:	//    	    radio.transmit(Device.ASAP|Radio.TXMODE_POWER_MAX, xmit, 0, 12, 0);
:	//        	// program new alarm
:	//        	tsend.setAlarmBySpan(wait);
:	//        	nc--;
:	//        	xmit[11]--;
:	//        }
:	//        else{
:	//        	//start reception phase
:	//	        radio.startRx(Device.ASAP, 0, Time.currentTicks()+wait);
:	//	        // turn green LED on 
:	//	        LED.setState((byte)1, (byte)1);
:	//	        
:	//        }
:	//        
:	//    }
:	}
S	M:/EMBS/EMBS_assessment2/part2/src/embs/SinkParameters.java
:	package embs;
:	
:	public class SinkParameters {
:	    private byte channel;
:	    private byte panid;
:	    private byte address;
:	    
:	    private int N;
:	    private int T;
:	    
:	    public SinkParameters(byte channel, byte panid, byte address){
:	    	this.channel =  channel;
:	    	this.panid =  panid;
:	    	this.address =  address;
:	    }
:	
:		public void setN(int n) {this.N = n;}
:		public int getT() {return T;}
:		public void setT(int t) {this.T = t;}
:		public int getN() {return N;}
:		public byte getChannel() {return channel;}
:		public byte getPanid() {return panid;}
:		public byte getAddress() {return address;}
:	    
:	    
:	}
