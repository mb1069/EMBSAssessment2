A!	SourceNode-10.0.16507	2.0	Java

X	c:01/000	com.ibm.saguaro.system.Assembly
X	c:01/001	com.ibm.saguaro.system.Util
X	c:01/002	com.ibm.saguaro.system.Timer
X	c:01/003	com.ibm.saguaro.system.Time
X	c:01/004	com.ibm.saguaro.system.MoteException
X	c:01/005	com.ibm.saguaro.system.Device
X	c:01/006	com.ibm.saguaro.system.SDev
X	c:01/007	com.ibm.saguaro.system.CDev
X	c:01/008	com.ibm.saguaro.system.OutOfResourcesException
X	c:01/009	com.ibm.saguaro.system.OsException
X	c:01/00A	com.ibm.saguaro.system.NullReferenceException
X	c:01/00B	com.ibm.saguaro.system.SystemException
X	c:01/00C	com.ibm.saguaro.system.Mote
X	c:01/00D	com.ibm.saguaro.system.LIP
X	c:01/00E	com.ibm.saguaro.system.LED
X	c:01/00F	com.ibm.saguaro.system.InvalidCastException
X	c:01/010	com.ibm.saguaro.system.IndexOutOfRangeException
X	c:01/011	com.ibm.saguaro.system.I2C
X	c:01/012	com.ibm.saguaro.system.GPIO
X	c:01/013	com.ibm.saguaro.system.Err
X	c:01/014	com.ibm.saguaro.system.DeviceException
X	c:01/015	com.ibm.saguaro.system.SPI
X	c:01/016	com.ibm.saguaro.system.Radio
X	c:01/017	com.ibm.saguaro.system.WLIP
X	c:01/018	com.ibm.saguaro.system.ArrayTypeMismatchException
X	c:01/019	com.ibm.saguaro.system.ArithmException
X	c:01/01A	com.ibm.saguaro.system.ArgumentException
X	c:01/01B	com.ibm.saguaro.system.AccessException
X	c:01/01C	com.ibm.saguaro.system.ADC
X	c:02/000	com.ibm.saguaro.logger.Logger

C!	c:006	embs.SourceNode	-1	0	c:000
R	timer0	r:com.ibm.saguaro.system.Timer	0	0
R	timer1	r:com.ibm.saguaro.system.Timer	0	1
R	timer2	r:com.ibm.saguaro.system.Timer	0	2
R	xmit	c[]	0	3
R	radio	r:com.ibm.saguaro.system.Radio	0	4
R	sinks	r:embs.SinkParameters[]	0	5
R	channelSwitches	r:embs.ChannelSwitch[]	0	6
F	currentChannel	i	0	0
F	ownPanId	c	0	1
F	ownShortAddr	c	0	2
F	YELLOW_LED	c	0	3
F	GREEN_LED	c	0	4
F	RED_LED	c	0	5
F	N_MIN	i	0	6
F	N_MAX	i	0	7
F	T_MIN	l	0	8
F	T_MAX	l	0	10
F	previousChannel	c	0	12
F	broadcastSet	z	0	13
F	wait	l	0	3327
H	BROADCASTING$UTF8	b[]	0	66,82,79,65,68,67,65,83,84,73,78,71,33
H	Bn_and_BT$UTF8	b[]	0	66,110,32,97,110,100,32,66,84
H	Calculated_T$UTF8	b[]	0	67,97,108,99,117,108,97,116,101,100,32,84,58,32
H	Calculated_diffT$UTF8	b[]	0	67,97,108,99,117,108,97,116,101,100,32,100,105,102,102,84,58,32
H	Current_Beacon$UTF8	b[]	0	67,117,114,114,101,110,116,32,66,101,97,99,111,110,58,32
H	Got_channelNum$UTF8	b[]	0	71,111,116,32,99,104,97,110,110,101,108,78,117,109,58,32
H	PREPARING_BROADCAST_at_time$UTF8	b[]	0	80,82,69,80,65,82,73,78,71,32,66,82,79,65,68,67,65,83,84,33,32,97,116,32,116,105,109,101,58,32
H	Transmitted$UTF8	b[]	0	84,114,97,110,115,109,105,116,116,101,100,46
H	for_time$UTF8	b[]	0	102,111,114,32,116,105,109,101,58,32
H	on_channel$UTF8	b[]	0	111,110,32,99,104,97,110,110,101,108,58,32
H	s$UTF8	b[]	0	47
M!	SourceNode(r:embs.SourceNode)v	-1	m:0194	00328	4
M	access$000(i,c[],i,i,l)i	-1	m:0196	0032C	14
M	access$100(i,c[],i,i,l)i	-1	m:019D	0033A	14
M!	broadcastToSink(c,l)v	-1	m:01A4	00348	88
M!	calculateCallback(l,i,l)l	-1	m:01D0	003A0	14
M	createNextBroadcast(i,i,l,l)v	-1	m:01D7	003AE	28
M!	getChannelSwitch(l,r:embs.ChannelSwitch[])c	-1	m:01E5	003CA	50
M	getDiffN(i,i)i	-1	m:01FE	003FC	8
M	getDiffT(l,l)l	-1	m:0202	00404	26
M	insertChannelSwitchInBuffer(r:embs.ChannelSwitch[],r:embs.ChannelSwitch)r:embs.ChannelSwitch[]	-1	m:020F	0041E	60
M	onReceive(i,c[],i,i,l)i	-1	m:022D	0045A	304
M	onTransmit(i,c[],i,i,l)i	-1	m:02C5	0058A	74
M	setupBroadcastAndCallBack(l,i,l)v	-1	m:02EA	005D4	138
M	toggleLed(i)v	-1	m:032F	0065E	28

C!	c:008	embs.SinkParameters	1	1	c:000
f	latestBeaconT	l	1	0
f	latestBeaconN	i	1	2
f	T	l	1	3
f	N	i	1	5
f	address	c	1	6
f	panid	c	1	7
f	channel	c	1	8
m!	addBeacon(i,l)v	1	m:0162	002C4	12	0
m!	getAddress()c	1	m:0168	002D0	8	7
m!	getBeaconN()i	1	m:016C	002D8	8	8
m!	getBeaconT()l	1	m:0170	002E0	8	10
m!	getChannel()c	1	m:0174	002E8	8	5
m!	getN()i	1	m:0178	002F0	8	4
m!	getPanid()c	1	m:017C	002F8	8	6
m!	getT()l	1	m:0180	00300	8	2
m!	setBeaconN(i)v	1	m:0184	00308	8	9
m!	setBeaconT(l)v	1	m:0188	00310	8	11
m!	setN(i)v	1	m:018C	00318	8	1
m!	setT(l)v	1	m:0190	00320	8	3
M!	SinkParameters(r:embs.SinkParameters,c,c,c)v	1	m:014E	0029C	40

C!	c:013	embs.ChannelSwitch	2	2	c:000
f	channel	c	2	0
f	time	l	2	1
m!	getChannel()c	2	m:013E	0027C	8	3
m!	getTime()l	2	m:0142	00284	8	0
m!	setChannel(c)v	2	m:0146	0028C	8	2
m!	setTime(l)v	2	m:014A	00294	8	1
M!	ChannelSwitch(r:embs.ChannelSwitch,l,c)v	2	m:0138	00270	12

C!	c:018	embs.Broadcast	3	3	c:000
f	deadline	l	3	0
f	broadcastTime	l	3	2
m!	getBroadcastTime()l	3	m:0128	00250	8	0
m!	getDeadline()l	3	m:012C	00258	8	2
m!	setBroadcastTime(l)v	3	m:0130	00260	8	1
m!	setDeadline(l)v	3	m:0134	00268	8	3
M!	Broadcast(r:embs.Broadcast,l,l)v	3	m:0122	00244	12

C	c:01D	com.ibm.saguaro.system.$tatics	-1	-1	c:01/000
r	embs.SourceNode.timer0	r:com.ibm.saguaro.system.Timer	-1	0
r	embs.SourceNode.timer1	r:com.ibm.saguaro.system.Timer	-1	1
r	embs.SourceNode.timer2	r:com.ibm.saguaro.system.Timer	-1	2
r	embs.SourceNode.xmit	c[]	-1	3
r	embs.SourceNode.radio	r:com.ibm.saguaro.system.Radio	-1	4
r	embs.SourceNode.sinks	r:embs.SinkParameters[]	-1	5
r	embs.SourceNode.channelSwitches	r:embs.ChannelSwitch[]	-1	6
f	embs.SourceNode.currentChannel	i	-1	0
f	embs.SourceNode.ownPanId	c	-1	1
f	embs.SourceNode.ownShortAddr	c	-1	2
f	embs.SourceNode.YELLOW_LED	c	-1	3
f	embs.SourceNode.GREEN_LED	c	-1	4
f	embs.SourceNode.RED_LED	c	-1	5
f	embs.SourceNode.N_MIN	i	-1	6
f	embs.SourceNode.N_MAX	i	-1	7
f	embs.SourceNode.T_MIN	l	-1	8
f	embs.SourceNode.T_MAX	l	-1	10
f	embs.SourceNode.previousChannel	c	-1	12
f	embs.SourceNode.broadcastSet	z	-1	13
M	__init()v	-1	m:003E	0007C	456

c	00089	0	25	0	25	0	m:003E
c	00093	0	27	0	27	0	m:003E
c	000C7	0	32	0	32	0	m:003E
c	000CB	0	33	0	33	0	m:003E
c	000D0	0	34	0	34	0	m:003E
c	000D4	0	37	0	37	0	m:003E
c	000D8	0	38	0	38	0	m:003E
c	000DC	0	39	0	39	0	m:003E
c	000E0	0	41	0	41	0	m:003E
c	000E4	0	42	0	42	0	m:003E
c	000E9	0	43	0	43	0	m:003E
c	000F1	0	44	0	44	0	m:003E
c	000F9	0	47	0	47	0	m:003E
c	00100	0	50	0	50	0	m:003E
c	00104	0	53	0	53	0	m:003E
c	00113	0	54	0	54	0	m:003E
c	0011E	0	56	0	56	0	m:003E
c	0012A	0	58	0	58	0	m:003E
c	0012F	0	59	0	59	0	m:003E
c	00134	0	60	0	60	0	m:003E
c	00139	0	62	0	62	0	m:003E
c	00143	0	63	0	63	0	m:003E
c	0014A	0	64	0	64	0	m:003E
c	00154	0	70	0	70	0	m:003E
c	0015E	0	71	0	71	0	m:003E
c	00165	0	72	0	72	0	m:003E
c	0016F	0	78	0	78	0	m:003E
c	00179	0	79	0	79	0	m:003E
c	00180	0	80	0	80	0	m:003E
c	0018A	0	89	0	89	0	m:003E
c	0019A	0	91	0	91	0	m:003E
c	001AB	0	92	0	92	0	m:003E
c	001BB	0	95	0	95	0	m:003E
c	001C1	0	96	0	96	0	m:003E
c	001C7	0	97	0	97	0	m:003E
c	001CF	0	98	0	98	0	m:003E
c	001E1	0	99	0	99	0	m:003E
c	001EA	0	100	0	100	0	m:003E
c	001FD	0	101	0	101	0	m:003E
c	00210	0	104	0	104	0	m:003E
c	0021A	0	110	0	110	0	m:003E
c	00224	0	115	0	115	0	m:003E
c	0022D	0	116	0	116	0	m:003E
c	00242	0	117	0	117	0	m:003E
e	00244	m:003E
c	00247	3	11	0	11	0	m:0122
l!	00247	00250	r:embs.Broadcast	this	m:0122	0
l!	00247	00250	l	broadcastTime	m:0122	1
l	00247	00250	l	cutoffTime	m:0122	3
c	0024B	3	12	0	12	0	m:0122
c	0024F	3	13	0	13	0	m:0122
e!	00250	m:0122
c	00253	3	16	0	16	0	m:0128
l	00253	00257	r:embs.Broadcast	this	m:0128	0
e!	00258	m:0128
c	0025B	3	23	0	23	0	m:012C
l	0025B	0025F	r:embs.Broadcast	this	m:012C	0
e!	00260	m:012C
c	00263	3	19	0	19	0	m:0130
l!	00263	00268	r:embs.Broadcast	this	m:0130	0
l	00263	00268	l	broadcastTime	m:0130	1
c	00267	3	20	0	20	0	m:0130
e!	00268	m:0130
c	0026B	3	26	0	26	0	m:0134
l!	0026B	00270	r:embs.Broadcast	this	m:0134	0
l	0026B	00270	l	deadline	m:0134	1
c	0026F	3	27	0	27	0	m:0134
e!	00270	m:0134
c	00273	2	15	0	15	0	m:0138
l!	00273	0027C	r:embs.ChannelSwitch	this	m:0138	0
l!	00273	0027C	l	time	m:0138	1
l	00273	0027C	c	channel	m:0138	3
c	00277	2	16	0	16	0	m:0138
c	0027B	2	17	0	17	0	m:0138
e!	0027C	m:0138
c	0027F	2	30	0	30	0	m:013E
l	0027F	00283	r:embs.ChannelSwitch	this	m:013E	0
e!	00284	m:013E
c	00287	2	20	0	20	0	m:0142
l	00287	0028B	r:embs.ChannelSwitch	this	m:0142	0
e!	0028C	m:0142
c	0028F	2	27	0	27	0	m:0146
l!	0028F	00294	r:embs.ChannelSwitch	this	m:0146	0
l	0028F	00294	c	channel	m:0146	1
c	00293	2	28	0	28	0	m:0146
e!	00294	m:0146
c	00297	2	23	0	23	0	m:014A
l!	00297	0029C	r:embs.ChannelSwitch	this	m:014A	0
l	00297	0029C	l	time	m:014A	1
c	0029B	2	24	0	24	0	m:014A
e!	0029C	m:014A
c	0029F	1	8	0	8	0	m:014E
l!	0029F	002C4	r:embs.SinkParameters	this	m:014E	0
l!	0029F	002C4	c	channel	m:014E	1
l!	0029F	002C4	c	panid	m:014E	2
l!	0029F	002C4	c	address	m:014E	3
c	002A3	1	9	0	9	0	m:014E
c	002AB	1	10	0	10	0	m:014E
c	002AF	1	11	0	11	0	m:014E
c	002B7	1	14	0	14	0	m:014E
c	002BB	1	15	0	15	0	m:014E
c	002BF	1	16	0	16	0	m:014E
c	002C3	1	17	0	17	0	m:014E
e!	002C4	m:014E
c	002C7	1	20	0	20	0	m:0162
l!	002C7	002D0	r:embs.SinkParameters	this	m:0162	0
l!	002C7	002D0	i	n	m:0162	1
l	002C7	002D0	l	t	m:0162	2
c	002CB	1	21	0	21	0	m:0162
c	002CF	1	22	0	22	0	m:0162
e!	002D0	m:0162
c	002D3	1	30	0	30	0	m:0168
l	002D3	002D7	r:embs.SinkParameters	this	m:0168	0
e!	002D8	m:0168
c	002DB	1	34	0	34	0	m:016C
l	002DB	002DF	r:embs.SinkParameters	this	m:016C	0
e!	002E0	m:016C
c	002E3	1	43	0	43	0	m:0170
l	002E3	002E7	r:embs.SinkParameters	this	m:0170	0
e!	002E8	m:0170
c	002EB	1	28	0	28	0	m:0174
l	002EB	002EF	r:embs.SinkParameters	this	m:0174	0
e!	002F0	m:0174
c	002F3	1	27	0	27	0	m:0178
l	002F3	002F7	r:embs.SinkParameters	this	m:0178	0
e!	002F8	m:0178
c	002FB	1	29	0	29	0	m:017C
l	002FB	002FF	r:embs.SinkParameters	this	m:017C	0
e!	00300	m:017C
c	00303	1	25	0	25	0	m:0180
l	00303	00307	r:embs.SinkParameters	this	m:0180	0
e!	00308	m:0180
c	0030B	1	39	0	39	0	m:0184
l!	0030B	00310	r:embs.SinkParameters	this	m:0184	0
l	0030B	00310	i	beaconN	m:0184	1
c	0030F	1	40	0	40	0	m:0184
e!	00310	m:0184
c	00313	1	48	0	48	0	m:0188
l!	00313	00318	r:embs.SinkParameters	this	m:0188	0
l	00313	00318	l	beaconT	m:0188	1
c	00317	1	49	0	49	0	m:0188
e!	00318	m:0188
c	0031B	1	24	0	24	0	m:018C
l!	0031B	00320	r:embs.SinkParameters	this	m:018C	0
l	0031B	00320	i	n	m:018C	1
e!	00320	m:018C
c	00323	1	26	0	26	0	m:0190
l!	00323	00328	r:embs.SinkParameters	this	m:0190	0
l	00323	00328	l	t	m:0190	1
e!	00328	m:0190
c	0032B	0	17	0	17	0	m:0194
l!	0032B	0032C	r:embs.SourceNode	this	m:0194	0
e!	0032C	m:0194
c	0032F	0	17	0	17	0	m:0196
l	0032F	00339	i	x0	m:0196	0
l	0032F	00339	c[]	x1	m:0196	1
l	0032F	00339	i	x2	m:0196	2
l	0032F	00339	i	x3	m:0196	3
l	0032F	00339	l	x4	m:0196	4
e	0033A	m:0196
c	0033D	0	17	0	17	0	m:019D
l	0033D	00347	i	x0	m:019D	0
l	0033D	00347	c[]	x1	m:019D	1
l	0033D	00347	i	x2	m:019D	2
l	0033D	00347	i	x3	m:019D	3
l	0033D	00347	l	x4	m:019D	4
e	00348	m:019D
c	0034B	0	184	0	184	0	m:01A4
l!	0034B	0039F	c	channel	m:01A4	0
l!	0034B	0039F	l	time	m:01A4	1
c	00350	0	185	0	185	0	m:01A4
c	00356	0	186	0	186	0	m:01A4
c	0035A	0	187	0	187	0	m:01A4
c	00360	0	188	0	188	0	m:01A4
c	00364	0	189	0	189	0	m:01A4
c	0036A	0	190	0	190	0	m:01A4
c	0036E	0	191	0	191	0	m:01A4
c	00372	0	192	0	192	0	m:01A4
c	0037B	0	193	0	193	0	m:01A4
c	00382	0	194	0	194	0	m:01A4
c	00394	0	195	0	195	0	m:01A4
c	0039A	0	196	0	196	0	m:01A4
c	0039E	0	197	0	197	0	m:01A4
e!	003A0	m:01A4
c	003A3	0	180	0	180	0	m:01D0
l!	003A3	003AD	l	currentTime	m:01D0	0
l!	003A3	003AD	i	maxObservedN	m:01D0	2
l	003A3	003AD	l	channelT	m:01D0	3
e!	003AE	m:01D0
c	003B1	0	209	0	209	0	m:01D7
l	003B1	003C9	i	beaconN	m:01D7	0
l	003B1	003C9	i	channel	m:01D7	1
l	003B1	003C9	l	t	m:01D7	2
l	003B1	003C9	l	currentTimeMS	m:01D7	4
c	003BA	0	210	0	210	0	m:01D7
l	003BA	003C9	l	broadcastTime	m:01D7	6
c	003C8	0	211	0	211	0	m:01D7
e	003CA	m:01D7
c	003CD	0	200	0	200	0	m:01E5
l!	003CD	003FC	l	time	m:01E5	0
l	003CD	003FC	r:embs.ChannelSwitch[]	css	m:01E5	2
c	003DC	0	201	0	201	0	m:01E5
l	003DC	003EC	r:embs.ChannelSwitch	cs	m:01E5	6
c	003E7	0	202	0	202	0	m:01E5
c	003EC	0	200	0	200	0	m:01E5
c	003F1	0	205	0	205	0	m:01E5
e!	003FC	m:01E5
c	003FF	0	257	0	257	0	m:01FE
l	003FF	00403	i	beacon1N	m:01FE	0
l	003FF	00403	i	beacon2N	m:01FE	1
e	00404	m:01FE
c	00407	0	261	0	261	0	m:0202
l	00407	0041E	l	beacon1T	m:0202	0
l	00407	0041E	l	beacon2T	m:0202	2
c	0040C	0	262	0	262	0	m:0202
l	0040C	0041E	l	diffT	m:0202	4
e	0041E	m:0202
c	00421	0	241	0	241	0	m:020F
l	00421	0045A	r:embs.ChannelSwitch[]	css	m:020F	0
l	00421	0045A	r:embs.ChannelSwitch	cs	m:020F	1
l	00423	0045A	i	x	m:020F	2
c	00428	0	242	0	242	0	m:020F
c	0042D	0	243	0	243	0	m:020F
c	00431	0	244	0	244	0	m:020F
c	00433	0	241	0	241	0	m:020F
c	00438	0	247	0	247	0	m:020F
c	00440	0	248	0	248	0	m:020F
l	00440	0045A	r:embs.ChannelSwitch[]	newCss	m:020F	3
c	00447	0	249	0	249	0	m:020F
c	0044D	0	248	0	248	0	m:020F
c	00452	0	251	0	251	0	m:020F
c	00458	0	252	0	252	0	m:020F
e	0045A	m:020F
c	0045D	0	135	0	135	0	m:022D
l	0045D	00589	i	flags	m:022D	0
l	0045D	00589	c[]	data	m:022D	1
l	0045D	00589	i	len	m:022D	2
l	0045D	00589	i	info	m:022D	3
l	0045D	00589	l	time	m:022D	4
c	00463	0	136	0	136	0	m:022D
c	00470	0	137	0	137	0	m:022D
c	00476	0	138	0	138	0	m:022D
c	00483	0	139	0	139	0	m:022D
c	00487	0	140	0	140	0	m:022D
c	0048A	0	142	0	142	0	m:022D
c	0048F	0	144	0	144	0	m:022D
c	00491	0	146	0	146	0	m:022D
c	00497	0	147	0	147	0	m:022D
l	00497	00589	i	n	m:022D	6
c	0049D	0	149	0	149	0	m:022D
l	0049D	00589	l	currentTime	m:022D	7
c	004AF	0	150	0	150	0	m:022D
c	004C5	0	152	0	152	0	m:022D
c	004D9	0	153	0	153	0	m:022D
c	004DD	0	154	0	154	0	m:022D
c	004ED	0	155	0	155	0	m:022D
l	004ED	00564	i	diffN	m:022D	9
c	004FE	0	156	0	156	0	m:022D
l	004FE	00564	l	diffT	m:022D	10
c	00504	0	157	0	157	0	m:022D
c	00509	0	158	0	158	0	m:022D
c	0050F	0	159	0	159	0	m:022D
c	00519	0	160	0	160	0	m:022D
c	0051D	0	161	0	161	0	m:022D
c	0052D	0	162	0	162	0	m:022D
c	00535	0	163	0	163	0	m:022D
l	00535	00564	l	t	m:022D	12
c	00541	0	164	0	164	0	m:022D
c	00547	0	165	0	165	0	m:022D
c	0054C	0	166	0	166	0	m:022D
c	00550	0	167	0	167	0	m:022D
c	00564	0	171	0	171	0	m:022D
c	00571	0	172	0	172	0	m:022D
c	00577	0	173	0	173	0	m:022D
c	0057F	0	174	0	174	0	m:022D
c	00583	0	175	0	175	0	m:022D
c	00587	0	176	0	176	0	m:022D
e	0058A	m:022D
c	0058D	0	120	0	120	0	m:02C5
l	0058D	005D3	i	flags	m:02C5	0
l	0058D	005D3	c[]	data	m:02C5	1
l	0058D	005D3	i	len	m:02C5	2
l	0058D	005D3	i	info	m:02C5	3
l	0058D	005D3	l	time	m:02C5	4
c	00591	0	121	0	121	0	m:02C5
c	0059B	0	122	0	122	0	m:02C5
c	005A1	0	124	0	124	0	m:02C5
c	005AA	0	125	0	125	0	m:02C5
c	005B4	0	126	0	126	0	m:02C5
c	005D1	0	130	0	130	0	m:02C5
e	005D4	m:02C5
c	005D7	0	214	0	214	0	m:02EA
l	005D7	0065D	l	broadcastTime	m:02EA	0
l	005D7	0065D	i	sinkIndex	m:02EA	2
l	005D7	0065D	l	currentTimeTicks	m:02EA	3
c	005DF	0	215	0	215	0	m:02EA
c	005E4	0	216	0	216	0	m:02EA
c	005F5	0	217	0	217	0	m:02EA
l	005F5	0065D	r:embs.ChannelSwitch	cs	m:02EA	5
c	0060A	0	218	0	218	0	m:02EA
l	0060A	00618	r:embs.ChannelSwitch	c	m:02EA	9
c	00617	0	219	0	219	0	m:02EA
c	00618	0	217	0	217	0	m:02EA
c	0061D	0	223	0	223	0	m:02EA
c	00623	0	224	0	224	0	m:02EA
c	00629	0	225	0	225	0	m:02EA
c	0062F	0	226	0	226	0	m:02EA
c	00637	0	227	0	227	0	m:02EA
c	0063D	0	228	0	228	0	m:02EA
c	00643	0	230	0	230	0	m:02EA
c	00647	0	231	0	231	0	m:02EA
c	00651	0	233	0	233	0	m:02EA
c	0065C	0	235	0	235	0	m:02EA
e	0065E	m:02EA
c	00661	0	266	0	266	0	m:032F
l	00661	00679	i	led	m:032F	0
c	00667	0	267	0	267	0	m:032F
l	00667	00679	i	ledState	m:032F	1
c	0066A	0	268	0	268	0	m:032F
c	00672	0	270	0	270	0	m:032F
c	00678	0	272	0	272	0	m:032F
e	0067A	m:032F
S	M:/EMBS/EMBS_assessment2/part2/src/embs/SourceNode.java
:	package embs;
:	
:	import com.ibm.saguaro.logger.Logger;
:	import com.ibm.saguaro.system.DevCallback;
:	import com.ibm.saguaro.system.Device;
:	import com.ibm.saguaro.system.LED;
:	import com.ibm.saguaro.system.Mote;
:	import com.ibm.saguaro.system.Radio;
:	import com.ibm.saguaro.system.Time;
:	import com.ibm.saguaro.system.Timer;
:	import com.ibm.saguaro.system.TimerEvent;
:	import com.ibm.saguaro.system.Util;
:	import com.ibm.saguaro.system.csr;
:	//import embs.SinkParameter;
:	
:	
:	public class SourceNode {
:	
:	
:		static Timer  timer0;
:		static Timer  timer1;
:		static Timer  timer2;
:		static byte[] xmit;
:		static long   wait;
:		static Radio radio = new Radio();
:	
:		private static SinkParameters[] sinks = {
:			new SinkParameters((byte) 3,(byte)  0x11,(byte)  0x11), 
:			new SinkParameters((byte) 4, (byte) 0x12, (byte) 0x12),
:			new SinkParameters((byte) 5, (byte) 0x13, (byte) 0x13)};
:		// settings for SourceNode A
:		static int currentChannel = 0;
:		static byte ownPanId = 0x11;
:		static byte ownShortAddr = 0x1;
:	
:	
:		static byte YELLOW_LED = (byte) 0;
:		static byte GREEN_LED = (byte) 1;
:		static byte RED_LED = (byte) 2;
:	
:		static int N_MIN = 2;
:		static int N_MAX = 10;
:		static long T_MIN = 250;
:		static long T_MAX = 1500;
:	
:	
:		static ChannelSwitch[] channelSwitches = new ChannelSwitch[5];
:	
:		static byte previousChannel;
:		static boolean broadcastSet = false;
:	
:		static {
:			sinks[currentChannel].setBeaconT(-1);
:			sinks[currentChannel].setBeaconN(-1);
:			// Open the default radio
:			radio.open(Radio.DID, null, 0, 0);
:	
:			LED.setState((byte) 0, (byte) 1);
:			LED.setState((byte) 1, (byte) 1);
:			LED.setState((byte) 2, (byte) 1);
:	
:			timer0 = new Timer();
:			timer0.setParam((byte) 0);
:			timer0.setCallback(new TimerEvent(null){
:				public void invoke(byte param, long time){
:					SourceNode.broadcastToSink(param, time);
:				}
:			});
:	
:			timer1 = new Timer();
:			timer1.setParam((byte) 1);
:			timer1.setCallback(new TimerEvent(null){
:				public void invoke(byte param, long time){
:					SourceNode.broadcastToSink(param, time);
:				}
:			});
:	
:			timer2 = new Timer();
:			timer2.setParam((byte) 2);
:			timer2.setCallback(new TimerEvent(null){
:				public void invoke(byte param, long time){
:					SourceNode.broadcastToSink(param, time);
:				}
:			});
:	
:	
:	
:			// Set channel 
:			radio.setChannel((byte) sinks[currentChannel].getChannel());
:			// Set the PAN ID and the short address
:			radio.setPanId(sinks[currentChannel].getPanid(), true);
:			radio.setShortAddr(sinks[currentChannel].getAddress());
:	
:			// Prepare beacon frame with source and destination addressing
:			xmit = new byte[12];
:			xmit[0] = Radio.FCF_BEACON;
:			xmit[1] = Radio.FCA_SRC_SADDR|Radio.FCA_DST_SADDR;
:			Util.set16le(xmit, 3, sinks[currentChannel].getPanid()); // destination PAN address 
:			Util.set16le(xmit, 5, 0xFFFF); // broadcast address 
:			Util.set16le(xmit, 7, sinks[currentChannel].getPanid()); // own PAN address 
:			Util.set16le(xmit, 9, sinks[currentChannel].getAddress()); // own short address 
:	
:			// register delegate for received frames
:			radio.setRxHandler(new DevCallback(null){
:				public int invoke (int flags, byte[] data, int len, int info, long time) {
:					return  SourceNode.onReceive(flags, data, len, info, time);
:				}
:			});
:	
:			radio.setTxHandler(new DevCallback(null){
:				public int invoke(int flags, byte[] data, int len, int info, long time) {
:					return SourceNode.onTransmit(flags, data, len, info, time);
:				}
:			});
:			radio.setRxMode(Radio.RXMODE_PROMISCUOUS);
:			radio.startRx(Device.ASAP, 0, Time.currentTicks()+0x7FFFFFFF);
:		}
:	
:		private static int onTransmit(int flags, byte[] data, int len, int info, long time) {
:			broadcastSet = false;
:			if (radio.getState()==Device.S_RXEN){
:				radio.stopRx();
:			}
:			radio.setChannel((byte) previousChannel);
:			if (radio.getState()!=Device.S_RXEN){
:				radio.startRx(Device.TIMED, Time.currentTicks()+Time.toTickSpan(Time.MILLISECS, 10), Time.currentTicks()+0x7FFFFFFF);
:			}
:			//		Logger.appendString(csr.s2b("Turned on radio:"));
:			//		Logger.flush(Mote.INFO);
:			return 0;
:		}
:	
:		// Called when a frame is received or at the end of a reception period 
:		private static int onReceive (int flags, byte[] data, int len, int info, long time) {
:			Logger.appendString(csr.s2b("Bn and BT"));
:			Logger.appendInt(sinks[currentChannel].getBeaconN());
:			Logger.appendString(csr.s2b("/"));
:			Logger.appendLong(sinks[currentChannel].getBeaconT());
:			Logger.flush(Mote.INFO);
:			if (data == null) { // marks end of reception period
:				// turn green LED off 
:				LED.setState((byte)1, (byte)0);
:	
:				return 0;
:			}
:			int n = data[11];
:			long currentTime = Time.currentTime(Time.MILLISECS);
:			//If T is known for sink
:			if (sinks[currentChannel].getT()!=-1){
:				createNextBroadcast(n, currentChannel, sinks[currentChannel].getT(), currentTime);
:			} else {
:				if (sinks[currentChannel].getBeaconN()!=-1 && !broadcastSet){
:					broadcastSet  = true;
:					int diffN = getDiffN(n, sinks[currentChannel].getBeaconN());
:					long diffT = getDiffT(currentTime, sinks[currentChannel].getBeaconT());
:					Logger.appendString(csr.s2b("Calculated diffT: "));
:					Logger.appendLong(diffT);
:					Logger.appendString(csr.s2b("/"));
:					Logger.appendLong(T_MAX*diffN);
:					Logger.flush(Mote.ERROR);
:					if (diffN>0 && diffT<=(T_MAX*diffN)){
:						long t = diffT/diffN;
:						sinks[currentChannel].setT(t);
:						Logger.appendString(csr.s2b("Calculated T: "));
:						Logger.appendLong(t);
:						Logger.flush(Mote.WARN);
:						createNextBroadcast(sinks[currentChannel].getBeaconN(), currentChannel, t, currentTime);
:					}
:				}
:			}
:			sinks[currentChannel].addBeacon(n, currentTime);
:			Logger.appendString(csr.s2b("Current Beacon: "));
:			Logger.appendByte(data[11]);
:			Logger.flush(Mote.WARN);
:			toggleLed(2);
:			return 0;
:		}
:	
:		protected static long calculateCallback(long currentTime, int maxObservedN, long channelT){
:			return currentTime+((maxObservedN+11) * channelT);
:		}
:	
:		protected static void broadcastToSink(byte channel, long time){
:			LED.setState((byte) 2, (byte) 1);
:			Logger.appendString(csr.s2b("BROADCASTING!"));
:			Logger.flush(Mote.WARN);
:			radio.stopRx();
:			toggleLed(2);
:			Logger.appendString(csr.s2b("Got channelNum: "));
:			Logger.appendByte((byte) channel);
:			Logger.flush(Mote.INFO);
:			previousChannel = radio.getChannel();
:			radio.setChannel((byte) channel);
:			radio.transmit(Device.ASAP|Radio.TXMODE_POWER_MAX, xmit, 0, 12, 0);
:			Logger.appendString(csr.s2b("Transmitted."));
:			Logger.flush(Mote.INFO);
:		}
:	
:		protected static byte getChannelSwitch(long time, ChannelSwitch[] css){
:			for (ChannelSwitch cs: css){
:				if (cs!=null && cs.getTime()==time){
:					return cs.getChannel();
:				}
:			}
:			return sinks[currentChannel].getChannel();
:		}
:	
:		private static void createNextBroadcast(int beaconN, int channel, long t, long currentTimeMS) {
:			long broadcastTime = (t  * beaconN) + currentTimeMS;
:			setupBroadcastAndCallBack(broadcastTime + (T_MIN>>1), channel, currentTimeMS);
:		}
:	
:		private static void setupBroadcastAndCallBack(long broadcastTime, int sinkIndex, long currentTimeTicks){
:			broadcastTime+= T_MIN>>2;
:			LED.setState((byte) 2, (byte) 0);
:			ChannelSwitch cs = new ChannelSwitch(broadcastTime, sinks[sinkIndex].getChannel());
:			for (ChannelSwitch c: channelSwitches){
:				if (c!=null && c.getTime()==broadcastTime){
:					return;
:				}
:			}
:	
:			Logger.appendString(csr.s2b("PREPARING BROADCAST! at time: "));
:			Logger.appendLong(Time.currentTicks());
:			Logger.appendString(csr.s2b("for time: "));
:			Logger.appendLong(Time.toTickSpan(Time.MILLISECS, broadcastTime));
:			Logger.appendString(csr.s2b("on channel: "));
:			Logger.appendInt(currentChannel);
:			
:			Logger.flush(Mote.ERROR);
:			channelSwitches = insertChannelSwitchInBuffer(channelSwitches, cs);
:			
:			timer0.setAlarmBySpan(Time.toTickSpan(Time.MILLISECS, broadcastTime));
:	
:		}
:	
:	
:		private static ChannelSwitch[] insertChannelSwitchInBuffer(ChannelSwitch[] css, ChannelSwitch cs){
:			// If space available in buffer
:			int x;
:			for (x=0; x<css.length; x++){
:				if (css[x]==null){
:					css[x] = cs;
:					return css;
:				}
:			}
:			ChannelSwitch[] newCss = new ChannelSwitch[css.length+2];
:			for (x=0; x<css.length; x++){
:				newCss[x] = css[x];
:			}
:			newCss[x+1] = cs;
:			return newCss;
:		}
:	
:	
:		private static int getDiffN(int beacon1N, int beacon2N) {
:			return beacon2N-beacon1N;
:		}
:	
:		private static long getDiffT(long beacon1T, long beacon2T) {
:			long diffT = beacon1T-beacon2T;
:			return (diffT < 0) ? -diffT : diffT;
:		}
:	
:		private static void toggleLed(int led){
:			int ledState = LED.getState((byte) led);
:			if (ledState==0){
:				LED.setState((byte) led, (byte) 1);
:			} else {
:				LED.setState((byte) led, (byte) 0);
:			}
:		}
:	
:		//	// Called on a timer alarm
:		//    public static void periodicSend(byte param, long time) {
:		//        
:		//        if(nc>0){
:		//	        // transmit a beacon 
:		//    	    radio.transmit(Device.ASAP|Radio.TXMODE_POWER_MAX, xmit, 0, 12, 0);
:		//        	// program new alarm
:		//        	tsend.setAlarmBySpan(wait);
:		//        	nc--;
:		//        	xmit[11]--;
:		//        }
:		//        else{
:		//        	//start reception phase
:		//	        radio.startRx(Device.ASAP, 0, Time.currentTicks()+wait);
:		//	        // turn green LED on 
:		//	        LED.setState((byte)1, (byte)1);
:		//	        
:		//        }
:		//        
:		//    }
:	}
S	M:/EMBS/EMBS_assessment2/part2/src/embs/SinkParameters.java
:	package embs;
:	
:	public class SinkParameters {
:	    private byte channel;
:	    private byte panid;
:	    private byte address;
:	    
:	    private int N = -1;
:	    private long T = -1;
:	    private int latestBeaconN = -1;
:	    private long latestBeaconT = -1;
:	    
:	    public SinkParameters(byte channel, byte panid, byte address){
:	    	this.channel =  channel;
:	    	this.panid =  panid;
:	    	this.address =  address;
:	    }
:	
:	    public void addBeacon(int n, long t){
:		    latestBeaconN=n;
:		    latestBeaconT=t;
:	    }
:	    
:		public void setN(int n) {this.N = n;}
:		public long getT() {return T;}
:		public void setT(long t) {this.T = t;}
:		public int getN() {return N;}
:		public byte getChannel() {return channel;}
:		public byte getPanid() {return panid;}
:		public byte getAddress() {return address;}
:	
:	
:		public int getBeaconN() {
:			return latestBeaconN;
:		}
:	
:		public void setBeaconN(int beaconN) {
:	
:			this.latestBeaconN = beaconN;
:		}
:	
:		public long getBeaconT() {
:			return latestBeaconT;
:		}
:	
:		public void setBeaconT(long beaconT) {
:	
:			this.latestBeaconT = beaconT;
:		}
:	    
:		
:	}
S	M:/EMBS/EMBS_assessment2/part2/src/embs/ChannelSwitch.java
:	package embs;
:	
:	/**
:	 * Class used to represent channel switch events
:	 */
:	public class ChannelSwitch {
:	
:	    // Time: time at which to switch from current channel to channel specified below
:	    private long time;
:	
:	    // Channel: channel to begin listening to at time Time
:	    private byte channel;
:	
:	    public ChannelSwitch(long time, byte channel) {
:	        this.time = time;
:	        this.channel = channel;
:	    }
:	
:	    public long getTime() {
:	        return time;
:	    }
:	    public void setTime(long time) {
:	        this.time = time;
:	    }
:	
:	    public void setChannel(byte channel) {
:	        this.channel = channel;
:	    }
:	    public byte getChannel() {
:	        return channel;
:	    }
:	}
S	M:/EMBS/EMBS_assessment2/part2/src/embs/Broadcast.java
:	package embs;
:	
:	/**
:	 * Represents a scheduled broadcast
:	 */
:	public class Broadcast{
:	    private long broadcastTime; // broadcastTime: time at which to broadcast
:	    private long deadline; // deadline: time at which
:	
:	    public Broadcast(long broadcastTime, long cutoffTime) {
:	        this.broadcastTime = broadcastTime;
:	        this.deadline = cutoffTime;
:	    }
:	
:	    public long getBroadcastTime() {
:	        return broadcastTime;
:	    }
:	    public void setBroadcastTime(long broadcastTime) {
:	        this.broadcastTime = broadcastTime;
:	    }
:	
:	    public long getDeadline() {
:	        return deadline;
:	    }
:	    public void setDeadline(long deadline) {
:	        this.deadline = deadline;
:	    }
:	}
