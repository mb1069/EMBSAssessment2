A!	SourceNode-18.0.37026	2.0	Java

X	c:01/000	com.ibm.saguaro.system.Assembly
X	c:01/001	com.ibm.saguaro.system.Util
X	c:01/002	com.ibm.saguaro.system.Timer
X	c:01/003	com.ibm.saguaro.system.Time
X	c:01/004	com.ibm.saguaro.system.MoteException
X	c:01/005	com.ibm.saguaro.system.Device
X	c:01/006	com.ibm.saguaro.system.SDev
X	c:01/007	com.ibm.saguaro.system.CDev
X	c:01/008	com.ibm.saguaro.system.OutOfResourcesException
X	c:01/009	com.ibm.saguaro.system.OsException
X	c:01/00A	com.ibm.saguaro.system.NullReferenceException
X	c:01/00B	com.ibm.saguaro.system.SystemException
X	c:01/00C	com.ibm.saguaro.system.Mote
X	c:01/00D	com.ibm.saguaro.system.LIP
X	c:01/00E	com.ibm.saguaro.system.LED
X	c:01/00F	com.ibm.saguaro.system.InvalidCastException
X	c:01/010	com.ibm.saguaro.system.IndexOutOfRangeException
X	c:01/011	com.ibm.saguaro.system.I2C
X	c:01/012	com.ibm.saguaro.system.GPIO
X	c:01/013	com.ibm.saguaro.system.Err
X	c:01/014	com.ibm.saguaro.system.DeviceException
X	c:01/015	com.ibm.saguaro.system.SPI
X	c:01/016	com.ibm.saguaro.system.Radio
X	c:01/017	com.ibm.saguaro.system.WLIP
X	c:01/018	com.ibm.saguaro.system.ArrayTypeMismatchException
X	c:01/019	com.ibm.saguaro.system.ArithmException
X	c:01/01A	com.ibm.saguaro.system.ArgumentException
X	c:01/01B	com.ibm.saguaro.system.AccessException
X	c:01/01C	com.ibm.saguaro.system.ADC
X	c:02/000	com.ibm.saguaro.logger.Logger

C!	c:005	embs.SourceNode	-1	0	c:000
R	timer0	r:com.ibm.saguaro.system.Timer	0	0
R	timer1	r:com.ibm.saguaro.system.Timer	0	1
R	timer2	r:com.ibm.saguaro.system.Timer	0	2
R	xmit	c[]	0	3
R	radio	r:com.ibm.saguaro.system.Radio	0	4
R	sinks	r:embs.SinkParameters[]	0	5
R	broadcasted	i[]	0	6
R	broadcasts	r:embs.Broadcast[]	0	7
F	currentSinkIndex	i	0	0
F	ownPanId	c	0	1
F	ownShortAddr	c	0	2
F	YELLOW_LED	c	0	3
F	GREEN_LED	c	0	4
F	RED_LED	c	0	5
F	N_MIN	i	0	6
F	N_MAX	i	0	7
F	T_MIN	l	0	8
F	T_MAX	l	0	10
F	previousChannel	i	0	12
F	TIME_ADJUSTMENT	l	0	13
F	lastChannelSwitch	l	0	15
F	wait	l	0	3327
H	BROADCASTING_on_channel$UTF8	b[]	0	66,82,79,65,68,67,65,83,84,73,78,71,33,32,111,110,32,99,104,97,110,110,101,108,58,32
H	Broadcast_results$UTF8	b[]	0	66,114,111,97,100,99,97,115,116,32,114,101,115,117,108,116,115,58,32
H	Calculated_T$UTF8	b[]	0	67,97,108,99,117,108,97,116,101,100,32,84,58,32
H	Changed_channel_to$UTF8	b[]	0	67,104,97,110,103,101,100,32,99,104,97,110,110,101,108,32,116,111,58,32
H	Finished_broadcast$UTF8	b[]	0	70,105,110,105,115,104,101,100,32,98,114,111,97,100,99,97,115,116,46
H	PREPARING_BROADCAST_for_channel$UTF8	b[]	0	80,82,69,80,65,82,73,78,71,32,66,82,79,65,68,67,65,83,84,33,32,102,111,114,32,99,104,97,110,110,101,108,58,32
H	Received_packet_c$UTF8	b[]	0	82,101,99,101,105,118,101,100,32,112,97,99,107,101,116,32,99,58
H	at_time$UTF8	b[]	0	97,116,32,116,105,109,101,58,32
H	at_time0$UTF8	b[]	0	32,97,116,32,116,105,109,101,58,32
H	n$UTF8	b[]	0	32,110,58
H	s$UTF8	b[]	0	47
M!	SourceNode(r:embs.SourceNode)v	-1	m:0192	00324	4
M	access$000(i,c[],i,i,l)i	-1	m:0194	00328	14
M	access$100(i,c[],i,i,l)i	-1	m:019B	00336	14
M!	broadcastToSink(c,l)v	-1	m:01A2	00344	98
M	createNextBroadcast(i,l,i,l,l)v	-1	m:01D3	003A6	40
M	getDiffN(i,i)i	-1	m:01E7	003CE	8
M	getDiffT(l,l)l	-1	m:01EB	003D6	26
M	onReceive(i,c[],i,i,l)i	-1	m:01F8	003F0	270
M	onTransmit(i,c[],i,i,l)i	-1	m:027F	004FE	74
M	pickNextChannel(i)c	-1	m:02A4	00548	16
M	setChannel(i)v	-1	m:02AC	00558	128
M	setLEDListening(c)v	-1	m:02EC	005D8	60
M	setupBroadcastAndCallBack(l,l,i,l)v	-1	m:030A	00614	70
M	startListening()v	-1	m:032D	0065A	34
M	toggleLed(i)v	-1	m:033E	0067C	28

C!	c:007	embs.SinkParameters	1	1	c:000
f	broadcastSet	z	1	0
f	beaconT	l	1	1
f	beaconN	i	1	3
f	T	l	1	4
f	N	i	1	6
f	address	c	1	7
f	panid	c	1	8
f	channel	c	1	9
m!	addBeacon(i,l)v	1	m:0158	002B0	12	2
m!	getAddress()c	1	m:015E	002BC	8	9
m!	getBeaconN()i	1	m:0162	002C4	8	10
m!	getBeaconT()l	1	m:0166	002CC	8	12
m!	getBroadcastSet()z	1	m:016A	002D4	8	0
m!	getChannel()c	1	m:016E	002DC	8	7
m!	getN()i	1	m:0172	002E4	8	6
m!	getPanid()c	1	m:0176	002EC	8	8
m!	getT()l	1	m:017A	002F4	8	4
m!	setBeaconN(i)v	1	m:017E	002FC	8	11
m!	setBeaconT(l)v	1	m:0182	00304	8	13
m!	setBroadcastSet(z)v	1	m:0186	0030C	8	1
m!	setN(i)v	1	m:018A	00314	8	3
m!	setT(l)v	1	m:018E	0031C	8	5
M!	SinkParameters(r:embs.SinkParameters,c,c,c)v	1	m:0142	00284	44

C!	c:014	embs.ChannelSwitch	2	2	c:000
f	channel	c	2	0
f	time	l	2	1
m!	getChannel()c	2	m:0132	00264	8	3
m!	getTime()l	2	m:0136	0026C	8	0
m!	setChannel(c)v	2	m:013A	00274	8	2
m!	setTime(l)v	2	m:013E	0027C	8	1
M!	ChannelSwitch(r:embs.ChannelSwitch,l,c)v	2	m:012C	00258	12

C!	c:019	embs.Broadcast	3	3	c:000
f	broadcastTime	l	3	0
m!	getBroadcastTime()l	3	m:0124	00248	8	0
m!	setBroadcastTime(l)v	3	m:0128	00250	8	1
M!	Broadcast(r:embs.Broadcast,l)v	3	m:0120	00240	8

C	c:01D	com.ibm.saguaro.system.$tatics	-1	-1	c:01/000
r	embs.SourceNode.timer0	r:com.ibm.saguaro.system.Timer	-1	0
r	embs.SourceNode.timer1	r:com.ibm.saguaro.system.Timer	-1	1
r	embs.SourceNode.timer2	r:com.ibm.saguaro.system.Timer	-1	2
r	embs.SourceNode.xmit	c[]	-1	3
r	embs.SourceNode.radio	r:com.ibm.saguaro.system.Radio	-1	4
r	embs.SourceNode.sinks	r:embs.SinkParameters[]	-1	5
r	embs.SourceNode.broadcasted	i[]	-1	6
r	embs.SourceNode.broadcasts	r:embs.Broadcast[]	-1	7
f	embs.SourceNode.currentSinkIndex	i	-1	0
f	embs.SourceNode.ownPanId	c	-1	1
f	embs.SourceNode.ownShortAddr	c	-1	2
f	embs.SourceNode.YELLOW_LED	c	-1	3
f	embs.SourceNode.GREEN_LED	c	-1	4
f	embs.SourceNode.RED_LED	c	-1	5
f	embs.SourceNode.N_MIN	i	-1	6
f	embs.SourceNode.N_MAX	i	-1	7
f	embs.SourceNode.T_MIN	l	-1	8
f	embs.SourceNode.T_MAX	l	-1	10
f	embs.SourceNode.previousChannel	i	-1	12
f	embs.SourceNode.TIME_ADJUSTMENT	l	-1	13
f	embs.SourceNode.lastChannelSwitch	l	-1	15
M	__init()v	-1	m:003E	0007C	452

c	00089	0	16	0	16	0	m:003E
c	00093	0	18	0	18	0	m:003E
c	000CA	0	23	0	23	0	m:003E
c	000CE	0	24	0	24	0	m:003E
c	000D3	0	25	0	25	0	m:003E
c	000D7	0	28	0	28	0	m:003E
c	000DB	0	29	0	29	0	m:003E
c	000DF	0	30	0	30	0	m:003E
c	000E3	0	32	0	32	0	m:003E
c	000E7	0	33	0	33	0	m:003E
c	000EC	0	34	0	34	0	m:003E
c	000F4	0	35	0	35	0	m:003E
c	000FC	0	37	0	37	0	m:003E
c	0010D	0	40	0	40	0	m:003E
c	00114	0	43	0	43	0	m:003E
c	0011C	0	44	0	44	0	m:003E
c	00124	0	49	0	49	0	m:003E
c	00130	0	51	0	51	0	m:003E
c	00135	0	52	0	52	0	m:003E
c	0013A	0	53	0	53	0	m:003E
c	0013F	0	55	0	55	0	m:003E
c	00149	0	56	0	56	0	m:003E
c	00150	0	57	0	57	0	m:003E
c	0015A	0	63	0	63	0	m:003E
c	00164	0	64	0	64	0	m:003E
c	0016B	0	65	0	65	0	m:003E
c	00175	0	71	0	71	0	m:003E
c	0017F	0	72	0	72	0	m:003E
c	00186	0	73	0	73	0	m:003E
c	00190	0	80	0	80	0	m:003E
c	001A0	0	82	0	82	0	m:003E
c	001B1	0	83	0	83	0	m:003E
c	001C1	0	86	0	86	0	m:003E
c	001C7	0	87	0	87	0	m:003E
c	001CD	0	88	0	88	0	m:003E
c	001D5	0	89	0	89	0	m:003E
c	001E7	0	90	0	90	0	m:003E
c	001F0	0	91	0	91	0	m:003E
c	00203	0	92	0	92	0	m:003E
c	00216	0	95	0	95	0	m:003E
c	00220	0	101	0	101	0	m:003E
c	0022A	0	107	0	107	0	m:003E
c	0023F	0	108	0	108	0	m:003E
e	00240	m:003E
c	00243	3	10	0	10	0	m:0120
l!	00243	00248	r:embs.Broadcast	this	m:0120	0
l!	00243	00248	l	broadcastTime	m:0120	1
c	00247	3	11	0	11	0	m:0120
e!	00248	m:0120
c	0024B	3	14	0	14	0	m:0124
l	0024B	0024F	r:embs.Broadcast	this	m:0124	0
e!	00250	m:0124
c	00253	3	17	0	17	0	m:0128
l!	00253	00258	r:embs.Broadcast	this	m:0128	0
l	00253	00258	l	broadcastTime	m:0128	1
c	00257	3	18	0	18	0	m:0128
e!	00258	m:0128
c	0025B	2	15	0	15	0	m:012C
l!	0025B	00264	r:embs.ChannelSwitch	this	m:012C	0
l!	0025B	00264	l	time	m:012C	1
l	0025B	00264	c	channel	m:012C	3
c	0025F	2	16	0	16	0	m:012C
c	00263	2	17	0	17	0	m:012C
e!	00264	m:012C
c	00267	2	30	0	30	0	m:0132
l	00267	0026B	r:embs.ChannelSwitch	this	m:0132	0
e!	0026C	m:0132
c	0026F	2	20	0	20	0	m:0136
l	0026F	00273	r:embs.ChannelSwitch	this	m:0136	0
e!	00274	m:0136
c	00277	2	27	0	27	0	m:013A
l!	00277	0027C	r:embs.ChannelSwitch	this	m:013A	0
l	00277	0027C	c	channel	m:013A	1
c	0027B	2	28	0	28	0	m:013A
e!	0027C	m:013A
c	0027F	2	23	0	23	0	m:013E
l!	0027F	00284	r:embs.ChannelSwitch	this	m:013E	0
l	0027F	00284	l	time	m:013E	1
c	00283	2	24	0	24	0	m:013E
e!	00284	m:013E
c	00287	1	10	0	10	0	m:0142
l!	00287	002B0	r:embs.SinkParameters	this	m:0142	0
l!	00287	002B0	c	channel	m:0142	1
l!	00287	002B0	c	panid	m:0142	2
l!	00287	002B0	c	address	m:0142	3
c	0028B	1	11	0	11	0	m:0142
c	00293	1	12	0	12	0	m:0142
c	00297	1	13	0	13	0	m:0142
c	0029F	1	14	0	14	0	m:0142
c	002A3	1	17	0	17	0	m:0142
c	002A7	1	18	0	18	0	m:0142
c	002AB	1	19	0	19	0	m:0142
c	002AF	1	20	0	20	0	m:0142
e!	002B0	m:0142
c	002B3	1	31	0	31	0	m:0158
l!	002B3	002BC	r:embs.SinkParameters	this	m:0158	0
l!	002B3	002BC	i	n	m:0158	1
l	002B3	002BC	l	t	m:0158	2
c	002B7	1	32	0	32	0	m:0158
c	002BB	1	33	0	33	0	m:0158
e!	002BC	m:0158
c	002BF	1	41	0	41	0	m:015E
l	002BF	002C3	r:embs.SinkParameters	this	m:015E	0
e!	002C4	m:015E
c	002C7	1	44	0	44	0	m:0162
l	002C7	002CB	r:embs.SinkParameters	this	m:0162	0
e!	002CC	m:0162
c	002CF	1	50	0	50	0	m:0166
l	002CF	002D3	r:embs.SinkParameters	this	m:0166	0
e!	002D4	m:0166
c	002D7	1	23	0	23	0	m:016A
l	002D7	002DB	r:embs.SinkParameters	this	m:016A	0
e!	002DC	m:016A
c	002DF	1	39	0	39	0	m:016E
l	002DF	002E3	r:embs.SinkParameters	this	m:016E	0
e!	002E4	m:016E
c	002E7	1	38	0	38	0	m:0172
l	002E7	002EB	r:embs.SinkParameters	this	m:0172	0
e!	002EC	m:0172
c	002EF	1	40	0	40	0	m:0176
l	002EF	002F3	r:embs.SinkParameters	this	m:0176	0
e!	002F4	m:0176
c	002F7	1	36	0	36	0	m:017A
l	002F7	002FB	r:embs.SinkParameters	this	m:017A	0
e!	002FC	m:017A
c	002FF	1	47	0	47	0	m:017E
l!	002FF	00304	r:embs.SinkParameters	this	m:017E	0
l	002FF	00304	i	beaconN	m:017E	1
c	00303	1	48	0	48	0	m:017E
e!	00304	m:017E
c	00307	1	53	0	53	0	m:0182
l!	00307	0030C	r:embs.SinkParameters	this	m:0182	0
l	00307	0030C	l	beaconT	m:0182	1
c	0030B	1	54	0	54	0	m:0182
e!	0030C	m:0182
c	0030F	1	27	0	27	0	m:0186
l!	0030F	00314	r:embs.SinkParameters	this	m:0186	0
l	0030F	00314	z	value	m:0186	1
c	00313	1	28	0	28	0	m:0186
e!	00314	m:0186
c	00317	1	35	0	35	0	m:018A
l!	00317	0031C	r:embs.SinkParameters	this	m:018A	0
l	00317	0031C	i	n	m:018A	1
e!	0031C	m:018A
c	0031F	1	37	0	37	0	m:018E
l!	0031F	00324	r:embs.SinkParameters	this	m:018E	0
l	0031F	00324	l	t	m:018E	1
e!	00324	m:018E
c	00327	0	8	0	8	0	m:0192
l!	00327	00328	r:embs.SourceNode	this	m:0192	0
e!	00328	m:0192
c	0032B	0	8	0	8	0	m:0194
l	0032B	00335	i	x0	m:0194	0
l	0032B	00335	c[]	x1	m:0194	1
l	0032B	00335	i	x2	m:0194	2
l	0032B	00335	i	x3	m:0194	3
l	0032B	00335	l	x4	m:0194	4
e	00336	m:0194
c	00339	0	8	0	8	0	m:019B
l	00339	00343	i	x0	m:019B	0
l	00339	00343	c[]	x1	m:019B	1
l	00339	00343	i	x2	m:019B	2
l	00339	00343	i	x3	m:019B	3
l	00339	00343	l	x4	m:019B	4
e	00344	m:019B
c	00347	0	152	0	152	0	m:01A2
l!	00347	003A6	c	sinkIndex	m:01A2	0
l!	00347	003A6	l	time	m:01A2	1
c	0034D	0	153	0	153	0	m:01A2
c	00353	0	154	0	154	0	m:01A2
c	0035E	0	155	0	155	0	m:01A2
c	00364	0	156	0	156	0	m:01A2
c	00368	0	157	0	157	0	m:01A2
c	0036C	0	159	0	159	0	m:01A2
c	00370	0	160	0	160	0	m:01A2
c	00379	0	161	0	161	0	m:01A2
c	0037D	0	163	0	163	0	m:01A2
c	0039B	0	164	0	164	0	m:01A2
c	003A1	0	165	0	165	0	m:01A2
c	003A5	0	168	0	168	0	m:01A2
e!	003A6	m:01A2
c	003A9	0	228	0	228	0	m:01D3
l	003A9	003CE	i	beaconN	m:01D3	0
l	003A9	003CE	l	beaconT	m:01D3	1
l	003A9	003CE	i	channel	m:01D3	3
l	003A9	003CE	l	t	m:01D3	4
l	003A9	003CE	l	currentTimeMS	m:01D3	6
c	003B0	0	229	0	229	0	m:01D3
l	003B0	003CE	l	broadcastTimeByMSSpan	m:01D3	8
c	003B8	0	230	0	230	0	m:01D3
l	003B8	003CE	l	deadline	m:01D3	10
c	003C2	0	231	0	231	0	m:01D3
c	003CD	0	233	0	233	0	m:01D3
e	003CE	m:01D3
c	003D1	0	281	0	281	0	m:01E7
l	003D1	003D5	i	beacon1N	m:01E7	0
l	003D1	003D5	i	beacon2N	m:01E7	1
e	003D6	m:01E7
c	003D9	0	285	0	285	0	m:01EB
l	003D9	003F0	l	beacon1T	m:01EB	0
l	003D9	003F0	l	beacon2T	m:01EB	2
c	003DE	0	286	0	286	0	m:01EB
l	003DE	003F0	l	diffT	m:01EB	4
e	003F0	m:01EB
c	003F3	0	113	0	113	0	m:01F8
l	003F3	004FD	i	flags	m:01F8	0
l	003F3	004FD	c[]	data	m:01F8	1
l	003F3	004FD	i	len	m:01F8	2
l	003F3	004FD	i	info	m:01F8	3
l	003F3	004FD	l	time	m:01F8	4
c	003F6	0	114	0	114	0	m:01F8
c	003F8	0	117	0	117	0	m:01F8
c	003FE	0	118	0	118	0	m:01F8
l	003FE	004FD	i	n	m:01F8	6
c	00404	0	119	0	119	0	m:01F8
c	00411	0	120	0	120	0	m:01F8
c	00417	0	121	0	121	0	m:01F8
c	0041F	0	122	0	122	0	m:01F8
c	00423	0	123	0	123	0	m:01F8
c	00429	0	126	0	126	0	m:01F8
l	00429	004FD	l	currentTime	m:01F8	7
c	00436	0	128	0	128	0	m:01F8
c	00448	0	129	0	129	0	m:01F8
c	00460	0	131	0	131	0	m:01F8
c	0047F	0	132	0	132	0	m:01F8
c	0048F	0	133	0	133	0	m:01F8
l	0048F	004E4	i	diffN	m:01F8	9
c	004A0	0	134	0	134	0	m:01F8
l	004A0	004E4	l	diffT	m:01F8	10
c	004B4	0	135	0	135	0	m:01F8
c	004BC	0	136	0	136	0	m:01F8
l	004BC	004E4	l	t	m:01F8	12
c	004C8	0	137	0	137	0	m:01F8
c	004CE	0	138	0	138	0	m:01F8
c	004D3	0	139	0	139	0	m:01F8
c	004D7	0	140	0	140	0	m:01F8
c	004E4	0	145	0	145	0	m:01F8
c	004EF	0	146	0	146	0	m:01F8
c	004FB	0	147	0	147	0	m:01F8
e	004FE	m:01F8
c	00501	0	175	0	175	0	m:027F
l	00501	00548	i	flags	m:027F	0
l	00501	00548	c[]	data	m:027F	1
l	00501	00548	i	len	m:027F	2
l	00501	00548	i	info	m:027F	3
l	00501	00548	l	time	m:027F	4
c	0050C	0	176	0	176	0	m:027F
c	00515	0	177	0	177	0	m:027F
c	00518	0	178	0	178	0	m:027F
c	0051E	0	179	0	179	0	m:027F
c	00526	0	180	0	180	0	m:027F
c	0052C	0	181	0	181	0	m:027F
c	00534	0	182	0	182	0	m:027F
c	0053A	0	183	0	183	0	m:027F
c	00542	0	184	0	184	0	m:027F
c	00546	0	185	0	185	0	m:027F
e	00548	m:027F
c	0054B	0	189	0	189	0	m:02A4
l	0054B	00558	i	currSinkIndex	m:02A4	0
c	0054E	0	190	0	190	0	m:02A4
c	00550	0	191	0	191	0	m:02A4
c	00554	0	192	0	192	0	m:02A4
c	00556	0	194	0	194	0	m:02A4
e	00558	m:02A4
c	0055B	0	201	0	201	0	m:02AC
l	0055B	005D7	i	sinkIndex	m:02AC	0
c	00565	0	202	0	202	0	m:02AC
c	0056B	0	205	0	205	0	m:02AC
c	0057B	0	206	0	206	0	m:02AC
c	00584	0	207	0	207	0	m:02AC
c	00595	0	209	0	209	0	m:02AC
c	005A3	0	210	0	210	0	m:02AC
c	005B2	0	213	0	213	0	m:02AC
c	005B6	0	214	0	214	0	m:02AC
c	005BB	0	216	0	216	0	m:02AC
c	005C1	0	217	0	217	0	m:02AC
c	005CC	0	218	0	218	0	m:02AC
c	005D2	0	219	0	219	0	m:02AC
c	005D6	0	220	0	220	0	m:02AC
e	005D8	m:02AC
c	005DB	0	299	0	299	0	m:02EC
l	005DB	00614	c	led	m:02EC	0
c	005FE	0	300	0	300	0	m:02EC
l	005FE	0060E	c	b	m:02EC	4
c	00602	0	301	0	301	0	m:02EC
c	00609	0	303	0	303	0	m:02EC
c	0060E	0	299	0	299	0	m:02EC
c	00613	0	306	0	306	0	m:02EC
e	00614	m:02EC
c	00617	0	244	0	244	0	m:030A
l	00617	00659	l	broadcastTime	m:030A	0
l	00617	00659	l	deadline	m:030A	2
l	00617	00659	i	sinkIndex	m:030A	4
l	00617	00659	l	currentTimeMS	m:030A	5
c	0061D	0	245	0	245	0	m:030A
c	00621	0	246	0	246	0	m:030A
c	00625	0	248	0	248	0	m:030A
c	00633	0	250	0	250	0	m:030A
c	0063E	0	251	0	251	0	m:030A
c	00640	0	253	0	253	0	m:030A
c	0064B	0	254	0	254	0	m:030A
c	0064D	0	256	0	256	0	m:030A
c	00658	0	259	0	259	0	m:030A
e	0065A	m:030A
c	0065D	0	224	0	224	0	m:032D
c	0067A	0	225	0	225	0	m:032D
e	0067C	m:032D
c	0067F	0	290	0	290	0	m:033E
l	0067F	00697	i	led	m:033E	0
c	00685	0	291	0	291	0	m:033E
l	00685	00697	i	ledState	m:033E	1
c	00688	0	292	0	292	0	m:033E
c	00690	0	294	0	294	0	m:033E
c	00696	0	296	0	296	0	m:033E
e	00698	m:033E
S	M:/EMBS/EMBS_assessment2/part2/src/embs/SourceNode.java
:	package embs;
:	
:	import com.ibm.saguaro.system.*;
:	import com.ibm.saguaro.logger.*;
:	//import embs.SinkParameter;
:	
:	
:	public class SourceNode {
:	
:		static Timer  timer0;
:		static Timer  timer1;
:		static Timer  timer2;
:		
:		static byte[] xmit;
:		static long   wait;
:		static Radio radio = new Radio();
:		
:		private static SinkParameters[] sinks = {
:			new SinkParameters((byte) 11,(byte)  0x11,(byte)  0x11), 
:			new SinkParameters((byte) 12, (byte) 0x12, (byte) 0x12),
:			new SinkParameters((byte) 13, (byte) 0x13, (byte) 0x13)};
:		// settings for SourceNode A
:		static int currentSinkIndex = 0;
:		static byte ownPanId = 0x11;
:		static byte ownShortAddr = 0x1;
:	
:	
:		static byte YELLOW_LED = (byte) 0;
:		static byte GREEN_LED = (byte) 1;
:		static byte RED_LED = (byte) 2;
:	
:		static int N_MIN = 2;
:		static int N_MAX = 10;
:		static long T_MIN = 250;
:		static long T_MAX = 1500;
:		
:		static int[] broadcasted = new int[]{0,0,0};
:	
:	//	static ChannelSwitch[] channelSwitches = new ChannelSwitch[3];
:		static Broadcast[] broadcasts = new Broadcast[3];
:	
:		static int previousChannel;
:		static long TIME_ADJUSTMENT = 3;
:		static long lastChannelSwitch = 0;
:		
:		
:		static {
:			// Open the default radio
:			radio.open(Radio.DID, null, 0, 0);
:	
:			LED.setState((byte) 0, (byte) 1);
:			LED.setState((byte) 1, (byte) 1);
:			LED.setState((byte) 2, (byte) 1);
:	
:			timer0 = new Timer();
:			timer0.setParam((byte) 0);
:			timer0.setCallback(new TimerEvent(null){
:				public void invoke(byte param, long time){
:					SourceNode.broadcastToSink(param, time);
:				}
:			});
:			
:			timer1 = new Timer();
:			timer1.setParam((byte) 1);
:			timer1.setCallback(new TimerEvent(null){
:				public void invoke(byte param, long time){
:					SourceNode.broadcastToSink(param, time);
:				}
:			});
:			
:			timer2 = new Timer();
:			timer2.setParam((byte) 2);
:			timer2.setCallback(new TimerEvent(null){
:				public void invoke(byte param, long time){
:					SourceNode.broadcastToSink(param, time);
:				}
:			});
:	
:			// Set channel 
:			radio.setChannel((byte) sinks[currentSinkIndex].getChannel());
:			// Set the PAN ID and the short address
:			radio.setPanId(sinks[currentSinkIndex].getPanid(), true);
:			radio.setShortAddr(sinks[currentSinkIndex].getAddress());
:	
:			// Prepare beacon frame with source and destination addressing
:			xmit = new byte[12];
:			xmit[0] = Radio.FCF_BEACON;
:			xmit[1] = Radio.FCA_SRC_SADDR|Radio.FCA_DST_SADDR;
:			Util.set16le(xmit, 3, sinks[currentSinkIndex].getPanid()); // destination PAN address 
:			Util.set16le(xmit, 5, 0xFFFF); // broadcast address 
:			Util.set16le(xmit, 7, sinks[currentSinkIndex].getPanid()); // own PAN address 
:			Util.set16le(xmit, 9, sinks[currentSinkIndex].getAddress()); // own short address 
:	
:			// register delegate for received frames
:			radio.setRxHandler(new DevCallback(null){
:				public int invoke (int flags, byte[] data, int len, int info, long time) {
:					return  SourceNode.onReceive(flags, data, len, info, time);
:				}
:			});
:	
:			radio.setTxHandler(new DevCallback(null){
:				public int invoke(int flags, byte[] data, int len, int info, long time) {
:					return SourceNode.onTransmit(flags, data, len, info, time);
:				}
:			});
:	//		radio.setRxMode(Radio.RXMODE_PROMISCUOUS);
:			radio.startRx(Device.ASAP, 0, Time.currentTicks()+0x7FFFFFFF);
:		}
:	
:		// Called when a frame is received or at the end of a reception period 
:		private static int onReceive (int flags, byte[] data, int len, int info, long time) {
:	
:			if (data == null) { // marks end of reception period
:				return 0;
:			}
:				
:			int n = data[11];
:			Logger.appendString(csr.s2b("Received packet c:"));
:			Logger.appendByte(sinks[currentSinkIndex].getChannel());
:			Logger.appendString(csr.s2b(" n:"));
:			Logger.appendByte(data[11]);
:			Logger.flush(Mote.WARN);
:			long currentTime = Time.currentTime(Time.MILLISECS);
:			
:	
:			if (!sinks[currentSinkIndex].getBroadcastSet()){
:				//If T is known for sink
:				if (sinks[currentSinkIndex].getT()!=-1){
:					createNextBroadcast(n, currentTime, currentSinkIndex, sinks[currentSinkIndex].getT(), currentTime);
:				} else {
:					if (sinks[currentSinkIndex].getBeaconT()!=-1 && sinks[currentSinkIndex].getBeaconN()!=-1){
:						int diffN = getDiffN(sinks[currentSinkIndex].getBeaconN(), n);
:						long diffT = getDiffT(sinks[currentSinkIndex].getBeaconT(), currentTime);
:						if (diffN>0 && diffT-TIME_ADJUSTMENT <=(T_MAX*diffN)){
:							long t = diffT/diffN;
:							sinks[currentSinkIndex].setT(t);
:							Logger.appendString(csr.s2b("Calculated T: "));
:							Logger.appendLong(t);
:							Logger.flush(Mote.WARN);
:							createNextBroadcast(n, currentTime, currentSinkIndex, t, currentTime);
:						}
:					}
:				}
:			}
:			sinks[currentSinkIndex].setBeaconN(n);
:			sinks[currentSinkIndex].setBeaconT(currentTime);
:			return 0;
:		}
:	
:	
:		protected static void broadcastToSink(byte sinkIndex, long time){
:			radio.stopRx();
:			Logger.appendString(csr.s2b("BROADCASTING! on channel: "));
:			Logger.appendByte(sinks[sinkIndex].getChannel());
:			Logger.appendString(csr.s2b("at time: "));
:			Logger.appendLong(time);
:			Logger.flush(Mote.WARN);
:			
:			setChannel((int) sinkIndex);
:			broadcasted[sinkIndex]++;
:			previousChannel = (int) sinkIndex;
:			
:			radio.transmit(Device.TIMED, xmit, 0, 12, Time.currentTicks()+Time.toTickSpan(Time.MILLISECS, T_MIN/2));
:			Logger.appendString(csr.s2b("Finished broadcast."));
:			Logger.flush(Mote.INFO);
:			
:			
:		}
:	
:		private static int onTransmit(int flags, byte[] data, int len, int info, long time) {
:	
:			//TODO schedule listen callback
:	//		Logger.appendInt(currentSinkIndex);
:	//		Logger.flush(Mote.ERROR);
:			sinks[currentSinkIndex].setBroadcastSet(false);
:			setChannel(pickNextChannel(currentSinkIndex));
:			startListening();
:			Logger.appendString(csr.s2b("Broadcast results: "));
:			Logger.appendInt(broadcasted[0]);
:			Logger.appendString(csr.s2b("/"));
:			Logger.appendInt(broadcasted[1]);
:			Logger.appendString(csr.s2b("/"));
:			Logger.appendInt(broadcasted[2]);
:			Logger.flush(Mote.WARN);
:			return 0;
:		}
:		
:		private static byte pickNextChannel(int currSinkIndex){
:			if (currSinkIndex==0){
:				return 1;
:			} else if (currSinkIndex==1){
:				return 2;
:			} else {
:				return 0;
:			}
:		}
:		
:		
:		private static void setChannel(int sinkIndex){
:	
:			if (radio.getState()==Device.S_RXEN){
:				radio.stopRx();
:			}
:			
:			Util.set16le(xmit, 3, sinks[sinkIndex].getPanid()); // destination PAN address 
:			Util.set16le(xmit, 5, 0xFFFF); // broadcast address 
:			Util.set16le(xmit, 7, sinks[sinkIndex].getPanid()); // own PAN address 
:			
:			radio.setChannel((byte) sinks[sinkIndex].getChannel());
:			radio.setPanId(sinks[sinkIndex].getPanid(), true);
:	//		radio.setShortAddr(sinks[sinkIndex].getAddress());
:					
:			currentSinkIndex = sinkIndex;
:			setLEDListening((byte) sinkIndex);
:	
:			Logger.appendString(csr.s2b("Changed channel to: "));
:			Logger.appendByte(sinks[sinkIndex].getChannel());
:			Logger.appendString(csr.s2b(" at time: "));
:			Logger.flush(Mote.WARN);
:		}
:	
:		
:		private static void startListening(){
:			radio.startRx(Device.TIMED, Time.currentTicks()+Time.toTickSpan(Time.MILLISECS, 10), Time.currentTicks()+0x7FFFFFFF);
:		}
:		
:		private static void createNextBroadcast(int beaconN, long beaconT, int channel, long t, long currentTimeMS) {
:			long broadcastTimeByMSSpan = (t  * beaconN);
:			long deadline = broadcastTimeByMSSpan + T_MIN;
:			setupBroadcastAndCallBack(broadcastTimeByMSSpan, deadline, channel, currentTimeMS);
:			sinks[currentSinkIndex].setBroadcastSet(true);
:	//		setChannel(pickNextChannel());
:		}
:	
:		private static void setupBroadcastAndCallBack(long broadcastTime, long deadline, int sinkIndex, long currentTimeMS){
:	//		ChannelSwitch cs = new ChannelSwitch(broadcastTime, sinks[sinkIndex].getChannel());
:	//		for (ChannelSwitch c: channelSwitches){
:	//			if (c!=null && c.getTime()==broadcastTime){
:	//				return;
:	//			}
:	//		}
:	//		channelSwitches = insertChannelSwitchInBuffer(channelSwitches, cs);
:			
:			Logger.appendString(csr.s2b("PREPARING BROADCAST! for channel: "));
:			Logger.appendInt(sinkIndex);
:			Logger.flush(Mote.WARN);
:			
:			switch (sinkIndex){
:			case 0:
:				timer0.setAlarmBySpan(Time.toTickSpan(Time.MILLISECS, broadcastTime));
:				break;
:			case 1:
:				timer1.setAlarmBySpan(Time.toTickSpan(Time.MILLISECS, broadcastTime));
:				break;
:			case 2:
:				timer2.setAlarmBySpan(Time.toTickSpan(Time.MILLISECS, broadcastTime));
:				break;
:			}
:		}
:		
:		
:	//	private static ChannelSwitch[] insertChannelSwitchInBuffer(ChannelSwitch[] css, ChannelSwitch cs){
:	//		// If space available in buffer
:	//		int x;
:	//		for (x=0; x<css.length; x++){
:	//			if (css[x]==null){
:	//				css[x] = cs;
:	//				return css;
:	//			}
:	//		}
:	//		ChannelSwitch[] newCss = new ChannelSwitch[css.length+2];
:	//		for (x=0; x<css.length; x++){
:	//			newCss[x] = css[x];
:	//		}
:	//		newCss[x+1] = cs;
:	//		return newCss;
:	//	}
:	
:	
:		private static int getDiffN(int beacon1N, int beacon2N) {
:			return beacon1N - beacon2N;
:		}
:	
:		private static long getDiffT(long beacon1T, long beacon2T) {
:			long diffT = beacon1T-beacon2T;
:			return (diffT < 0) ? -diffT : diffT;
:		}
:	
:		private static void toggleLed(int led){
:			int ledState = LED.getState((byte) led);
:			if (ledState==0){
:				LED.setState((byte) led, (byte) 1);
:			} else {
:				LED.setState((byte) led, (byte) 0);
:			}
:		}
:	
:		private static void setLEDListening(byte led){
:			for (byte b: new byte[]{YELLOW_LED, RED_LED, GREEN_LED}){
:				if (b==led){
:					LED.setState(b, (byte) 1);
:				} else {
:					LED.setState(b, (byte) 0);
:				}
:			}
:		}
:		
:		//	// Called on a timer alarm
:		//    public static void periodicSend(byte param, long time) {
:		//        
:		//        if(nc>0){
:		//	        // transmit a beacon 
:		//    	    radio.transmit(Device.ASAP|Radio.TXMODE_POWER_MAX, xmit, 0, 12, 0);
:		//        	// program new alarm
:		//        	tsend.setAlarmBySpan(wait);
:		//        	nc--;
:		//        	xmit[11]--;
:		//        }
:		//        else{
:		//        	//start reception phase
:		//	        radio.startRx(Device.ASAP, 0, Time.currentTicks()+wait);
:		//	        // turn green LED on 
:		//	        LED.setState((byte)1, (byte)1);
:		//	        
:		//        }
:		//        
:		//    }
:	}
S	M:/EMBS/EMBS_assessment2/part2/src/embs/SinkParameters.java
:	package embs;
:	
:	import com.ibm.saguaro.system.Timer;
:	
:	public class SinkParameters {
:	    private byte channel;
:	    private byte panid;
:	    private byte address;
:	    
:	    private int N = -1;
:	    private long T = -1;
:	    private int beaconN = -1;
:	    private long beaconT = -1;
:	    private boolean broadcastSet = false;
:	    
:	    public SinkParameters(byte channel, byte panid, byte address){
:	    	this.channel =  channel;
:	    	this.panid =  panid;
:	    	this.address =  address;
:	    }
:	
:	    public boolean getBroadcastSet(){
:	    	return this.broadcastSet;
:	    }
:	    
:	    public void setBroadcastSet(boolean value){
:	    	this.broadcastSet = value;
:	    }
:	    
:	    public void addBeacon(int n, long t){
:	    	this.beaconN = n;
:	    	this.beaconT = t;
:	    }
:	    
:		public void setN(int n) {this.N = n;}
:		public long getT() {return T;}
:		public void setT(long t) {this.T = t;}
:		public int getN() {return N;}
:		public byte getChannel() {return channel;}
:		public byte getPanid() {return panid;}
:		public byte getAddress() {return address;}
:	
:		public int getBeaconN() {
:			return beaconN;
:		}
:		public void setBeaconN(int beaconN) {
:			this.beaconN = beaconN;
:		}
:		public long getBeaconT() {
:			return beaconT;
:		}
:		public void setBeaconT(long beaconT) {
:			this.beaconT = beaconT;
:		}
:	  
:		
:	}
S	M:/EMBS/EMBS_assessment2/part2/src/embs/ChannelSwitch.java
:	package embs;
:	
:	/**
:	 * Class used to represent channel switch events
:	 */
:	public class ChannelSwitch {
:	
:	    // Time: time at which to switch from current channel to channel specified below
:	    private long time;
:	
:	    // Channel: channel to begin listening to at time Time
:	    private byte channel;
:	
:	    public ChannelSwitch(long time, byte channel) {
:	        this.time = time;
:	        this.channel = channel;
:	    }
:	
:	    public long getTime() {
:	        return time;
:	    }
:	    public void setTime(long time) {
:	        this.time = time;
:	    }
:	
:	    public void setChannel(byte channel) {
:	        this.channel = channel;
:	    }
:	    public byte getChannel() {
:	        return channel;
:	    }
:	}
S	M:/EMBS/EMBS_assessment2/part2/src/embs/Broadcast.java
:	package embs;
:	
:	/**
:	 * Represents a scheduled broadcast
:	 */
:	public class Broadcast{
:	    private long broadcastTime; // broadcastTime: time at which to broadcast
:	
:	    public Broadcast(long broadcastTime) {
:	        this.broadcastTime = broadcastTime;
:	    }
:	
:	    public long getBroadcastTime() {
:	        return broadcastTime;
:	    }
:	    public void setBroadcastTime(long broadcastTime) {
:	        this.broadcastTime = broadcastTime;
:	    }
:	}
