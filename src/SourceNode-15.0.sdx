A!	SourceNode-15.0.30226	2.0	Java

X	c:01/000	com.ibm.saguaro.system.Assembly
X	c:01/001	com.ibm.saguaro.system.Util
X	c:01/002	com.ibm.saguaro.system.Timer
X	c:01/003	com.ibm.saguaro.system.Time
X	c:01/004	com.ibm.saguaro.system.MoteException
X	c:01/005	com.ibm.saguaro.system.Device
X	c:01/006	com.ibm.saguaro.system.SDev
X	c:01/007	com.ibm.saguaro.system.CDev
X	c:01/008	com.ibm.saguaro.system.OutOfResourcesException
X	c:01/009	com.ibm.saguaro.system.OsException
X	c:01/00A	com.ibm.saguaro.system.NullReferenceException
X	c:01/00B	com.ibm.saguaro.system.SystemException
X	c:01/00C	com.ibm.saguaro.system.Mote
X	c:01/00D	com.ibm.saguaro.system.LIP
X	c:01/00E	com.ibm.saguaro.system.LED
X	c:01/00F	com.ibm.saguaro.system.InvalidCastException
X	c:01/010	com.ibm.saguaro.system.IndexOutOfRangeException
X	c:01/011	com.ibm.saguaro.system.I2C
X	c:01/012	com.ibm.saguaro.system.GPIO
X	c:01/013	com.ibm.saguaro.system.Err
X	c:01/014	com.ibm.saguaro.system.DeviceException
X	c:01/015	com.ibm.saguaro.system.SPI
X	c:01/016	com.ibm.saguaro.system.Radio
X	c:01/017	com.ibm.saguaro.system.WLIP
X	c:01/018	com.ibm.saguaro.system.ArrayTypeMismatchException
X	c:01/019	com.ibm.saguaro.system.ArithmException
X	c:01/01A	com.ibm.saguaro.system.ArgumentException
X	c:01/01B	com.ibm.saguaro.system.AccessException
X	c:01/01C	com.ibm.saguaro.system.ADC
X	c:02/000	com.ibm.saguaro.logger.Logger

C!	c:006	embs.SourceNode	-1	0	c:000
R	timer1	r:com.ibm.saguaro.system.Timer	0	0
R	xmit	c[]	0	1
R	radio	r:com.ibm.saguaro.system.Radio	0	2
R	sinks	r:embs.SinkParameters[]	0	3
R	channelSwitches	r:embs.ChannelSwitch[]	0	4
F	currentChannel	i	0	0
F	ownPanId	c	0	1
F	ownShortAddr	c	0	2
F	YELLOW_LED	c	0	3
F	GREEN_LED	c	0	4
F	RED_LED	c	0	5
F	N_MIN	i	0	6
F	N_MAX	i	0	7
F	T_MIN	l	0	8
F	T_MAX	l	0	10
F	previousChannel	c	0	12
F	broadcastSet	z	0	13
F	TIME_ADJUSTMENT	l	0	14
F	lastChannelSwitch	l	0	16
F	wait	l	0	3327
H	BROADCASTING$UTF8	b[]	0	66,82,79,65,68,67,65,83,84,73,78,71,33
H	Calculated_T$UTF8	b[]	0	67,97,108,99,117,108,97,116,101,100,32,84,58,32
H	Current_Beacon$UTF8	b[]	0	67,117,114,114,101,110,116,32,66,101,97,99,111,110,58,32
H	PREPARING_BROADCAST_for_time$UTF8	b[]	0	80,82,69,80,65,82,73,78,71,32,66,82,79,65,68,67,65,83,84,33,32,102,111,114,32,116,105,109,101,58,32
H	Received_packet$UTF8	b[]	0	82,101,99,101,105,118,101,100,32,112,97,99,107,101,116
H	Transmitted$UTF8	b[]	0	84,114,97,110,115,109,105,116,116,101,100,46
M!	SourceNode(r:embs.SourceNode)v	-1	m:0169	002D2	4
M	access$000(i,c[],i,i,l)i	-1	m:016B	002D6	14
M	access$100(i,c[],i,i,l)i	-1	m:0172	002E4	14
M!	broadcastToSink(c,l)v	-1	m:0179	002F2	82
M	createNextBroadcast(i,l,i,l,l)v	-1	m:01A2	00344	42
M!	getChannelSwitch(l,r:embs.ChannelSwitch[])c	-1	m:01B7	0036E	50
M	getDiffN(i,i)i	-1	m:01D0	003A0	8
M	getDiffT(l,l)l	-1	m:01D4	003A8	26
M	insertChannelSwitchInBuffer(r:embs.ChannelSwitch[],r:embs.ChannelSwitch)r:embs.ChannelSwitch[]	-1	m:01E1	003C2	60
M	onReceive(i,c[],i,i,l)i	-1	m:01FF	003FE	350
M	onTransmit(i,c[],i,i,l)i	-1	m:02AE	0055C	134
M	setupBroadcastAndCallBack(l,l,i,l)v	-1	m:02F1	005E2	110
M	toggleLed(i)v	-1	m:0328	00650	28

C!	c:008	embs.SinkParameters	1	1	c:000
f	beaconT	l	1	0
f	beaconN	i	1	2
f	T	l	1	3
f	N	i	1	5
f	address	c	1	6
f	panid	c	1	7
f	channel	c	1	8
m!	addBeacon(i,l)v	1	m:0137	0026E	12	0
m!	getAddress()c	1	m:013D	0027A	8	7
m!	getBeaconN()i	1	m:0141	00282	8	8
m!	getBeaconT()l	1	m:0145	0028A	8	10
m!	getChannel()c	1	m:0149	00292	8	5
m!	getN()i	1	m:014D	0029A	8	4
m!	getPanid()c	1	m:0151	002A2	8	6
m!	getT()l	1	m:0155	002AA	8	2
m!	setBeaconN(i)v	1	m:0159	002B2	8	9
m!	setBeaconT(l)v	1	m:015D	002BA	8	11
m!	setN(i)v	1	m:0161	002C2	8	1
m!	setT(l)v	1	m:0165	002CA	8	3
M!	SinkParameters(r:embs.SinkParameters,c,c,c)v	1	m:0123	00246	40

C!	c:013	embs.ChannelSwitch	2	2	c:000
f	channel	c	2	0
f	time	l	2	1
m!	getChannel()c	2	m:0113	00226	8	3
m!	getTime()l	2	m:0117	0022E	8	0
m!	setChannel(c)v	2	m:011B	00236	8	2
m!	setTime(l)v	2	m:011F	0023E	8	1
M!	ChannelSwitch(r:embs.ChannelSwitch,l,c)v	2	m:010D	0021A	12

C!	c:018	embs.Broadcast	3	3	c:000
f	broadcastTime	l	3	0
m!	getBroadcastTime()l	3	m:0105	0020A	8	0
m!	setBroadcastTime(l)v	3	m:0109	00212	8	1
M!	Broadcast(r:embs.Broadcast,l)v	3	m:0101	00202	8

C	c:01C	com.ibm.saguaro.system.$tatics	-1	-1	c:01/000
r	embs.SourceNode.timer1	r:com.ibm.saguaro.system.Timer	-1	0
r	embs.SourceNode.xmit	c[]	-1	1
r	embs.SourceNode.radio	r:com.ibm.saguaro.system.Radio	-1	2
r	embs.SourceNode.sinks	r:embs.SinkParameters[]	-1	3
r	embs.SourceNode.channelSwitches	r:embs.ChannelSwitch[]	-1	4
f	embs.SourceNode.currentChannel	i	-1	0
f	embs.SourceNode.ownPanId	c	-1	1
f	embs.SourceNode.ownShortAddr	c	-1	2
f	embs.SourceNode.YELLOW_LED	c	-1	3
f	embs.SourceNode.GREEN_LED	c	-1	4
f	embs.SourceNode.RED_LED	c	-1	5
f	embs.SourceNode.N_MIN	i	-1	6
f	embs.SourceNode.N_MAX	i	-1	7
f	embs.SourceNode.T_MIN	l	-1	8
f	embs.SourceNode.T_MAX	l	-1	10
f	embs.SourceNode.previousChannel	c	-1	12
f	embs.SourceNode.broadcastSet	z	-1	13
f	embs.SourceNode.TIME_ADJUSTMENT	l	-1	14
f	embs.SourceNode.lastChannelSwitch	l	-1	16
M	__init()v	-1	m:003C	00078	394

c	00085	0	14	0	14	0	m:003C
c	0008F	0	16	0	16	0	m:003C
c	000C6	0	21	0	21	0	m:003C
c	000CA	0	22	0	22	0	m:003C
c	000CF	0	23	0	23	0	m:003C
c	000D3	0	26	0	26	0	m:003C
c	000D7	0	27	0	27	0	m:003C
c	000DB	0	28	0	28	0	m:003C
c	000DF	0	30	0	30	0	m:003C
c	000E3	0	31	0	31	0	m:003C
c	000E8	0	32	0	32	0	m:003C
c	000F0	0	33	0	33	0	m:003C
c	000F8	0	36	0	36	0	m:003C
c	000FF	0	39	0	39	0	m:003C
c	00103	0	40	0	40	0	m:003C
c	0010B	0	41	0	41	0	m:003C
c	00113	0	46	0	46	0	m:003C
c	0011F	0	48	0	48	0	m:003C
c	00124	0	49	0	49	0	m:003C
c	00129	0	50	0	50	0	m:003C
c	0012E	0	52	0	52	0	m:003C
c	00138	0	53	0	53	0	m:003C
c	0013F	0	54	0	54	0	m:003C
c	00149	0	61	0	61	0	m:003C
c	00159	0	63	0	63	0	m:003C
c	0016A	0	64	0	64	0	m:003C
c	0017A	0	67	0	67	0	m:003C
c	00180	0	68	0	68	0	m:003C
c	00186	0	69	0	69	0	m:003C
c	0018E	0	70	0	70	0	m:003C
c	001A0	0	71	0	71	0	m:003C
c	001A9	0	72	0	72	0	m:003C
c	001BC	0	73	0	73	0	m:003C
c	001CF	0	76	0	76	0	m:003C
c	001D9	0	82	0	82	0	m:003C
c	001E3	0	87	0	87	0	m:003C
c	001EC	0	88	0	88	0	m:003C
c	00201	0	89	0	89	0	m:003C
e	00202	m:003C
c	00205	3	10	0	10	0	m:0101
l!	00205	0020A	r:embs.Broadcast	this	m:0101	0
l!	00205	0020A	l	broadcastTime	m:0101	1
c	00209	3	11	0	11	0	m:0101
e!	0020A	m:0101
c	0020D	3	14	0	14	0	m:0105
l	0020D	00211	r:embs.Broadcast	this	m:0105	0
e!	00212	m:0105
c	00215	3	17	0	17	0	m:0109
l!	00215	0021A	r:embs.Broadcast	this	m:0109	0
l	00215	0021A	l	broadcastTime	m:0109	1
c	00219	3	18	0	18	0	m:0109
e!	0021A	m:0109
c	0021D	2	15	0	15	0	m:010D
l!	0021D	00226	r:embs.ChannelSwitch	this	m:010D	0
l!	0021D	00226	l	time	m:010D	1
l	0021D	00226	c	channel	m:010D	3
c	00221	2	16	0	16	0	m:010D
c	00225	2	17	0	17	0	m:010D
e!	00226	m:010D
c	00229	2	30	0	30	0	m:0113
l	00229	0022D	r:embs.ChannelSwitch	this	m:0113	0
e!	0022E	m:0113
c	00231	2	20	0	20	0	m:0117
l	00231	00235	r:embs.ChannelSwitch	this	m:0117	0
e!	00236	m:0117
c	00239	2	27	0	27	0	m:011B
l!	00239	0023E	r:embs.ChannelSwitch	this	m:011B	0
l	00239	0023E	c	channel	m:011B	1
c	0023D	2	28	0	28	0	m:011B
e!	0023E	m:011B
c	00241	2	23	0	23	0	m:011F
l!	00241	00246	r:embs.ChannelSwitch	this	m:011F	0
l	00241	00246	l	time	m:011F	1
c	00245	2	24	0	24	0	m:011F
e!	00246	m:011F
c	00249	1	10	0	10	0	m:0123
l!	00249	0026E	r:embs.SinkParameters	this	m:0123	0
l!	00249	0026E	c	channel	m:0123	1
l!	00249	0026E	c	panid	m:0123	2
l!	00249	0026E	c	address	m:0123	3
c	0024D	1	11	0	11	0	m:0123
c	00255	1	12	0	12	0	m:0123
c	00259	1	13	0	13	0	m:0123
c	00261	1	16	0	16	0	m:0123
c	00265	1	17	0	17	0	m:0123
c	00269	1	18	0	18	0	m:0123
c	0026D	1	19	0	19	0	m:0123
e!	0026E	m:0123
c	00271	1	22	0	22	0	m:0137
l!	00271	0027A	r:embs.SinkParameters	this	m:0137	0
l!	00271	0027A	i	n	m:0137	1
l	00271	0027A	l	t	m:0137	2
c	00275	1	23	0	23	0	m:0137
c	00279	1	24	0	24	0	m:0137
e!	0027A	m:0137
c	0027D	1	32	0	32	0	m:013D
l	0027D	00281	r:embs.SinkParameters	this	m:013D	0
e!	00282	m:013D
c	00285	1	35	0	35	0	m:0141
l	00285	00289	r:embs.SinkParameters	this	m:0141	0
e!	0028A	m:0141
c	0028D	1	41	0	41	0	m:0145
l	0028D	00291	r:embs.SinkParameters	this	m:0145	0
e!	00292	m:0145
c	00295	1	30	0	30	0	m:0149
l	00295	00299	r:embs.SinkParameters	this	m:0149	0
e!	0029A	m:0149
c	0029D	1	29	0	29	0	m:014D
l	0029D	002A1	r:embs.SinkParameters	this	m:014D	0
e!	002A2	m:014D
c	002A5	1	31	0	31	0	m:0151
l	002A5	002A9	r:embs.SinkParameters	this	m:0151	0
e!	002AA	m:0151
c	002AD	1	27	0	27	0	m:0155
l	002AD	002B1	r:embs.SinkParameters	this	m:0155	0
e!	002B2	m:0155
c	002B5	1	38	0	38	0	m:0159
l!	002B5	002BA	r:embs.SinkParameters	this	m:0159	0
l	002B5	002BA	i	beaconN	m:0159	1
c	002B9	1	39	0	39	0	m:0159
e!	002BA	m:0159
c	002BD	1	44	0	44	0	m:015D
l!	002BD	002C2	r:embs.SinkParameters	this	m:015D	0
l	002BD	002C2	l	beaconT	m:015D	1
c	002C1	1	45	0	45	0	m:015D
e!	002C2	m:015D
c	002C5	1	26	0	26	0	m:0161
l!	002C5	002CA	r:embs.SinkParameters	this	m:0161	0
l	002C5	002CA	i	n	m:0161	1
e!	002CA	m:0161
c	002CD	1	28	0	28	0	m:0165
l!	002CD	002D2	r:embs.SinkParameters	this	m:0165	0
l	002CD	002D2	l	t	m:0165	1
e!	002D2	m:0165
c	002D5	0	8	0	8	0	m:0169
l!	002D5	002D6	r:embs.SourceNode	this	m:0169	0
e!	002D6	m:0169
c	002D9	0	8	0	8	0	m:016B
l	002D9	002E3	i	x0	m:016B	0
l	002D9	002E3	c[]	x1	m:016B	1
l	002D9	002E3	i	x2	m:016B	2
l	002D9	002E3	i	x3	m:016B	3
l	002D9	002E3	l	x4	m:016B	4
e	002E4	m:016B
c	002E7	0	8	0	8	0	m:0172
l	002E7	002F1	i	x0	m:0172	0
l	002E7	002F1	c[]	x1	m:0172	1
l	002E7	002F1	i	x2	m:0172	2
l	002E7	002F1	i	x3	m:0172	3
l	002E7	002F1	l	x4	m:0172	4
e	002F2	m:0172
c	002F5	0	170	0	170	0	m:0179
l!	002F5	00343	c	param	m:0179	0
l!	002F5	00343	l	time	m:0179	1
c	002FA	0	171	0	171	0	m:0179
c	00300	0	172	0	172	0	m:0179
c	00304	0	174	0	174	0	m:0179
c	0030A	0	175	0	175	0	m:0179
c	0030E	0	176	0	176	0	m:0179
c	00316	0	177	0	177	0	m:0179
l	00316	00343	c	channelNum	m:0179	3
c	0031F	0	178	0	178	0	m:0179
c	00326	0	179	0	179	0	m:0179
c	00338	0	180	0	180	0	m:0179
c	0033E	0	181	0	181	0	m:0179
c	00342	0	182	0	182	0	m:0179
e!	00344	m:0179
c	00347	0	194	0	194	0	m:01A2
l	00347	0036E	i	beaconN	m:01A2	0
l	00347	0036E	l	beaconT	m:01A2	1
l	00347	0036E	i	channel	m:01A2	3
l	00347	0036E	l	t	m:01A2	4
l	00347	0036E	l	currentTimeMS	m:01A2	6
c	00351	0	195	0	195	0	m:01A2
l	00351	0036E	l	broadcastTime	m:01A2	8
c	00359	0	196	0	196	0	m:01A2
l	00359	0036E	l	deadline	m:01A2	10
c	0036D	0	197	0	197	0	m:01A2
e	0036E	m:01A2
c	00371	0	185	0	185	0	m:01B7
l!	00371	003A0	l	time	m:01B7	0
l	00371	003A0	r:embs.ChannelSwitch[]	css	m:01B7	2
c	00380	0	186	0	186	0	m:01B7
l	00380	00390	r:embs.ChannelSwitch	cs	m:01B7	6
c	0038B	0	187	0	187	0	m:01B7
c	00390	0	185	0	185	0	m:01B7
c	00395	0	190	0	190	0	m:01B7
e!	003A0	m:01B7
c	003A3	0	235	0	235	0	m:01D0
l	003A3	003A7	i	beacon1N	m:01D0	0
l	003A3	003A7	i	beacon2N	m:01D0	1
e	003A8	m:01D0
c	003AB	0	239	0	239	0	m:01D4
l	003AB	003C2	l	beacon1T	m:01D4	0
l	003AB	003C2	l	beacon2T	m:01D4	2
c	003B0	0	240	0	240	0	m:01D4
l	003B0	003C2	l	diffT	m:01D4	4
e	003C2	m:01D4
c	003C5	0	219	0	219	0	m:01E1
l	003C5	003FE	r:embs.ChannelSwitch[]	css	m:01E1	0
l	003C5	003FE	r:embs.ChannelSwitch	cs	m:01E1	1
l	003C7	003FE	i	x	m:01E1	2
c	003CC	0	220	0	220	0	m:01E1
c	003D1	0	221	0	221	0	m:01E1
c	003D5	0	222	0	222	0	m:01E1
c	003D7	0	219	0	219	0	m:01E1
c	003DC	0	225	0	225	0	m:01E1
c	003E4	0	226	0	226	0	m:01E1
l	003E4	003FE	r:embs.ChannelSwitch[]	newCss	m:01E1	3
c	003EB	0	227	0	227	0	m:01E1
c	003F1	0	226	0	226	0	m:01E1
c	003F6	0	229	0	229	0	m:01E1
c	003FC	0	230	0	230	0	m:01E1
e	003FE	m:01E1
c	00401	0	120	0	120	0	m:01FF
l	00401	0055C	i	flags	m:01FF	0
l	00401	0055C	c[]	data	m:01FF	1
l	00401	0055C	i	len	m:01FF	2
l	00401	0055C	i	info	m:01FF	3
l	00401	0055C	l	time	m:01FF	4
c	00407	0	121	0	121	0	m:01FF
c	0040B	0	122	0	122	0	m:01FF
c	0040E	0	124	0	124	0	m:01FF
c	00413	0	125	0	125	0	m:01FF
c	00415	0	129	0	129	0	m:01FF
c	0041B	0	130	0	130	0	m:01FF
l	0041B	0055C	i	n	m:01FF	6
c	00421	0	132	0	132	0	m:01FF
l	00421	0055C	l	currentTime	m:01FF	7
c	0042D	0	133	0	133	0	m:01FF
c	00439	0	134	0	134	0	m:01FF
l	00439	00463	l	beaconT	m:01FF	9
c	00458	0	135	0	135	0	m:01FF
c	00463	0	140	0	140	0	m:01FF
c	00475	0	141	0	141	0	m:01FF
c	0048D	0	143	0	143	0	m:01FF
c	004B3	0	144	0	144	0	m:01FF
c	004B7	0	145	0	145	0	m:01FF
c	004C7	0	146	0	146	0	m:01FF
l	004C7	0052D	i	diffN	m:01FF	9
c	004D8	0	148	0	148	0	m:01FF
l	004D8	0052D	l	diffT	m:01FF	10
c	004EC	0	149	0	149	0	m:01FF
c	004F4	0	150	0	150	0	m:01FF
l	004F4	0052D	l	t	m:01FF	12
c	00500	0	151	0	151	0	m:01FF
c	00506	0	152	0	152	0	m:01FF
c	0050B	0	153	0	153	0	m:01FF
c	0050F	0	154	0	154	0	m:01FF
c	0052D	0	158	0	158	0	m:01FF
c	00538	0	159	0	159	0	m:01FF
c	00544	0	160	0	160	0	m:01FF
c	0054A	0	161	0	161	0	m:01FF
c	00552	0	162	0	162	0	m:01FF
c	00556	0	163	0	163	0	m:01FF
c	0055A	0	164	0	164	0	m:01FF
e	0055C	m:01FF
c	0055F	0	92	0	92	0	m:02AE
l	0055F	005E1	i	flags	m:02AE	0
l	0055F	005E1	c[]	data	m:02AE	1
l	0055F	005E1	i	len	m:02AE	2
l	0055F	005E1	i	info	m:02AE	3
l	0055F	005E1	l	time	m:02AE	4
c	00566	0	93	0	93	0	m:02AE
l	00566	005E1	c	channel	m:02AE	6
c	00568	0	94	0	94	0	m:02AE
l	00568	005E1	r:embs.SinkParameters	currentSink	m:02AE	7
c	00582	0	95	0	95	0	m:02AE
l	00582	0058F	r:embs.SinkParameters	s	m:02AE	11
c	0058A	0	96	0	96	0	m:02AE
c	0058D	0	97	0	97	0	m:02AE
c	0058F	0	94	0	94	0	m:02AE
c	00594	0	100	0	100	0	m:02AE
c	0059B	0	106	0	106	0	m:02AE
c	0059F	0	108	0	108	0	m:02AE
c	005A9	0	109	0	109	0	m:02AE
c	005AF	0	111	0	111	0	m:02AE
c	005B8	0	112	0	112	0	m:02AE
c	005C2	0	113	0	113	0	m:02AE
c	005DF	0	115	0	115	0	m:02AE
e	005E2	m:02AE
c	005E5	0	200	0	200	0	m:02F1
l	005E5	0064F	l	broadcastTime	m:02F1	0
l	005E5	0064F	l	deadline	m:02F1	2
l	005E5	0064F	i	sinkIndex	m:02F1	4
l	005E5	0064F	l	currentTimeMS	m:02F1	5
c	005EA	0	201	0	201	0	m:02F1
c	005FB	0	202	0	202	0	m:02F1
l	005FB	0064F	r:embs.ChannelSwitch	cs	m:02F1	7
c	00615	0	203	0	203	0	m:02F1
l	00615	00623	r:embs.ChannelSwitch	c	m:02F1	11
c	00622	0	204	0	204	0	m:02F1
c	00623	0	202	0	202	0	m:02F1
c	00628	0	208	0	208	0	m:02F1
c	0062E	0	209	0	209	0	m:02F1
c	00632	0	210	0	210	0	m:02F1
c	00636	0	211	0	211	0	m:02F1
c	00640	0	212	0	212	0	m:02F1
c	0064E	0	213	0	213	0	m:02F1
e	00650	m:02F1
c	00653	0	244	0	244	0	m:0328
l	00653	0066B	i	led	m:0328	0
c	00659	0	245	0	245	0	m:0328
l	00659	0066B	i	ledState	m:0328	1
c	0065C	0	246	0	246	0	m:0328
c	00664	0	248	0	248	0	m:0328
c	0066A	0	250	0	250	0	m:0328
e	0066C	m:0328
S	M:/EMBS/EMBS_assessment2/part2/src/embs/SourceNode.java
:	package embs;
:	
:	import com.ibm.saguaro.system.*;
:	import com.ibm.saguaro.logger.*;
:	//import embs.SinkParameter;
:	
:	
:	public class SourceNode {
:	
:		static Timer  timer1;
:		
:		static byte[] xmit;
:		static long   wait;
:		static Radio radio = new Radio();
:	
:		private static SinkParameters[] sinks = {
:			new SinkParameters((byte) 11,(byte)  0x11,(byte)  0x11), 
:			new SinkParameters((byte) 12, (byte) 0x12, (byte) 0x12),
:			new SinkParameters((byte) 13, (byte) 0x13, (byte) 0x13)};
:		// settings for SourceNode A
:		static int currentChannel = 0;
:		static byte ownPanId = 0x11;
:		static byte ownShortAddr = 0x1;
:	
:	
:		static byte YELLOW_LED = (byte) 0;
:		static byte GREEN_LED = (byte) 1;
:		static byte RED_LED = (byte) 2;
:	
:		static int N_MIN = 2;
:		static int N_MAX = 10;
:		static long T_MIN = 250;
:		static long T_MAX = 1500;
:		
:	
:		static ChannelSwitch[] channelSwitches = new ChannelSwitch[5];
:	
:		static byte previousChannel;
:		static boolean broadcastSet = false;
:		static long TIME_ADJUSTMENT = 3;
:		static long lastChannelSwitch = 0;
:		
:		
:		static {
:			// Open the default radio
:			radio.open(Radio.DID, null, 0, 0);
:	
:			LED.setState((byte) 0, (byte) 1);
:			LED.setState((byte) 1, (byte) 1);
:			LED.setState((byte) 2, (byte) 1);
:	
:			timer1 = new Timer();
:			timer1.setParam((byte) 0);
:			timer1.setCallback(new TimerEvent(null){
:				public void invoke(byte param, long time){
:					SourceNode.broadcastToSink(param, time);
:				}
:			});
:	
:			// Set channel 
:			radio.setChannel((byte) sinks[currentChannel].getChannel());
:			// Set the PAN ID and the short address
:			radio.setPanId(sinks[currentChannel].getPanid(), true);
:			radio.setShortAddr(sinks[currentChannel].getAddress());
:	
:			// Prepare beacon frame with source and destination addressing
:			xmit = new byte[12];
:			xmit[0] = Radio.FCF_BEACON;
:			xmit[1] = Radio.FCA_SRC_SADDR|Radio.FCA_DST_SADDR;
:			Util.set16le(xmit, 3, sinks[currentChannel].getPanid()); // destination PAN address 
:			Util.set16le(xmit, 5, 0xFFFF); // broadcast address 
:			Util.set16le(xmit, 7, sinks[currentChannel].getPanid()); // own PAN address 
:			Util.set16le(xmit, 9, sinks[currentChannel].getAddress()); // own short address 
:	
:			// register delegate for received frames
:			radio.setRxHandler(new DevCallback(null){
:				public int invoke (int flags, byte[] data, int len, int info, long time) {
:					return  SourceNode.onReceive(flags, data, len, info, time);
:				}
:			});
:	
:			radio.setTxHandler(new DevCallback(null){
:				public int invoke(int flags, byte[] data, int len, int info, long time) {
:					return SourceNode.onTransmit(flags, data, len, info, time);
:				}
:			});
:			radio.setRxMode(Radio.RXMODE_PROMISCUOUS);
:			radio.startRx(Device.ASAP, 0, Time.currentTicks()+0x7FFFFFFF);
:		}
:	
:		private static int onTransmit(int flags, byte[] data, int len, int info, long time) {
:			byte channel = radio.getChannel();
:			SinkParameters currentSink = null;
:			for (SinkParameters s: sinks){
:				if (channel == s.getChannel()){
:					currentSink = s;
:					break;
:				}
:			}
:			if (currentSink.getN()!=-1){
:				//TODO schedule channel switch callback AND broadcast
:		
:			} else {
:				//TODO schedule listen event
:			}
:			broadcastSet = false;
:			
:			if (radio.getState()==Device.S_RXEN){
:				radio.stopRx();
:			}
:			radio.setChannel((byte) previousChannel);
:			if (radio.getState()!=Device.S_RXEN){
:				radio.startRx(Device.TIMED, Time.currentTicks()+Time.toTickSpan(Time.MILLISECS, 10), Time.currentTicks()+0x7FFFFFFF);
:			}
:			return 0;
:		}
:	
:		// Called when a frame is received or at the end of a reception period 
:		private static int onReceive (int flags, byte[] data, int len, int info, long time) {
:			Logger.appendString(csr.s2b("Received packet"));
:			Logger.flush(Mote.INFO);
:			if (data == null) { // marks end of reception period
:				// turn green LED off 
:				LED.setState((byte)1, (byte)0);
:				return 0;
:			}
:				
:			
:			int n = data[11];
:			long currentTime = Time.currentTime(Time.MILLISECS);
:			
:			if (currentTime-lastChannelSwitch>T_MIN){
:				long beaconT = sinks[currentChannel].getBeaconT();
:				if (beaconT==-1 || (beaconT!=-1 && (currentTime-beaconT>T_MIN))){
:					sinks[currentChannel].setN(n);
:				}
:			}
:			
:			//If T is known for sink
:			if (sinks[currentChannel].getT()!=-1){
:				createNextBroadcast(n, currentTime, currentChannel, sinks[currentChannel].getT(), currentTime);
:			} else {
:				if (sinks[currentChannel].getBeaconT()!=-1 && sinks[currentChannel].getBeaconN()!=-1 &&!broadcastSet){
:					broadcastSet  = true;
:					int diffN = getDiffN(sinks[currentChannel].getBeaconN(), n);
:					long diffT = getDiffT(sinks[currentChannel].getBeaconT(), currentTime);
:					
:					if (diffN>0 && diffT-TIME_ADJUSTMENT <=(T_MAX*diffN)){
:						long t = diffT/diffN;
:						sinks[currentChannel].setT(t);
:						Logger.appendString(csr.s2b("Calculated T: "));
:						Logger.appendLong(t);
:						Logger.flush(Mote.WARN);
:						createNextBroadcast(sinks[currentChannel].getBeaconN(), sinks[currentChannel].getBeaconT(), currentChannel, t, currentTime);
:					}
:				}
:			}
:			sinks[currentChannel].setBeaconN(n);
:			sinks[currentChannel].setBeaconT(currentTime);
:			Logger.appendString(csr.s2b("Current Beacon: "));
:			Logger.appendByte(data[11]);
:			Logger.flush(Mote.WARN);
:			toggleLed(2);
:			return 0;
:		}
:	
:	
:		protected static void broadcastToSink(byte param, long time){
:			
:			LED.setState((byte) 2, (byte) 1);
:			Logger.appendString(csr.s2b("BROADCASTING!"));
:			Logger.flush(Mote.WARN);
:			
:			radio.stopRx();
:			toggleLed(2);
:			byte channelNum = getChannelSwitch(time, channelSwitches);
:			previousChannel = radio.getChannel();
:			radio.setChannel(channelNum);
:			radio.transmit(Device.ASAP|Radio.TXMODE_POWER_MAX, xmit, 0, 12, 0);
:			Logger.appendString(csr.s2b("Transmitted."));
:			Logger.flush(Mote.INFO);
:		}
:	
:		protected static byte getChannelSwitch(long time, ChannelSwitch[] css){
:			for (ChannelSwitch cs: css){
:				if (cs!=null && cs.getTime()==time){
:					return cs.getChannel();
:				}
:			}
:			return sinks[currentChannel].getChannel();
:		}
:	
:		private static void createNextBroadcast(int beaconN, long beaconT, int channel, long t, long currentTimeMS) {
:			long broadcastTime = (t  * beaconN) + currentTimeMS;
:			long deadline = broadcastTime + T_MIN;
:			setupBroadcastAndCallBack(broadcastTime + (T_MIN/2), deadline, channel, currentTimeMS);
:		}
:	
:		private static void setupBroadcastAndCallBack(long broadcastTime, long deadline, int sinkIndex, long currentTimeMS){
:			LED.setState((byte) 2, (byte) 0);
:			ChannelSwitch cs = new ChannelSwitch(broadcastTime, sinks[sinkIndex].getChannel());
:			for (ChannelSwitch c: channelSwitches){
:				if (c!=null && c.getTime()==broadcastTime){
:					return;
:				}
:			}
:			
:			Logger.appendString(csr.s2b("PREPARING BROADCAST! for time: "));
:			Logger.appendLong(broadcastTime);
:			Logger.flush(Mote.WARN);
:			channelSwitches = insertChannelSwitchInBuffer(channelSwitches, cs);
:			timer1.setAlarmBySpan(Time.toTickSpan(Time.MILLISECS, broadcastTime-currentTimeMS));
:		}
:		
:		
:		private static ChannelSwitch[] insertChannelSwitchInBuffer(ChannelSwitch[] css, ChannelSwitch cs){
:			// If space available in buffer
:			int x;
:			for (x=0; x<css.length; x++){
:				if (css[x]==null){
:					css[x] = cs;
:					return css;
:				}
:			}
:			ChannelSwitch[] newCss = new ChannelSwitch[css.length+2];
:			for (x=0; x<css.length; x++){
:				newCss[x] = css[x];
:			}
:			newCss[x+1] = cs;
:			return newCss;
:		}
:	
:	
:		private static int getDiffN(int beacon1N, int beacon2N) {
:			return beacon1N - beacon2N;
:		}
:	
:		private static long getDiffT(long beacon1T, long beacon2T) {
:			long diffT = beacon1T-beacon2T;
:			return (diffT < 0) ? -diffT : diffT;
:		}
:	
:		private static void toggleLed(int led){
:			int ledState = LED.getState((byte) led);
:			if (ledState==0){
:				LED.setState((byte) led, (byte) 1);
:			} else {
:				LED.setState((byte) led, (byte) 0);
:			}
:		}
:	
:		//	// Called on a timer alarm
:		//    public static void periodicSend(byte param, long time) {
:		//        
:		//        if(nc>0){
:		//	        // transmit a beacon 
:		//    	    radio.transmit(Device.ASAP|Radio.TXMODE_POWER_MAX, xmit, 0, 12, 0);
:		//        	// program new alarm
:		//        	tsend.setAlarmBySpan(wait);
:		//        	nc--;
:		//        	xmit[11]--;
:		//        }
:		//        else{
:		//        	//start reception phase
:		//	        radio.startRx(Device.ASAP, 0, Time.currentTicks()+wait);
:		//	        // turn green LED on 
:		//	        LED.setState((byte)1, (byte)1);
:		//	        
:		//        }
:		//        
:		//    }
:	}
S	M:/EMBS/EMBS_assessment2/part2/src/embs/SinkParameters.java
:	package embs;
:	
:	import com.ibm.saguaro.system.Timer;
:	
:	public class SinkParameters {
:	    private byte channel;
:	    private byte panid;
:	    private byte address;
:	    
:	    private int N = -1;
:	    private long T = -1;
:	    private int beaconN = -1;
:	    private long beaconT = -1;
:	    
:	    public SinkParameters(byte channel, byte panid, byte address){
:	    	this.channel =  channel;
:	    	this.panid =  panid;
:	    	this.address =  address;
:	    }
:	
:	    public void addBeacon(int n, long t){
:	    	this.beaconN = n;
:	    	this.beaconT = t;
:	    }
:	    
:		public void setN(int n) {this.N = n;}
:		public long getT() {return T;}
:		public void setT(long t) {this.T = t;}
:		public int getN() {return N;}
:		public byte getChannel() {return channel;}
:		public byte getPanid() {return panid;}
:		public byte getAddress() {return address;}
:	
:		public int getBeaconN() {
:			return beaconN;
:		}
:		public void setBeaconN(int beaconN) {
:			this.beaconN = beaconN;
:		}
:		public long getBeaconT() {
:			return beaconT;
:		}
:		public void setBeaconT(long beaconT) {
:			this.beaconT = beaconT;
:		}
:	  
:		
:	}
S	M:/EMBS/EMBS_assessment2/part2/src/embs/ChannelSwitch.java
:	package embs;
:	
:	/**
:	 * Class used to represent channel switch events
:	 */
:	public class ChannelSwitch {
:	
:	    // Time: time at which to switch from current channel to channel specified below
:	    private long time;
:	
:	    // Channel: channel to begin listening to at time Time
:	    private byte channel;
:	
:	    public ChannelSwitch(long time, byte channel) {
:	        this.time = time;
:	        this.channel = channel;
:	    }
:	
:	    public long getTime() {
:	        return time;
:	    }
:	    public void setTime(long time) {
:	        this.time = time;
:	    }
:	
:	    public void setChannel(byte channel) {
:	        this.channel = channel;
:	    }
:	    public byte getChannel() {
:	        return channel;
:	    }
:	}
S	M:/EMBS/EMBS_assessment2/part2/src/embs/Broadcast.java
:	package embs;
:	
:	/**
:	 * Represents a scheduled broadcast
:	 */
:	public class Broadcast{
:	    private long broadcastTime; // broadcastTime: time at which to broadcast
:	
:	    public Broadcast(long broadcastTime) {
:	        this.broadcastTime = broadcastTime;
:	    }
:	
:	    public long getBroadcastTime() {
:	        return broadcastTime;
:	    }
:	    public void setBroadcastTime(long broadcastTime) {
:	        this.broadcastTime = broadcastTime;
:	    }
:	}
