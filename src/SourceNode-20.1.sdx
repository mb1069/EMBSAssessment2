A!	SourceNode-20.1.54164	2.0	Java

X	c:01/000	com.ibm.saguaro.system.Assembly
X	c:01/001	com.ibm.saguaro.system.Util
X	c:01/002	com.ibm.saguaro.system.Timer
X	c:01/003	com.ibm.saguaro.system.Time
X	c:01/004	com.ibm.saguaro.system.MoteException
X	c:01/005	com.ibm.saguaro.system.Device
X	c:01/006	com.ibm.saguaro.system.SDev
X	c:01/007	com.ibm.saguaro.system.CDev
X	c:01/008	com.ibm.saguaro.system.OutOfResourcesException
X	c:01/009	com.ibm.saguaro.system.OsException
X	c:01/00A	com.ibm.saguaro.system.NullReferenceException
X	c:01/00B	com.ibm.saguaro.system.SystemException
X	c:01/00C	com.ibm.saguaro.system.Mote
X	c:01/00D	com.ibm.saguaro.system.LIP
X	c:01/00E	com.ibm.saguaro.system.LED
X	c:01/00F	com.ibm.saguaro.system.InvalidCastException
X	c:01/010	com.ibm.saguaro.system.IndexOutOfRangeException
X	c:01/011	com.ibm.saguaro.system.I2C
X	c:01/012	com.ibm.saguaro.system.GPIO
X	c:01/013	com.ibm.saguaro.system.Err
X	c:01/014	com.ibm.saguaro.system.DeviceException
X	c:01/015	com.ibm.saguaro.system.SPI
X	c:01/016	com.ibm.saguaro.system.Radio
X	c:01/017	com.ibm.saguaro.system.WLIP
X	c:01/018	com.ibm.saguaro.system.ArrayTypeMismatchException
X	c:01/019	com.ibm.saguaro.system.ArithmException
X	c:01/01A	com.ibm.saguaro.system.ArgumentException
X	c:01/01B	com.ibm.saguaro.system.AccessException
X	c:01/01C	com.ibm.saguaro.system.ADC
X	c:02/000	com.ibm.saguaro.logger.Logger

C!	c:005	embs.SourceNode	-1	0	c:000
R	timer0	r:com.ibm.saguaro.system.Timer	0	0
R	timer1	r:com.ibm.saguaro.system.Timer	0	1
R	timer2	r:com.ibm.saguaro.system.Timer	0	2
R	xmit	c[]	0	3
R	radio	r:com.ibm.saguaro.system.Radio	0	4
R	sinks	r:embs.SinkParameters[]	0	5
R	sendPerSink	i[]	0	6
F	currentSinkIndex	i	0	0
F	YELLOW_LED	c	0	1
F	GREEN_LED	c	0	2
F	RED_LED	c	0	3
F	N_MIN	i	0	4
F	N_MAX	i	0	5
F	T_MIN	l	0	6
F	T_MAX	l	0	8
F	previousSinkIndex	i	0	10
F	TIME_ADJUSTMENT	l	0	11
F	lastChannelSwitch	l	0	13
F	wait	l	0	3327
H	BROADCASTING_on_channel$UTF8	b[]	0	66,82,79,65,68,67,65,83,84,73,78,71,33,32,111,110,32,99,104,97,110,110,101,108,58,32
H	Broadcast_results$UTF8	b[]	0	66,114,111,97,100,99,97,115,116,32,114,101,115,117,108,116,115,58,32
H	Calculated_T$UTF8	b[]	0	67,97,108,99,117,108,97,116,101,100,32,84,58,32
H	Changed_channel_to$UTF8	b[]	0	67,104,97,110,103,101,100,32,99,104,97,110,110,101,108,32,116,111,58,32
H	Finished_broadcast$UTF8	b[]	0	70,105,110,105,115,104,101,100,32,98,114,111,97,100,99,97,115,116,46
H	PAA$UTF8	b[]	0	80,65,65,33,58,32
H	PICKED_DIFFERENT_CHANNEL$UTF8	b[]	0	80,73,67,75,69,68,32,68,73,70,70,69,82,69,78,84,32,67,72,65,78,78,69,76,33,58,32
H	PREPARING_BROADCAST_for_channel$UTF8	b[]	0	80,82,69,80,65,82,73,78,71,32,66,82,79,65,68,67,65,83,84,33,32,102,111,114,32,99,104,97,110,110,101,108,58,32
H	Received_packet_c$UTF8	b[]	0	82,101,99,101,105,118,101,100,32,112,97,99,107,101,116,32,99,58
H	at_time$UTF8	b[]	0	97,116,32,116,105,109,101,58,32
H	at_time0$UTF8	b[]	0	32,97,116,32,116,105,109,101,58,32
H	n$UTF8	b[]	0	32,110,58
H	s$UTF8	b[]	0	47
M!	SourceNode(r:embs.SourceNode)v	-1	m:0160	002C0	4
M	access$000(i,c[],i,i,l)i	-1	m:0162	002C4	14
M	access$100(i,c[],i,i,l)i	-1	m:0169	002D2	14
M!	broadcastToSink(c,l)v	-1	m:0170	002E0	112
M	createNextBroadcast(i,l,i,l,l)v	-1	m:01A8	00350	52
M	getDiffN(i,i)i	-1	m:01C2	00384	8
M	getDiffT(l,l)l	-1	m:01C6	0038C	26
M!	isValidPeriod(l)z	-1	m:01D3	003A6	30
M	onReceive(i,c[],i,i,l)i	-1	m:01E2	003C4	358
M	onTransmit(i,c[],i,i,l)i	-1	m:0295	0052A	140
M	pickNextSink(i)i	-1	m:02DB	005B6	118
M	setChannel(i)v	-1	m:0316	0062C	128
M	setLEDListening(c)v	-1	m:0356	006AC	60
M	setupBroadcastAndCallBack(l,l,i,l)v	-1	m:0374	006E8	70
M	startListening()v	-1	m:0397	0072E	34
M	toggleLed(i)v	-1	m:03A8	00750	28

C!	c:007	embs.SinkParameters	1	1	c:000
f	nextBeaconTime	l	1	0
f	broadcastSet	z	1	2
f	beaconT	l	1	3
f	beaconN	i	1	5
f	T	l	1	6
f	maxObservedN	i	1	8
f	address	c	1	9
f	panid	c	1	10
f	channel	c	1	11
m!	addBeacon(i,l)v	1	m:011E	0023C	12	2
m!	getAddress()c	1	m:0124	00248	8	9
m!	getBeaconN()i	1	m:0128	00250	8	10
m!	getBeaconT()l	1	m:012C	00258	8	12
m!	getBroadcastSet()z	1	m:0130	00260	8	0
m!	getChannel()c	1	m:0134	00268	8	7
m!	getMaxObservedN()i	1	m:0138	00270	8	6
m!	getNextBeaconTime()l	1	m:013C	00278	8	15
m!	getPanid()c	1	m:0140	00280	8	8
m!	getT()l	1	m:0144	00288	8	4
m!	setBeaconN(i)v	1	m:0148	00290	8	11
m!	setBeaconT(l)v	1	m:014C	00298	8	13
m!	setBroadcastSet(z)v	1	m:0150	002A0	8	1
m!	setMaxObservedN(i)v	1	m:0154	002A8	8	3
m!	setNextBeaconTime(l)v	1	m:0158	002B0	8	14
m!	setT(l)v	1	m:015C	002B8	8	5
M!	SinkParameters(r:embs.SinkParameters,c,c,c)v	1	m:0108	00210	44

C	c:015	com.ibm.saguaro.system.$tatics	-1	-1	c:01/000
r	embs.SourceNode.timer0	r:com.ibm.saguaro.system.Timer	-1	0
r	embs.SourceNode.timer1	r:com.ibm.saguaro.system.Timer	-1	1
r	embs.SourceNode.timer2	r:com.ibm.saguaro.system.Timer	-1	2
r	embs.SourceNode.xmit	c[]	-1	3
r	embs.SourceNode.radio	r:com.ibm.saguaro.system.Radio	-1	4
r	embs.SourceNode.sinks	r:embs.SinkParameters[]	-1	5
r	embs.SourceNode.sendPerSink	i[]	-1	6
f	embs.SourceNode.currentSinkIndex	i	-1	0
f	embs.SourceNode.YELLOW_LED	c	-1	1
f	embs.SourceNode.GREEN_LED	c	-1	2
f	embs.SourceNode.RED_LED	c	-1	3
f	embs.SourceNode.N_MIN	i	-1	4
f	embs.SourceNode.N_MAX	i	-1	5
f	embs.SourceNode.T_MIN	l	-1	6
f	embs.SourceNode.T_MAX	l	-1	8
f	embs.SourceNode.previousSinkIndex	i	-1	10
f	embs.SourceNode.TIME_ADJUSTMENT	l	-1	11
f	embs.SourceNode.lastChannelSwitch	l	-1	13
M	__init()v	-1	m:002E	0005C	436

c	00069	0	17	0	17	0	m:002E
c	00073	0	19	0	19	0	m:002E
c	000AA	0	25	0	25	0	m:002E
c	000AE	0	28	0	28	0	m:002E
c	000B2	0	29	0	29	0	m:002E
c	000B6	0	30	0	30	0	m:002E
c	000BA	0	32	0	32	0	m:002E
c	000BE	0	33	0	33	0	m:002E
c	000C3	0	34	0	34	0	m:002E
c	000CB	0	35	0	35	0	m:002E
c	000D3	0	37	0	37	0	m:002E
c	000E4	0	40	0	40	0	m:002E
c	000EC	0	41	0	41	0	m:002E
c	000F4	0	46	0	46	0	m:002E
c	00100	0	48	0	48	0	m:002E
c	00105	0	49	0	49	0	m:002E
c	0010A	0	50	0	50	0	m:002E
c	0010F	0	52	0	52	0	m:002E
c	00119	0	53	0	53	0	m:002E
c	00120	0	54	0	54	0	m:002E
c	0012A	0	60	0	60	0	m:002E
c	00134	0	61	0	61	0	m:002E
c	0013B	0	62	0	62	0	m:002E
c	00145	0	68	0	68	0	m:002E
c	0014F	0	69	0	69	0	m:002E
c	00156	0	70	0	70	0	m:002E
c	00160	0	77	0	77	0	m:002E
c	00170	0	79	0	79	0	m:002E
c	00181	0	80	0	80	0	m:002E
c	00191	0	83	0	83	0	m:002E
c	00197	0	84	0	84	0	m:002E
c	0019D	0	85	0	85	0	m:002E
c	001A5	0	86	0	86	0	m:002E
c	001B7	0	87	0	87	0	m:002E
c	001C0	0	88	0	88	0	m:002E
c	001D3	0	89	0	89	0	m:002E
c	001E6	0	92	0	92	0	m:002E
c	001F0	0	98	0	98	0	m:002E
c	001FA	0	104	0	104	0	m:002E
c	0020F	0	105	0	105	0	m:002E
e	00210	m:002E
c	00213	1	10	0	10	0	m:0108
l!	00213	0023C	r:embs.SinkParameters	this	m:0108	0
l!	00213	0023C	c	channel	m:0108	1
l!	00213	0023C	c	panid	m:0108	2
l!	00213	0023C	c	address	m:0108	3
c	00217	1	11	0	11	0	m:0108
c	0021F	1	12	0	12	0	m:0108
c	00223	1	13	0	13	0	m:0108
c	0022B	1	14	0	14	0	m:0108
c	0022F	1	18	0	18	0	m:0108
c	00233	1	19	0	19	0	m:0108
c	00237	1	20	0	20	0	m:0108
c	0023B	1	21	0	21	0	m:0108
e!	0023C	m:0108
c	0023F	1	32	0	32	0	m:011E
l!	0023F	00248	r:embs.SinkParameters	this	m:011E	0
l!	0023F	00248	i	n	m:011E	1
l	0023F	00248	l	t	m:011E	2
c	00243	1	33	0	33	0	m:011E
c	00247	1	34	0	34	0	m:011E
e!	00248	m:011E
c	0024B	1	42	0	42	0	m:0124
l	0024B	0024F	r:embs.SinkParameters	this	m:0124	0
e!	00250	m:0124
c	00253	1	45	0	45	0	m:0128
l	00253	00257	r:embs.SinkParameters	this	m:0128	0
e!	00258	m:0128
c	0025B	1	51	0	51	0	m:012C
l	0025B	0025F	r:embs.SinkParameters	this	m:012C	0
e!	00260	m:012C
c	00263	1	24	0	24	0	m:0130
l	00263	00267	r:embs.SinkParameters	this	m:0130	0
e!	00268	m:0130
c	0026B	1	40	0	40	0	m:0134
l	0026B	0026F	r:embs.SinkParameters	this	m:0134	0
e!	00270	m:0134
c	00273	1	39	0	39	0	m:0138
l	00273	00277	r:embs.SinkParameters	this	m:0138	0
e!	00278	m:0138
c	0027B	1	62	0	62	0	m:013C
l	0027B	0027F	r:embs.SinkParameters	this	m:013C	0
e!	00280	m:013C
c	00283	1	41	0	41	0	m:0140
l	00283	00287	r:embs.SinkParameters	this	m:0140	0
e!	00288	m:0140
c	0028B	1	37	0	37	0	m:0144
l	0028B	0028F	r:embs.SinkParameters	this	m:0144	0
e!	00290	m:0144
c	00293	1	48	0	48	0	m:0148
l!	00293	00298	r:embs.SinkParameters	this	m:0148	0
l	00293	00298	i	beaconN	m:0148	1
c	00297	1	49	0	49	0	m:0148
e!	00298	m:0148
c	0029B	1	54	0	54	0	m:014C
l!	0029B	002A0	r:embs.SinkParameters	this	m:014C	0
l	0029B	002A0	l	beaconT	m:014C	1
c	0029F	1	55	0	55	0	m:014C
e!	002A0	m:014C
c	002A3	1	28	0	28	0	m:0150
l!	002A3	002A8	r:embs.SinkParameters	this	m:0150	0
l	002A3	002A8	z	value	m:0150	1
c	002A7	1	29	0	29	0	m:0150
e!	002A8	m:0150
c	002AB	1	36	0	36	0	m:0154
l!	002AB	002B0	r:embs.SinkParameters	this	m:0154	0
l	002AB	002B0	i	n	m:0154	1
e!	002B0	m:0154
c	002B3	1	58	0	58	0	m:0158
l!	002B3	002B8	r:embs.SinkParameters	this	m:0158	0
l	002B3	002B8	l	l	m:0158	1
c	002B7	1	59	0	59	0	m:0158
e!	002B8	m:0158
c	002BB	1	38	0	38	0	m:015C
l!	002BB	002C0	r:embs.SinkParameters	this	m:015C	0
l	002BB	002C0	l	t	m:015C	1
e!	002C0	m:015C
c	002C3	0	7	0	7	0	m:0160
l!	002C3	002C4	r:embs.SourceNode	this	m:0160	0
e!	002C4	m:0160
c	002C7	0	7	0	7	0	m:0162
l	002C7	002D1	i	x0	m:0162	0
l	002C7	002D1	c[]	x1	m:0162	1
l	002C7	002D1	i	x2	m:0162	2
l	002C7	002D1	i	x3	m:0162	3
l	002C7	002D1	l	x4	m:0162	4
e	002D2	m:0162
c	002D5	0	7	0	7	0	m:0169
l	002D5	002DF	i	x0	m:0169	0
l	002D5	002DF	c[]	x1	m:0169	1
l	002D5	002DF	i	x2	m:0169	2
l	002D5	002DF	i	x3	m:0169	3
l	002D5	002DF	l	x4	m:0169	4
e	002E0	m:0169
c	002E3	0	162	0	162	0	m:0170
l!	002E3	00350	c	sinkIndex	m:0170	0
l!	002E3	00350	l	time	m:0170	1
c	002ED	0	163	0	163	0	m:0170
c	002F3	0	165	0	165	0	m:0170
c	002F9	0	166	0	166	0	m:0170
c	00304	0	167	0	167	0	m:0170
c	0030A	0	168	0	168	0	m:0170
c	00310	0	169	0	169	0	m:0170
c	00314	0	171	0	171	0	m:0170
c	0031A	0	173	0	173	0	m:0170
c	0031E	0	174	0	174	0	m:0170
c	00327	0	177	0	177	0	m:0170
c	00345	0	178	0	178	0	m:0170
c	0034B	0	179	0	179	0	m:0170
c	0034F	0	180	0	180	0	m:0170
e!	00350	m:0170
c	00353	0	259	0	259	0	m:01A8
l	00353	00384	i	beaconN	m:01A8	0
l	00353	00384	l	beaconT	m:01A8	1
l	00353	00384	i	channel	m:01A8	3
l	00353	00384	l	t	m:01A8	4
l	00353	00384	l	currentTimeMS	m:01A8	6
c	0035A	0	260	0	260	0	m:01A8
l	0035A	00384	l	broadcastTimeByMSSpan	m:01A8	8
c	00362	0	261	0	261	0	m:01A8
l	00362	00384	l	deadline	m:01A8	10
c	0036C	0	262	0	262	0	m:01A8
c	00377	0	263	0	263	0	m:01A8
c	00380	0	264	0	264	0	m:01A8
c	00383	0	265	0	265	0	m:01A8
e	00384	m:01A8
c	00387	0	313	0	313	0	m:01C2
l	00387	0038B	i	beacon1N	m:01C2	0
l	00387	0038B	i	beacon2N	m:01C2	1
e	0038C	m:01C2
c	0038F	0	317	0	317	0	m:01C6
l	0038F	003A6	l	beacon1T	m:01C6	0
l	0038F	003A6	l	beacon2T	m:01C6	2
c	00394	0	318	0	318	0	m:01C6
l	00394	003A6	l	diffT	m:01C6	4
e	003A6	m:01C6
c	003A9	0	158	0	158	0	m:01D3
l!	003A9	003C4	l	period	m:01D3	0
e!	003C4	m:01D3
c	003C7	0	110	0	110	0	m:01E2
l	003C7	00529	i	flags	m:01E2	0
l	003C7	00529	c[]	data	m:01E2	1
l	003C7	00529	i	len	m:01E2	2
l	003C7	00529	i	info	m:01E2	3
l	003C7	00529	l	time	m:01E2	4
c	003CA	0	111	0	111	0	m:01E2
c	003CC	0	114	0	114	0	m:01E2
c	003D2	0	116	0	116	0	m:01E2
l	003D2	00529	i	n	m:01E2	6
c	003DF	0	117	0	117	0	m:01E2
c	003EA	0	119	0	119	0	m:01E2
c	003F0	0	120	0	120	0	m:01E2
c	003FD	0	121	0	121	0	m:01E2
c	00403	0	122	0	122	0	m:01E2
c	0040B	0	123	0	123	0	m:01E2
c	0040F	0	124	0	124	0	m:01E2
c	00415	0	127	0	127	0	m:01E2
l	00415	00529	l	currentTime	m:01E2	7
c	00426	0	128	0	128	0	m:01E2
c	0043C	0	129	0	129	0	m:01E2
c	00445	0	130	0	130	0	m:01E2
c	00448	0	131	0	131	0	m:01E2
c	0044A	0	133	0	133	0	m:01E2
c	00457	0	135	0	135	0	m:01E2
c	00469	0	136	0	136	0	m:01E2
c	00481	0	138	0	138	0	m:01E2
c	004A0	0	139	0	139	0	m:01E2
c	004B0	0	140	0	140	0	m:01E2
l	004B0	00510	i	diffN	m:01E2	9
c	004C1	0	141	0	141	0	m:01E2
l	004C1	00510	l	diffT	m:01E2	10
c	004E0	0	142	0	142	0	m:01E2
c	004E8	0	143	0	143	0	m:01E2
l	004E8	00510	l	t	m:01E2	12
c	004F4	0	144	0	144	0	m:01E2
c	004FA	0	145	0	145	0	m:01E2
c	004FF	0	146	0	146	0	m:01E2
c	00503	0	147	0	147	0	m:01E2
c	00510	0	152	0	152	0	m:01E2
c	0051B	0	153	0	153	0	m:01E2
c	00527	0	154	0	154	0	m:01E2
e	0052A	m:01E2
c	0052D	0	183	0	183	0	m:0295
l	0052D	005B6	i	flags	m:0295	0
l	0052D	005B6	c[]	data	m:0295	1
l	0052D	005B6	i	len	m:0295	2
l	0052D	005B6	i	info	m:0295	3
l	0052D	005B6	l	time	m:0295	4
c	00555	0	187	0	187	0	m:0295
c	00560	0	188	0	188	0	m:0295
c	00572	0	189	0	189	0	m:0295
c	0057A	0	191	0	191	0	m:0295
c	00583	0	193	0	193	0	m:0295
c	00586	0	194	0	194	0	m:0295
c	0058C	0	195	0	195	0	m:0295
c	00594	0	196	0	196	0	m:0295
c	0059A	0	197	0	197	0	m:0295
c	005A2	0	198	0	198	0	m:0295
c	005A8	0	199	0	199	0	m:0295
c	005B0	0	200	0	200	0	m:0295
c	005B4	0	201	0	201	0	m:0295
e	005B6	m:0295
c	005B9	0	206	0	206	0	m:02DB
l	005B9	0062C	i	currSinkIndex	m:02DB	0
l	005B9	0062C	i	x	m:02DB	1
c	005BF	0	207	0	207	0	m:02DB
l	005BF	0062C	l	nextBeaconTime	m:02DB	2
c	005C1	0	208	0	208	0	m:02DB
l	005C1	0062C	i	nextBeaconSinkIndex	m:02DB	4
c	005CA	0	209	0	209	0	m:02DB
c	005CE	0	210	0	210	0	m:02DB
c	005EE	0	211	0	211	0	m:02DB
c	005F7	0	212	0	212	0	m:02DB
c	005F9	0	208	0	208	0	m:02DB
c	005FE	0	216	0	216	0	m:02DB
c	00602	0	217	0	217	0	m:02DB
c	0060B	0	219	0	219	0	m:02DB
c	00611	0	220	0	220	0	m:02DB
c	00615	0	221	0	221	0	m:02DB
c	00620	0	222	0	222	0	m:02DB
c	00626	0	224	0	224	0	m:02DB
c	0062A	0	225	0	225	0	m:02DB
e	0062C	m:02DB
c	0062F	0	232	0	232	0	m:0316
l	0062F	006AB	i	sinkIndex	m:0316	0
c	00639	0	233	0	233	0	m:0316
c	0063F	0	236	0	236	0	m:0316
c	0064F	0	237	0	237	0	m:0316
c	00658	0	238	0	238	0	m:0316
c	00669	0	240	0	240	0	m:0316
c	00677	0	241	0	241	0	m:0316
c	00686	0	244	0	244	0	m:0316
c	0068A	0	245	0	245	0	m:0316
c	0068F	0	247	0	247	0	m:0316
c	00695	0	248	0	248	0	m:0316
c	006A0	0	249	0	249	0	m:0316
c	006A6	0	250	0	250	0	m:0316
c	006AA	0	251	0	251	0	m:0316
e	006AC	m:0316
c	006AF	0	331	0	331	0	m:0356
l	006AF	006E8	c	led	m:0356	0
c	006D2	0	332	0	332	0	m:0356
l	006D2	006E2	c	b	m:0356	4
c	006D6	0	333	0	333	0	m:0356
c	006DD	0	335	0	335	0	m:0356
c	006E2	0	331	0	331	0	m:0356
c	006E7	0	338	0	338	0	m:0356
e	006E8	m:0356
c	006EB	0	276	0	276	0	m:0374
l	006EB	0072D	l	broadcastTime	m:0374	0
l	006EB	0072D	l	deadline	m:0374	2
l	006EB	0072D	i	sinkIndex	m:0374	4
l	006EB	0072D	l	currentTimeMS	m:0374	5
c	006F1	0	277	0	277	0	m:0374
c	006F5	0	278	0	278	0	m:0374
c	006F9	0	280	0	280	0	m:0374
c	00707	0	282	0	282	0	m:0374
c	00712	0	283	0	283	0	m:0374
c	00714	0	285	0	285	0	m:0374
c	0071F	0	286	0	286	0	m:0374
c	00721	0	288	0	288	0	m:0374
c	0072C	0	291	0	291	0	m:0374
e	0072E	m:0374
c	00731	0	255	0	255	0	m:0397
c	0074E	0	256	0	256	0	m:0397
e	00750	m:0397
c	00753	0	322	0	322	0	m:03A8
l	00753	0076B	i	led	m:03A8	0
c	00759	0	323	0	323	0	m:03A8
l	00759	0076B	i	ledState	m:03A8	1
c	0075C	0	324	0	324	0	m:03A8
c	00764	0	326	0	326	0	m:03A8
c	0076A	0	328	0	328	0	m:03A8
e	0076C	m:03A8
S	M:/EMBS/EMBS_assessment2/part2/src/embs/SourceNode.java
:	package embs;
:	
:	import com.ibm.saguaro.system.*;
:	import com.ibm.saguaro.logger.*;
:	
:	
:	public class SourceNode {
:	
:		
:		// Timers to schedule broadcast callbacks
:		static Timer  timer0; // Timer for sink0
:		static Timer  timer1; // Timer for sink1
:		static Timer  timer2; // Timer for sink 2
:		
:		static byte[] xmit;
:		static long   wait;
:		static Radio radio = new Radio();
:		
:		private static SinkParameters[] sinks = {
:			new SinkParameters((byte) 11,(byte)  0x11,(byte)  0x11), 
:			new SinkParameters((byte) 12, (byte) 0x12, (byte) 0x12),
:			new SinkParameters((byte) 13, (byte) 0x13, (byte) 0x13)};
:		
:		// settings for initial sink
:		static int currentSinkIndex = 0;
:	
:	
:		static byte YELLOW_LED = (byte) 0;
:		static byte GREEN_LED = (byte) 1;
:		static byte RED_LED = (byte) 2;
:	
:		static int N_MIN = 2;
:		static int N_MAX = 10;
:		static long T_MIN = 250;
:		static long T_MAX = 1500;
:		
:		static int[] sendPerSink = new int[]{0,0,0};
:	
:		static int previousSinkIndex;
:		static long TIME_ADJUSTMENT = 3;
:		static long lastChannelSwitch = 0;
:		
:		
:		static {
:			// Open the default radio
:			radio.open(Radio.DID, null, 0, 0);
:	
:			LED.setState((byte) 0, (byte) 1);
:			LED.setState((byte) 1, (byte) 1);
:			LED.setState((byte) 2, (byte) 1);
:	
:			timer0 = new Timer();
:			timer0.setParam((byte) 0);
:			timer0.setCallback(new TimerEvent(null){
:				public void invoke(byte param, long time){
:					SourceNode.broadcastToSink(param, time);
:				}
:			});
:			
:			timer1 = new Timer();
:			timer1.setParam((byte) 1);
:			timer1.setCallback(new TimerEvent(null){
:				public void invoke(byte param, long time){
:					SourceNode.broadcastToSink(param, time);
:				}
:			});
:			
:			timer2 = new Timer();
:			timer2.setParam((byte) 2);
:			timer2.setCallback(new TimerEvent(null){
:				public void invoke(byte param, long time){
:					SourceNode.broadcastToSink(param, time);
:				}
:			});
:	
:			// Set channel 
:			radio.setChannel((byte) sinks[currentSinkIndex].getChannel());
:			// Set the PAN ID and the short address
:			radio.setPanId(sinks[currentSinkIndex].getPanid(), true);
:			radio.setShortAddr(sinks[currentSinkIndex].getAddress());
:	
:			// Prepare beacon frame with source and destination addressing
:			xmit = new byte[12];
:			xmit[0] = Radio.FCF_BEACON;
:			xmit[1] = Radio.FCA_SRC_SADDR|Radio.FCA_DST_SADDR;
:			Util.set16le(xmit, 3, sinks[currentSinkIndex].getPanid()); // destination PAN address 
:			Util.set16le(xmit, 5, 0xFFFF); // broadcast address 
:			Util.set16le(xmit, 7, sinks[currentSinkIndex].getPanid()); // own PAN address 
:			Util.set16le(xmit, 9, sinks[currentSinkIndex].getAddress()); // own short address 
:	
:			// register delegate for received frames
:			radio.setRxHandler(new DevCallback(null){
:				public int invoke (int flags, byte[] data, int len, int info, long time) {
:					return  SourceNode.onReceive(flags, data, len, info, time);
:				}
:			});
:	
:			radio.setTxHandler(new DevCallback(null){
:				public int invoke(int flags, byte[] data, int len, int info, long time) {
:					return SourceNode.onTransmit(flags, data, len, info, time);
:				}
:			});
:	//		radio.setRxMode(Radio.RXMODE_PROMISCUOUS);
:			radio.startRx(Device.ASAP, 0, Time.currentTicks()+0x7FFFFFFF);
:		}
:	
:		// Called when a frame is received or at the end of a reception period 
:		private static int onReceive (int flags, byte[] data, int len, int info, long time) {
:	
:			if (data == null) { // marks end of reception period
:				return 0;
:			}
:				
:			int n = data[11];
:			
:			if (n>sinks[currentSinkIndex].getMaxObservedN()){
:				sinks[currentSinkIndex].setMaxObservedN(n);
:			}
:			Logger.appendString(csr.s2b("Received packet c:"));
:			Logger.appendByte(sinks[currentSinkIndex].getChannel());
:			Logger.appendString(csr.s2b(" n:"));
:			Logger.appendByte(data[11]);
:			Logger.flush(Mote.WARN);
:			long currentTime = Time.currentTime(Time.MILLISECS);
:			
:			//Case where first beacon received is n=1 and no previous known beacons, switch channel
:			if (sinks[currentSinkIndex].getBeaconN()==-1 && n==1){
:				sinks[currentSinkIndex].setNextBeaconTime(currentTime + (11*T_MIN));
:				setChannel(pickNextSink(currentSinkIndex));
:				startListening();
:				return 0;
:			}
:			if (!sinks[currentSinkIndex].getBroadcastSet()){
:				//If T is known for sink
:				if (sinks[currentSinkIndex].getT()!=-1){
:					createNextBroadcast(n, currentTime, currentSinkIndex, sinks[currentSinkIndex].getT(), currentTime);
:				} else {
:					if (sinks[currentSinkIndex].getBeaconT()!=-1 && sinks[currentSinkIndex].getBeaconN()!=-1){
:						int diffN = getDiffN(sinks[currentSinkIndex].getBeaconN(), n);
:						long diffT = getDiffT(sinks[currentSinkIndex].getBeaconT(), currentTime);
:						if (diffN>0 && diffT-TIME_ADJUSTMENT <=(T_MAX*diffN)  && isValidPeriod(diffT/diffN)){
:							long t = diffT/diffN;
:							sinks[currentSinkIndex].setT(t);
:							Logger.appendString(csr.s2b("Calculated T: "));
:							Logger.appendLong(t);
:							Logger.flush(Mote.WARN);
:							createNextBroadcast(n, currentTime, currentSinkIndex, t, currentTime);
:						}
:					}
:				}
:			}
:			sinks[currentSinkIndex].setBeaconN(n);
:			sinks[currentSinkIndex].setBeaconT(currentTime);
:			return 0;
:		}
:	
:		protected static boolean isValidPeriod(long period){
:			return T_MIN-TIME_ADJUSTMENT<=period && period <= T_MAX+TIME_ADJUSTMENT;
:		}
:	
:		protected static void broadcastToSink(byte sinkIndex, long time){
:			if (radio.getState()==Device.S_RXEN){
:				radio.stopRx();
:			}
:			Logger.appendString(csr.s2b("BROADCASTING! on channel: "));
:			Logger.appendByte(sinks[sinkIndex].getChannel());
:			Logger.appendString(csr.s2b("at time: "));
:			Logger.appendLong(Time.currentTicks());
:			Logger.flush(Mote.WARN);
:	
:			previousSinkIndex = (int) currentSinkIndex;
:			
:			setChannel((int) sinkIndex);
:			sendPerSink[sinkIndex]++;
:			
:			
:			radio.transmit(Device.TIMED, xmit, 0, 12, Time.currentTicks()+Time.toTickSpan(Time.MILLISECS, T_MIN/2));
:			Logger.appendString(csr.s2b("Finished broadcast."));
:			Logger.flush(Mote.INFO);
:		}
:	
:		private static int onTransmit(int flags, byte[] data, int len, int info, long time) {
:			sinks[currentSinkIndex].setNextBeaconTime(Time.currentTime(Time.MILLISECS)+(sinks[currentSinkIndex].getT()*(11+sinks[currentSinkIndex].getMaxObservedN())));
:			//TODO schedule listen callback
:	//		Logger.appendInt(currentSinkIndex);
:	//		Logger.flush(Mote.ERROR);
:			sinks[currentSinkIndex].setBroadcastSet(false);
:			if (sinks[previousSinkIndex].getT()==-1){
:				setChannel(previousSinkIndex);
:			} else {
:				setChannel(pickNextSink(currentSinkIndex));
:			}
:			startListening();
:			Logger.appendString(csr.s2b("Broadcast results: "));
:			Logger.appendInt(sendPerSink[0]);
:			Logger.appendString(csr.s2b("/"));
:			Logger.appendInt(sendPerSink[1]);
:			Logger.appendString(csr.s2b("/"));
:			Logger.appendInt(sendPerSink[2]);
:			Logger.flush(Mote.WARN);
:			return 0;
:		}
:		
:		private static int pickNextSink(int currSinkIndex){
:			int x = 0;
:			long nextBeaconTime = -1;
:			int nextBeaconSinkIndex = -1;
:			for (x=0; x<sinks.length;x++){
:				if (x!=currSinkIndex){
:					if (nextBeaconTime==-1 | sinks[x].getNextBeaconTime()<nextBeaconTime){
:						nextBeaconTime = sinks[x].getNextBeaconTime();
:						nextBeaconSinkIndex = x;
:					}
:				}
:			}
:			if (nextBeaconSinkIndex==-1){
:				return (currSinkIndex+1) % (sinks.length);
:			} else {
:				Logger.appendString(csr.s2b("PICKED DIFFERENT CHANNEL!: "));
:				Logger.appendInt(nextBeaconSinkIndex);
:				if (((currSinkIndex+1) % (sinks.length))==nextBeaconSinkIndex){
:					Logger.appendString(csr.s2b("PAA!: "));
:				}
:				Logger.flush(Mote.ERROR);
:				return nextBeaconSinkIndex;
:			}
:		}
:		
:		
:		private static void setChannel(int sinkIndex){
:	
:			if (radio.getState()==Device.S_RXEN){
:				radio.stopRx();
:			}
:			
:			Util.set16le(xmit, 3, sinks[sinkIndex].getPanid()); // destination PAN address 
:			Util.set16le(xmit, 5, 0xFFFF); // broadcast address 
:			Util.set16le(xmit, 7, sinks[sinkIndex].getPanid()); // own PAN address 
:			
:			radio.setChannel((byte) sinks[sinkIndex].getChannel());
:			radio.setPanId(sinks[sinkIndex].getPanid(), true);
:	//		radio.setShortAddr(sinks[sinkIndex].getAddress());
:					
:			currentSinkIndex = sinkIndex;
:			setLEDListening((byte) sinkIndex);
:	
:			Logger.appendString(csr.s2b("Changed channel to: "));
:			Logger.appendByte(sinks[sinkIndex].getChannel());
:			Logger.appendString(csr.s2b(" at time: "));
:			Logger.flush(Mote.WARN);
:		}
:	
:		
:		private static void startListening(){
:			radio.startRx(Device.TIMED, Time.currentTicks()+Time.toTickSpan(Time.MILLISECS, 10), Time.currentTicks()+0x7FFFFFFF);
:		}
:		
:		private static void createNextBroadcast(int beaconN, long beaconT, int channel, long t, long currentTimeMS) {
:			long broadcastTimeByMSSpan = (t  * beaconN);
:			long deadline = broadcastTimeByMSSpan + T_MIN;
:			setupBroadcastAndCallBack(broadcastTimeByMSSpan, deadline, channel, currentTimeMS);
:			sinks[currentSinkIndex].setBroadcastSet(true);
:			setChannel(pickNextSink(currentSinkIndex));
:			startListening();
:		}
:	
:		private static void setupBroadcastAndCallBack(long broadcastTime, long deadline, int sinkIndex, long currentTimeMS){
:	//		ChannelSwitch cs = new ChannelSwitch(broadcastTime, sinks[sinkIndex].getChannel());
:	//		for (ChannelSwitch c: channelSwitches){
:	//			if (c!=null && c.getTime()==broadcastTime){
:	//				return;
:	//			}
:	//		}
:	//		channelSwitches = insertChannelSwitchInBuffer(channelSwitches, cs);
:			
:			Logger.appendString(csr.s2b("PREPARING BROADCAST! for channel: "));
:			Logger.appendInt(sinkIndex);
:			Logger.flush(Mote.WARN);
:			
:			switch (sinkIndex){
:			case 0:
:				timer0.setAlarmBySpan(Time.toTickSpan(Time.MILLISECS, broadcastTime));
:				break;
:			case 1:
:				timer1.setAlarmBySpan(Time.toTickSpan(Time.MILLISECS, broadcastTime));
:				break;
:			case 2:
:				timer2.setAlarmBySpan(Time.toTickSpan(Time.MILLISECS, broadcastTime));
:				break;
:			}
:		}
:		
:		
:	//	private static ChannelSwitch[] insertChannelSwitchInBuffer(ChannelSwitch[] css, ChannelSwitch cs){
:	//		// If space available in buffer
:	//		int x;
:	//		for (x=0; x<css.length; x++){
:	//			if (css[x]==null){
:	//				css[x] = cs;
:	//				return css;
:	//			}
:	//		}
:	//		ChannelSwitch[] newCss = new ChannelSwitch[css.length+2];
:	//		for (x=0; x<css.length; x++){
:	//			newCss[x] = css[x];
:	//		}
:	//		newCss[x+1] = cs;
:	//		return newCss;
:	//	}
:	
:	
:		private static int getDiffN(int beacon1N, int beacon2N) {
:			return beacon1N - beacon2N;
:		}
:	
:		private static long getDiffT(long beacon1T, long beacon2T) {
:			long diffT = beacon2T-beacon1T;
:			return (diffT < 0) ? -diffT : diffT;
:		}
:	
:		private static void toggleLed(int led){
:			int ledState = LED.getState((byte) led);
:			if (ledState==0){
:				LED.setState((byte) led, (byte) 1);
:			} else {
:				LED.setState((byte) led, (byte) 0);
:			}
:		}
:	
:		private static void setLEDListening(byte led){
:			for (byte b: new byte[]{YELLOW_LED, RED_LED, GREEN_LED}){
:				if (b==led){
:					LED.setState(b, (byte) 1);
:				} else {
:					LED.setState(b, (byte) 0);
:				}
:			}
:		}
:		
:		//	// Called on a timer alarm
:		//    public static void periodicSend(byte param, long time) {
:		//        
:		//        if(nc>0){
:		//	        // transmit a beacon 
:		//    	    radio.transmit(Device.ASAP|Radio.TXMODE_POWER_MAX, xmit, 0, 12, 0);
:		//        	// program new alarm
:		//        	tsend.setAlarmBySpan(wait);
:		//        	nc--;
:		//        	xmit[11]--;
:		//        }
:		//        else{
:		//        	//start reception phase
:		//	        radio.startRx(Device.ASAP, 0, Time.currentTicks()+wait);
:		//	        // turn green LED on 
:		//	        LED.setState((byte)1, (byte)1);
:		//	        
:		//        }
:		//        
:		//    }
:	}
S	M:/EMBS/EMBS_assessment2/part2/src/embs/SinkParameters.java
:	package embs;
:	
:	import com.ibm.saguaro.system.Timer;
:	
:	public class SinkParameters {
:	    private byte channel;
:	    private byte panid;
:	    private byte address;
:	    
:	    private int maxObservedN = -1;
:	    private long T = -1;
:	    private int beaconN = -1;
:	    private long beaconT = -1;
:	    private boolean broadcastSet = false;
:		private long nextBeaconTime;
:	    
:	    public SinkParameters(byte channel, byte panid, byte address){
:	    	this.channel =  channel;
:	    	this.panid =  panid;
:	    	this.address =  address;
:	    }
:	
:	    public boolean getBroadcastSet(){
:	    	return this.broadcastSet;
:	    }
:	    
:	    public void setBroadcastSet(boolean value){
:	    	this.broadcastSet = value;
:	    }
:	    
:	    public void addBeacon(int n, long t){
:	    	this.beaconN = n;
:	    	this.beaconT = t;
:	    }
:	    
:		public void setMaxObservedN(int n) {this.maxObservedN = n;}
:		public long getT() {return T;}
:		public void setT(long t) {this.T = t;}
:		public int getMaxObservedN() {return maxObservedN;}
:		public byte getChannel() {return channel;}
:		public byte getPanid() {return panid;}
:		public byte getAddress() {return address;}
:	
:		public int getBeaconN() {
:			return beaconN;
:		}
:		public void setBeaconN(int beaconN) {
:			this.beaconN = beaconN;
:		}
:		public long getBeaconT() {
:			return beaconT;
:		}
:		public void setBeaconT(long beaconT) {
:			this.beaconT = beaconT;
:		}
:	
:		public void setNextBeaconTime(long l) {
:			this.nextBeaconTime = l;
:		}
:		
:		public long getNextBeaconTime(){
:			return this.nextBeaconTime;
:		}
:	  
:		
:	}
