A!	SourceNode-1.1.04937	2.0	Java

X	c:01/000	com.ibm.saguaro.system.Assembly
X	c:01/001	com.ibm.saguaro.system.Util
X	c:01/002	com.ibm.saguaro.system.Timer
X	c:01/003	com.ibm.saguaro.system.Time
X	c:01/004	com.ibm.saguaro.system.MoteException
X	c:01/005	com.ibm.saguaro.system.Device
X	c:01/006	com.ibm.saguaro.system.SDev
X	c:01/007	com.ibm.saguaro.system.CDev
X	c:01/008	com.ibm.saguaro.system.OutOfResourcesException
X	c:01/009	com.ibm.saguaro.system.OsException
X	c:01/00A	com.ibm.saguaro.system.NullReferenceException
X	c:01/00B	com.ibm.saguaro.system.SystemException
X	c:01/00C	com.ibm.saguaro.system.Mote
X	c:01/00D	com.ibm.saguaro.system.LIP
X	c:01/00E	com.ibm.saguaro.system.LED
X	c:01/00F	com.ibm.saguaro.system.InvalidCastException
X	c:01/010	com.ibm.saguaro.system.IndexOutOfRangeException
X	c:01/011	com.ibm.saguaro.system.I2C
X	c:01/012	com.ibm.saguaro.system.GPIO
X	c:01/013	com.ibm.saguaro.system.Err
X	c:01/014	com.ibm.saguaro.system.DeviceException
X	c:01/015	com.ibm.saguaro.system.SPI
X	c:01/016	com.ibm.saguaro.system.Radio
X	c:01/017	com.ibm.saguaro.system.WLIP
X	c:01/018	com.ibm.saguaro.system.ArrayTypeMismatchException
X	c:01/019	com.ibm.saguaro.system.ArithmException
X	c:01/01A	com.ibm.saguaro.system.ArgumentException
X	c:01/01B	com.ibm.saguaro.system.AccessException
X	c:01/01C	com.ibm.saguaro.system.ADC
X	c:02/000	com.ibm.saguaro.logger.Logger

C!	c:004	embs.SourceNode	-1	0	c:000
R	tsend	r:com.ibm.saguaro.system.Timer	0	0
R	tstart	r:com.ibm.saguaro.system.Timer	0	1
R	xmit	c[]	0	2
R	radio	r:com.ibm.saguaro.system.Radio	0	3
R	sinks	r:embs.SinkParameter[]	0	4
F	light	z	0	0
F	wait	l	0	1
F	n	i	0	3
F	nc	i	0	4
F	t	i	0	5
F	currentChannel	i	0	6
F	ownPanId	c	0	7
F	ownShortAddr	c	0	8
M!	SourceNode(r:embs.SourceNode)v	-1	m:00C8	00190	4
M	access$000(i,c[],i,i,l)i	-1	m:00CA	00194	14
M	onReceive(i,c[],i,i,l)i	-1	m:00D1	001A2	58
M!	restart(c,l)v	-1	m:00EE	001DC	32
M	setChannel(c)v	-1	m:00FE	001FC	12
M	toggleLed(i)v	-1	m:0104	00208	28

C!	c:006	embs.SinkParameter	1	1	c:000
f	T	i	1	0
f	N	i	1	1
f	address	c	1	2
f	panid	c	1	3
f	channel	c	1	4
m!	getAddress()c	1	m:00AC	00158	8	6
m!	getChannel()c	1	m:00B0	00160	8	4
m!	getN()i	1	m:00B4	00168	8	3
m!	getPanid()c	1	m:00B8	00170	8	5
m!	getT()i	1	m:00BC	00178	8	1
m!	setN(i)v	1	m:00C0	00180	8	0
m!	setT(i)v	1	m:00C4	00188	8	2
M!	SinkParameter(r:embs.SinkParameter,i,i,i)v	1	m:00A2	00144	20

C	c:00E	com.ibm.saguaro.system.$tatics	-1	-1	c:01/000
r	embs.SourceNode.tsend	r:com.ibm.saguaro.system.Timer	-1	0
r	embs.SourceNode.tstart	r:com.ibm.saguaro.system.Timer	-1	1
r	embs.SourceNode.xmit	c[]	-1	2
r	embs.SourceNode.radio	r:com.ibm.saguaro.system.Radio	-1	3
r	embs.SourceNode.sinks	r:embs.SinkParameter[]	-1	4
f	embs.SourceNode.light	z	-1	0
f	embs.SourceNode.wait	l	-1	1
f	embs.SourceNode.n	i	-1	3
f	embs.SourceNode.nc	i	-1	4
f	embs.SourceNode.t	i	-1	5
f	embs.SourceNode.currentChannel	i	-1	6
f	embs.SourceNode.ownPanId	c	-1	7
f	embs.SourceNode.ownShortAddr	c	-1	8
M	__init()v	-1	m:0020	00040	260

c	0004D	0	12	0	12	0	m:0020
c	00051	0	16	0	16	0	m:0020
c	0005B	0	17	0	17	0	m:0020
c	00060	0	20	0	20	0	m:0020
c	00066	0	22	0	22	0	m:0020
c	0009D	0	24	0	24	0	m:0020
c	000A2	0	25	0	25	0	m:0020
c	000A7	0	26	0	26	0	m:0020
c	000AC	0	29	0	29	0	m:0020
c	000B8	0	32	0	32	0	m:0020
c	000C2	0	34	0	34	0	m:0020
c	000CC	0	35	0	35	0	m:0020
c	000D5	0	39	0	39	0	m:0020
c	000DB	0	40	0	40	0	m:0020
c	000E1	0	41	0	41	0	m:0020
c	000E9	0	42	0	42	0	m:0020
c	000F4	0	43	0	43	0	m:0020
c	000FD	0	44	0	44	0	m:0020
c	00109	0	45	0	45	0	m:0020
c	00115	0	47	0	47	0	m:0020
c	0011F	0	50	0	50	0	m:0020
c	00129	0	78	0	78	0	m:0020
c	0012E	0	79	0	79	0	m:0020
c	00143	0	80	0	80	0	m:0020
e	00144	m:0020
c	00147	1	12	0	12	0	m:00A2
l!	00147	00157	r:embs.SinkParameter	this	m:00A2	0
l!	00147	00157	i	channel	m:00A2	1
l!	00147	00157	i	panid	m:00A2	2
l!	00147	00157	i	address	m:00A2	3
c	0014C	1	13	0	13	0	m:00A2
c	00151	1	14	0	14	0	m:00A2
c	00156	1	15	0	15	0	m:00A2
e!	00158	m:00A2
c	0015B	1	23	0	23	0	m:00AC
l	0015B	0015F	r:embs.SinkParameter	this	m:00AC	0
e!	00160	m:00AC
c	00163	1	21	0	21	0	m:00B0
l	00163	00167	r:embs.SinkParameter	this	m:00B0	0
e!	00168	m:00B0
c	0016B	1	20	0	20	0	m:00B4
l	0016B	0016F	r:embs.SinkParameter	this	m:00B4	0
e!	00170	m:00B4
c	00173	1	22	0	22	0	m:00B8
l	00173	00177	r:embs.SinkParameter	this	m:00B8	0
e!	00178	m:00B8
c	0017B	1	18	0	18	0	m:00BC
l	0017B	0017F	r:embs.SinkParameter	this	m:00BC	0
e!	00180	m:00BC
c	00183	1	17	0	17	0	m:00C0
l!	00183	00188	r:embs.SinkParameter	this	m:00C0	0
l	00183	00188	i	n	m:00C0	1
e!	00188	m:00C0
c	0018B	1	19	0	19	0	m:00C4
l!	0018B	00190	r:embs.SinkParameter	this	m:00C4	0
l	0018B	00190	i	t	m:00C4	1
e!	00190	m:00C4
c	00193	0	8	0	8	0	m:00C8
l!	00193	00194	r:embs.SourceNode	this	m:00C8	0
e!	00194	m:00C8
c	00197	0	8	0	8	0	m:00CA
l	00197	001A1	i	x0	m:00CA	0
l	00197	001A1	c[]	x1	m:00CA	1
l	00197	001A1	i	x2	m:00CA	2
l	00197	001A1	i	x3	m:00CA	3
l	00197	001A1	l	x4	m:00CA	4
e	001A2	m:00CA
c	001A5	0	84	0	84	0	m:00D1
l	001A5	001DB	i	flags	m:00D1	0
l	001A5	001DB	c[]	data	m:00D1	1
l	001A5	001DB	i	len	m:00D1	2
l	001A5	001DB	i	info	m:00D1	3
l	001A5	001DB	l	time	m:00D1	4
c	001A8	0	86	0	86	0	m:00D1
c	001AD	0	89	0	89	0	m:00D1
c	001BC	0	91	0	91	0	m:00D1
c	001BE	0	96	0	96	0	m:00D1
c	001C3	0	97	0	97	0	m:00D1
c	001C8	0	98	0	98	0	m:00D1
c	001CD	0	100	0	100	0	m:00D1
c	001D5	0	101	0	101	0	m:00D1
c	001D9	0	102	0	102	0	m:00D1
e	001DC	m:00D1
c	001DF	0	145	0	145	0	m:00EE
l!	001DF	001FB	c	param	m:00EE	0
l!	001DF	001FB	l	time	m:00EE	1
c	001E5	0	146	0	146	0	m:00EE
c	001EF	0	147	0	147	0	m:00EE
c	001FA	0	149	0	149	0	m:00EE
e!	001FC	m:00EE
c	001FF	0	117	0	117	0	m:00FE
l	001FF	00207	c	channel	m:00FE	0
c	00206	0	118	0	118	0	m:00FE
e	00208	m:00FE
c	0020B	0	107	0	107	0	m:0104
l	0020B	00223	i	led	m:0104	0
c	00211	0	108	0	108	0	m:0104
l	00211	00223	i	ledState	m:0104	1
c	00214	0	109	0	109	0	m:0104
c	0021C	0	111	0	111	0	m:0104
c	00222	0	113	0	113	0	m:0104
e	00224	m:0104
S	M:/EMBS/EMBS_assessment/part2/src/embs/SourceNode.java
:	package embs;
:	
:	import com.ibm.saguaro.system.*;
:	import com.ibm.saguaro.logger.*;
:	//import embs.SinkParameter;
:	
:	
:	public class SourceNode {
:	
:	    private static Timer  tsend;
:	    private static Timer  tstart;
:	    private static boolean light=false;
:	    
:	    private static byte[] xmit;
:	    private static long   wait;
:	    static Radio radio = new Radio();
:	    private static int n = 8; // number of beacons of sync phase - sample only, assessment will use unknown values
:	    private static int nc;
:	    
:	    private static int t = 600; // milliseconds between beacons - sample only, assessment will use unknown values 
:	    
:	    private static SinkParameter[] sinks = {new SinkParameter(11, 11, 11), new SinkParameter(12, 12, 12),new SinkParameter(13, 13, 13)};
:	    // settings for SourceNode A
:	    private static int currentChannel = 11;
:	    private static byte ownPanId = (byte) 14;
:	    private static byte ownShortAddr = (byte) 14;
:	    static {
:	        // Open the default radio
:	        radio.open(Radio.DID, null, 0, 0);
:	
:	        // Set channel 
:	        radio.setChannel((byte) currentChannel);
:	        // Set the PAN ID and the short address
:	        radio.setPanId(ownPanId, true);
:	        radio.setShortAddr(ownShortAddr);
:	        
:	        
:	        // Prepare beacon frame with source and destination addressing
:	        xmit = new byte[12];
:	        xmit[0] = Radio.FCF_BEACON;
:	        xmit[1] = Radio.FCA_SRC_SADDR|Radio.FCA_DST_SADDR;
:	        Util.set16le(xmit, 3, ownPanId); // destination PAN address 
:	        Util.set16le(xmit, 5, 0xFFFF); // broadcast address 
:	        Util.set16le(xmit, 7, ownPanId); // own PAN address 
:	        Util.set16le(xmit, 9, ownShortAddr); // own short address 
:	
:	        xmit[11] = (byte)n;
:	
:			// register delegate for received frames
:	        radio.setRxHandler(new DevCallback(null){
:	                public int invoke (int flags, byte[] data, int len, int info, long time) {
:	                    return  SourceNode.onReceive(flags, data, len, info, time);
:	                }
:	            });
:	
:	//        // Setup a periodic timer callback for beacon transmissions
:	//        tsend = new Timer();
:	//        tsend.setCallback(new TimerEvent(null){
:	//                public void invoke(byte param, long time){
:	//                    SourceNode.periodicSend(param, time);
:	//                }
:	//            });
:	            
:	
:	        // Setup a periodic timer callback to restart the protocol
:	//        tstart = new Timer();
:	//        tstart.setCallback(new TimerEvent(null){
:	//                public void invoke(byte param, long time){
:	//                    SourceNode.restart(param, time);
:	//                }
:	//            });
:	
:	//            
:	        // Convert the periodic delay from ms to platform ticks
:	//        wait = Time.toTickSpan(Time.MILLISECS, t);
:	        
:	//        tstart.setAlarmBySpan(Time.toTickSpan(Time.SECONDS, 5)); //starts the protocol 5 seconds after constructing the assembly
:	        LED.setState((byte)2, (byte)1);  
:	        radio.startRx(Device.ASAP, 0, Time.currentTicks()+0x7FFFFFFF);
:	    }
:	
:	    // Called when a frame is received or at the end of a reception period 
:	    private static int onReceive (int flags, byte[] data, int len, int info, long time) {
:	        if (data == null) { // marks end of reception period
:	            // turn green LED off 
:		        LED.setState((byte)1, (byte)0);
:		        
:		        //set alarm to restart protocol
:		    	tstart.setAlarmBySpan(10*wait);
:	                    
:	            return 0;
:	        }
:	
:	
:			// frame received, so blink red LED and log its payload
:	        LED.setState((byte) 0, (byte) 1);
:	        LED.setState((byte) 1, (byte) 1);
:	        LED.setState((byte) 2, (byte) 1);
:	
:			Logger.appendByte(data[11]);
:	        Logger.flush(Mote.WARN);
:	        return 0;
:	        
:	    }
:	    
:	    private static void toggleLed(int led){
:	    	int ledState = LED.getState((byte) led);
:	    	if (ledState==0){
:	    		LED.setState((byte) led, (byte) 1);
:	    	} else {
:	    		LED.setState((byte) led, (byte) 0);
:	    	}
:	    }
:	
:	
:	    private static void setChannel(byte channel) {
:	        radio.setChannel(channel);
:		}
:	
:	
:	//	// Called on a timer alarm
:	//    public static void periodicSend(byte param, long time) {
:	//        
:	//        if(nc>0){
:	//	        // transmit a beacon 
:	//    	    radio.transmit(Device.ASAP|Radio.TXMODE_POWER_MAX, xmit, 0, 12, 0);
:	//        	// program new alarm
:	//        	tsend.setAlarmBySpan(wait);
:	//        	nc--;
:	//        	xmit[11]--;
:	//        }
:	//        else{
:	//        	//start reception phase
:	//	        radio.startRx(Device.ASAP, 0, Time.currentTicks()+wait);
:	//	        // turn green LED on 
:	//	        LED.setState((byte)1, (byte)1);
:	//	        
:	//        }
:	//        
:	//    }
:	
:	
:	    // Called on a timer alarm, starts the protocol
:	    public static void restart(byte param, long time) {
:	        nc=n;
:	        xmit[11]=(byte)n;
:	       	tsend.setAlarmBySpan(0);
:	        
:	    }
:	
:	
:	
:	}
S	M:/EMBS/EMBS_assessment/part2/src/embs/SinkParameter.java
:	package embs;
:	
:	public class SinkParameter {
:	    private byte channel;
:	    private byte panid;
:	    private byte address;
:	    
:	    private int N;
:	    private int T;
:	    
:	    public SinkParameter(int channel, int panid, int address){
:	    	this.channel = (byte) channel;
:	    	this.panid = (byte) panid;
:	    	this.address = (byte) address;
:	    }
:	
:		public void setN(int n) {this.N = n;}
:		public int getT() {return T;}
:		public void setT(int t) {this.T = t;}
:		public int getN() {return N;}
:		public byte getChannel() {return channel;}
:		public byte getPanid() {return panid;}
:		public byte getAddress() {return address;}
:	    
:	    
:	}
