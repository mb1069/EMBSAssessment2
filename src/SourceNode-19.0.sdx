A!	SourceNode-19.0.49840	2.0	Java

X	c:01/000	com.ibm.saguaro.system.Assembly
X	c:01/001	com.ibm.saguaro.system.Util
X	c:01/002	com.ibm.saguaro.system.Timer
X	c:01/003	com.ibm.saguaro.system.Time
X	c:01/004	com.ibm.saguaro.system.MoteException
X	c:01/005	com.ibm.saguaro.system.Device
X	c:01/006	com.ibm.saguaro.system.SDev
X	c:01/007	com.ibm.saguaro.system.CDev
X	c:01/008	com.ibm.saguaro.system.OutOfResourcesException
X	c:01/009	com.ibm.saguaro.system.OsException
X	c:01/00A	com.ibm.saguaro.system.NullReferenceException
X	c:01/00B	com.ibm.saguaro.system.SystemException
X	c:01/00C	com.ibm.saguaro.system.Mote
X	c:01/00D	com.ibm.saguaro.system.LIP
X	c:01/00E	com.ibm.saguaro.system.LED
X	c:01/00F	com.ibm.saguaro.system.InvalidCastException
X	c:01/010	com.ibm.saguaro.system.IndexOutOfRangeException
X	c:01/011	com.ibm.saguaro.system.I2C
X	c:01/012	com.ibm.saguaro.system.GPIO
X	c:01/013	com.ibm.saguaro.system.Err
X	c:01/014	com.ibm.saguaro.system.DeviceException
X	c:01/015	com.ibm.saguaro.system.SPI
X	c:01/016	com.ibm.saguaro.system.Radio
X	c:01/017	com.ibm.saguaro.system.WLIP
X	c:01/018	com.ibm.saguaro.system.ArrayTypeMismatchException
X	c:01/019	com.ibm.saguaro.system.ArithmException
X	c:01/01A	com.ibm.saguaro.system.ArgumentException
X	c:01/01B	com.ibm.saguaro.system.AccessException
X	c:01/01C	com.ibm.saguaro.system.ADC
X	c:02/000	com.ibm.saguaro.logger.Logger

C!	c:005	embs.SourceNode	-1	0	c:000
R	timer0	r:com.ibm.saguaro.system.Timer	0	0
R	timer1	r:com.ibm.saguaro.system.Timer	0	1
R	timer2	r:com.ibm.saguaro.system.Timer	0	2
R	xmit	c[]	0	3
R	radio	r:com.ibm.saguaro.system.Radio	0	4
R	sinks	r:embs.SinkParameters[]	0	5
R	broadcasted	i[]	0	6
R	broadcasts	r:embs.Broadcast[]	0	7
F	currentSinkIndex	i	0	0
F	ownPanId	c	0	1
F	ownShortAddr	c	0	2
F	YELLOW_LED	c	0	3
F	GREEN_LED	c	0	4
F	RED_LED	c	0	5
F	N_MIN	i	0	6
F	N_MAX	i	0	7
F	T_MIN	l	0	8
F	T_MAX	l	0	10
F	previousChannel	i	0	12
F	TIME_ADJUSTMENT	l	0	13
F	lastChannelSwitch	l	0	15
F	wait	l	0	3327
H	BROADCASTING_on_channel$UTF8	b[]	0	66,82,79,65,68,67,65,83,84,73,78,71,33,32,111,110,32,99,104,97,110,110,101,108,58,32
H	Broadcast_results$UTF8	b[]	0	66,114,111,97,100,99,97,115,116,32,114,101,115,117,108,116,115,58,32
H	Calculated_T$UTF8	b[]	0	67,97,108,99,117,108,97,116,101,100,32,84,58,32
H	Changed_channel_to$UTF8	b[]	0	67,104,97,110,103,101,100,32,99,104,97,110,110,101,108,32,116,111,58,32
H	Finished_broadcast$UTF8	b[]	0	70,105,110,105,115,104,101,100,32,98,114,111,97,100,99,97,115,116,46
H	PAA$UTF8	b[]	0	80,65,65,33,58,32
H	PICKED_DIFFERENT_CHANNEL$UTF8	b[]	0	80,73,67,75,69,68,32,68,73,70,70,69,82,69,78,84,32,67,72,65,78,78,69,76,33,58,32
H	PREPARING_BROADCAST_for_channel$UTF8	b[]	0	80,82,69,80,65,82,73,78,71,32,66,82,79,65,68,67,65,83,84,33,32,102,111,114,32,99,104,97,110,110,101,108,58,32
H	Received_packet_c$UTF8	b[]	0	82,101,99,101,105,118,101,100,32,112,97,99,107,101,116,32,99,58
H	at_time$UTF8	b[]	0	97,116,32,116,105,109,101,58,32
H	at_time0$UTF8	b[]	0	32,97,116,32,116,105,109,101,58,32
H	n$UTF8	b[]	0	32,110,58
H	s$UTF8	b[]	0	47
M!	SourceNode(r:embs.SourceNode)v	-1	m:019C	00338	4
M	access$000(i,c[],i,i,l)i	-1	m:019E	0033C	14
M	access$100(i,c[],i,i,l)i	-1	m:01A5	0034A	14
M!	broadcastToSink(c,l)v	-1	m:01AC	00358	94
M	createNextBroadcast(i,l,i,l,l)v	-1	m:01DB	003B6	52
M	getDiffN(i,i)i	-1	m:01F5	003EA	8
M	getDiffT(l,l)l	-1	m:01F9	003F2	26
M	onReceive(i,c[],i,i,l)i	-1	m:0206	0040C	346
M	onTransmit(i,c[],i,i,l)i	-1	m:02B3	00566	114
M	pickNextSink(i)i	-1	m:02EC	005D8	118
M	setChannel(i)v	-1	m:0327	0064E	128
M	setLEDListening(c)v	-1	m:0367	006CE	60
M	setupBroadcastAndCallBack(l,l,i,l)v	-1	m:0385	0070A	70
M	startListening()v	-1	m:03A8	00750	34
M	toggleLed(i)v	-1	m:03B9	00772	28

C!	c:007	embs.SinkParameters	1	1	c:000
f	nextBeaconTime	l	1	0
f	broadcastSet	z	1	2
f	beaconT	l	1	3
f	beaconN	i	1	5
f	T	l	1	6
f	maxObservedN	i	1	8
f	address	c	1	9
f	panid	c	1	10
f	channel	c	1	11
m!	addBeacon(i,l)v	1	m:015A	002B4	12	2
m!	getAddress()c	1	m:0160	002C0	8	9
m!	getBeaconN()i	1	m:0164	002C8	8	10
m!	getBeaconT()l	1	m:0168	002D0	8	12
m!	getBroadcastSet()z	1	m:016C	002D8	8	0
m!	getChannel()c	1	m:0170	002E0	8	7
m!	getMaxObservedN()i	1	m:0174	002E8	8	6
m!	getNextBeaconTime()l	1	m:0178	002F0	8	15
m!	getPanid()c	1	m:017C	002F8	8	8
m!	getT()l	1	m:0180	00300	8	4
m!	setBeaconN(i)v	1	m:0184	00308	8	11
m!	setBeaconT(l)v	1	m:0188	00310	8	13
m!	setBroadcastSet(z)v	1	m:018C	00318	8	1
m!	setMaxObservedN(i)v	1	m:0190	00320	8	3
m!	setNextBeaconTime(l)v	1	m:0194	00328	8	14
m!	setT(l)v	1	m:0198	00330	8	5
M!	SinkParameters(r:embs.SinkParameters,c,c,c)v	1	m:0144	00288	44

C!	c:015	embs.ChannelSwitch	2	2	c:000
f	channel	c	2	0
f	time	l	2	1
m!	getChannel()c	2	m:0134	00268	8	3
m!	getTime()l	2	m:0138	00270	8	0
m!	setChannel(c)v	2	m:013C	00278	8	2
m!	setTime(l)v	2	m:0140	00280	8	1
M!	ChannelSwitch(r:embs.ChannelSwitch,l,c)v	2	m:012E	0025C	12

C!	c:01A	embs.Broadcast	3	3	c:000
f	broadcastTime	l	3	0
m!	getBroadcastTime()l	3	m:0126	0024C	8	0
m!	setBroadcastTime(l)v	3	m:012A	00254	8	1
M!	Broadcast(r:embs.Broadcast,l)v	3	m:0122	00244	8

C	c:01E	com.ibm.saguaro.system.$tatics	-1	-1	c:01/000
r	embs.SourceNode.timer0	r:com.ibm.saguaro.system.Timer	-1	0
r	embs.SourceNode.timer1	r:com.ibm.saguaro.system.Timer	-1	1
r	embs.SourceNode.timer2	r:com.ibm.saguaro.system.Timer	-1	2
r	embs.SourceNode.xmit	c[]	-1	3
r	embs.SourceNode.radio	r:com.ibm.saguaro.system.Radio	-1	4
r	embs.SourceNode.sinks	r:embs.SinkParameters[]	-1	5
r	embs.SourceNode.broadcasted	i[]	-1	6
r	embs.SourceNode.broadcasts	r:embs.Broadcast[]	-1	7
f	embs.SourceNode.currentSinkIndex	i	-1	0
f	embs.SourceNode.ownPanId	c	-1	1
f	embs.SourceNode.ownShortAddr	c	-1	2
f	embs.SourceNode.YELLOW_LED	c	-1	3
f	embs.SourceNode.GREEN_LED	c	-1	4
f	embs.SourceNode.RED_LED	c	-1	5
f	embs.SourceNode.N_MIN	i	-1	6
f	embs.SourceNode.N_MAX	i	-1	7
f	embs.SourceNode.T_MIN	l	-1	8
f	embs.SourceNode.T_MAX	l	-1	10
f	embs.SourceNode.previousChannel	i	-1	12
f	embs.SourceNode.TIME_ADJUSTMENT	l	-1	13
f	embs.SourceNode.lastChannelSwitch	l	-1	15
M	__init()v	-1	m:0040	00080	452

c	0008D	0	16	0	16	0	m:0040
c	00097	0	18	0	18	0	m:0040
c	000CE	0	23	0	23	0	m:0040
c	000D2	0	24	0	24	0	m:0040
c	000D7	0	25	0	25	0	m:0040
c	000DB	0	28	0	28	0	m:0040
c	000DF	0	29	0	29	0	m:0040
c	000E3	0	30	0	30	0	m:0040
c	000E7	0	32	0	32	0	m:0040
c	000EB	0	33	0	33	0	m:0040
c	000F0	0	34	0	34	0	m:0040
c	000F8	0	35	0	35	0	m:0040
c	00100	0	37	0	37	0	m:0040
c	00111	0	40	0	40	0	m:0040
c	00118	0	43	0	43	0	m:0040
c	00120	0	44	0	44	0	m:0040
c	00128	0	49	0	49	0	m:0040
c	00134	0	51	0	51	0	m:0040
c	00139	0	52	0	52	0	m:0040
c	0013E	0	53	0	53	0	m:0040
c	00143	0	55	0	55	0	m:0040
c	0014D	0	56	0	56	0	m:0040
c	00154	0	57	0	57	0	m:0040
c	0015E	0	63	0	63	0	m:0040
c	00168	0	64	0	64	0	m:0040
c	0016F	0	65	0	65	0	m:0040
c	00179	0	71	0	71	0	m:0040
c	00183	0	72	0	72	0	m:0040
c	0018A	0	73	0	73	0	m:0040
c	00194	0	80	0	80	0	m:0040
c	001A4	0	82	0	82	0	m:0040
c	001B5	0	83	0	83	0	m:0040
c	001C5	0	86	0	86	0	m:0040
c	001CB	0	87	0	87	0	m:0040
c	001D1	0	88	0	88	0	m:0040
c	001D9	0	89	0	89	0	m:0040
c	001EB	0	90	0	90	0	m:0040
c	001F4	0	91	0	91	0	m:0040
c	00207	0	92	0	92	0	m:0040
c	0021A	0	95	0	95	0	m:0040
c	00224	0	101	0	101	0	m:0040
c	0022E	0	107	0	107	0	m:0040
c	00243	0	108	0	108	0	m:0040
e	00244	m:0040
c	00247	3	10	0	10	0	m:0122
l!	00247	0024C	r:embs.Broadcast	this	m:0122	0
l!	00247	0024C	l	broadcastTime	m:0122	1
c	0024B	3	11	0	11	0	m:0122
e!	0024C	m:0122
c	0024F	3	14	0	14	0	m:0126
l	0024F	00253	r:embs.Broadcast	this	m:0126	0
e!	00254	m:0126
c	00257	3	17	0	17	0	m:012A
l!	00257	0025C	r:embs.Broadcast	this	m:012A	0
l	00257	0025C	l	broadcastTime	m:012A	1
c	0025B	3	18	0	18	0	m:012A
e!	0025C	m:012A
c	0025F	2	15	0	15	0	m:012E
l!	0025F	00268	r:embs.ChannelSwitch	this	m:012E	0
l!	0025F	00268	l	time	m:012E	1
l	0025F	00268	c	channel	m:012E	3
c	00263	2	16	0	16	0	m:012E
c	00267	2	17	0	17	0	m:012E
e!	00268	m:012E
c	0026B	2	30	0	30	0	m:0134
l	0026B	0026F	r:embs.ChannelSwitch	this	m:0134	0
e!	00270	m:0134
c	00273	2	20	0	20	0	m:0138
l	00273	00277	r:embs.ChannelSwitch	this	m:0138	0
e!	00278	m:0138
c	0027B	2	27	0	27	0	m:013C
l!	0027B	00280	r:embs.ChannelSwitch	this	m:013C	0
l	0027B	00280	c	channel	m:013C	1
c	0027F	2	28	0	28	0	m:013C
e!	00280	m:013C
c	00283	2	23	0	23	0	m:0140
l!	00283	00288	r:embs.ChannelSwitch	this	m:0140	0
l	00283	00288	l	time	m:0140	1
c	00287	2	24	0	24	0	m:0140
e!	00288	m:0140
c	0028B	1	10	0	10	0	m:0144
l!	0028B	002B4	r:embs.SinkParameters	this	m:0144	0
l!	0028B	002B4	c	channel	m:0144	1
l!	0028B	002B4	c	panid	m:0144	2
l!	0028B	002B4	c	address	m:0144	3
c	0028F	1	11	0	11	0	m:0144
c	00297	1	12	0	12	0	m:0144
c	0029B	1	13	0	13	0	m:0144
c	002A3	1	14	0	14	0	m:0144
c	002A7	1	18	0	18	0	m:0144
c	002AB	1	19	0	19	0	m:0144
c	002AF	1	20	0	20	0	m:0144
c	002B3	1	21	0	21	0	m:0144
e!	002B4	m:0144
c	002B7	1	32	0	32	0	m:015A
l!	002B7	002C0	r:embs.SinkParameters	this	m:015A	0
l!	002B7	002C0	i	n	m:015A	1
l	002B7	002C0	l	t	m:015A	2
c	002BB	1	33	0	33	0	m:015A
c	002BF	1	34	0	34	0	m:015A
e!	002C0	m:015A
c	002C3	1	42	0	42	0	m:0160
l	002C3	002C7	r:embs.SinkParameters	this	m:0160	0
e!	002C8	m:0160
c	002CB	1	45	0	45	0	m:0164
l	002CB	002CF	r:embs.SinkParameters	this	m:0164	0
e!	002D0	m:0164
c	002D3	1	51	0	51	0	m:0168
l	002D3	002D7	r:embs.SinkParameters	this	m:0168	0
e!	002D8	m:0168
c	002DB	1	24	0	24	0	m:016C
l	002DB	002DF	r:embs.SinkParameters	this	m:016C	0
e!	002E0	m:016C
c	002E3	1	40	0	40	0	m:0170
l	002E3	002E7	r:embs.SinkParameters	this	m:0170	0
e!	002E8	m:0170
c	002EB	1	39	0	39	0	m:0174
l	002EB	002EF	r:embs.SinkParameters	this	m:0174	0
e!	002F0	m:0174
c	002F3	1	62	0	62	0	m:0178
l	002F3	002F7	r:embs.SinkParameters	this	m:0178	0
e!	002F8	m:0178
c	002FB	1	41	0	41	0	m:017C
l	002FB	002FF	r:embs.SinkParameters	this	m:017C	0
e!	00300	m:017C
c	00303	1	37	0	37	0	m:0180
l	00303	00307	r:embs.SinkParameters	this	m:0180	0
e!	00308	m:0180
c	0030B	1	48	0	48	0	m:0184
l!	0030B	00310	r:embs.SinkParameters	this	m:0184	0
l	0030B	00310	i	beaconN	m:0184	1
c	0030F	1	49	0	49	0	m:0184
e!	00310	m:0184
c	00313	1	54	0	54	0	m:0188
l!	00313	00318	r:embs.SinkParameters	this	m:0188	0
l	00313	00318	l	beaconT	m:0188	1
c	00317	1	55	0	55	0	m:0188
e!	00318	m:0188
c	0031B	1	28	0	28	0	m:018C
l!	0031B	00320	r:embs.SinkParameters	this	m:018C	0
l	0031B	00320	z	value	m:018C	1
c	0031F	1	29	0	29	0	m:018C
e!	00320	m:018C
c	00323	1	36	0	36	0	m:0190
l!	00323	00328	r:embs.SinkParameters	this	m:0190	0
l	00323	00328	i	n	m:0190	1
e!	00328	m:0190
c	0032B	1	58	0	58	0	m:0194
l!	0032B	00330	r:embs.SinkParameters	this	m:0194	0
l	0032B	00330	l	l	m:0194	1
c	0032F	1	59	0	59	0	m:0194
e!	00330	m:0194
c	00333	1	38	0	38	0	m:0198
l!	00333	00338	r:embs.SinkParameters	this	m:0198	0
l	00333	00338	l	t	m:0198	1
e!	00338	m:0198
c	0033B	0	8	0	8	0	m:019C
l!	0033B	0033C	r:embs.SourceNode	this	m:019C	0
e!	0033C	m:019C
c	0033F	0	8	0	8	0	m:019E
l	0033F	00349	i	x0	m:019E	0
l	0033F	00349	c[]	x1	m:019E	1
l	0033F	00349	i	x2	m:019E	2
l	0033F	00349	i	x3	m:019E	3
l	0033F	00349	l	x4	m:019E	4
e	0034A	m:019E
c	0034D	0	8	0	8	0	m:01A5
l	0034D	00357	i	x0	m:01A5	0
l	0034D	00357	c[]	x1	m:01A5	1
l	0034D	00357	i	x2	m:01A5	2
l	0034D	00357	i	x3	m:01A5	3
l	0034D	00357	l	x4	m:01A5	4
e	00358	m:01A5
c	0035B	0	162	0	162	0	m:01AC
l!	0035B	003B6	c	sinkIndex	m:01AC	0
l!	0035B	003B6	l	time	m:01AC	1
c	00361	0	163	0	163	0	m:01AC
c	0036C	0	164	0	164	0	m:01AC
c	00372	0	165	0	165	0	m:01AC
c	00378	0	166	0	166	0	m:01AC
c	0037C	0	168	0	168	0	m:01AC
c	00380	0	169	0	169	0	m:01AC
c	00389	0	170	0	170	0	m:01AC
c	0038D	0	172	0	172	0	m:01AC
c	003AB	0	173	0	173	0	m:01AC
c	003B1	0	174	0	174	0	m:01AC
c	003B5	0	175	0	175	0	m:01AC
e!	003B6	m:01AC
c	003B9	0	250	0	250	0	m:01DB
l	003B9	003EA	i	beaconN	m:01DB	0
l	003B9	003EA	l	beaconT	m:01DB	1
l	003B9	003EA	i	channel	m:01DB	3
l	003B9	003EA	l	t	m:01DB	4
l	003B9	003EA	l	currentTimeMS	m:01DB	6
c	003C0	0	251	0	251	0	m:01DB
l	003C0	003EA	l	broadcastTimeByMSSpan	m:01DB	8
c	003C8	0	252	0	252	0	m:01DB
l	003C8	003EA	l	deadline	m:01DB	10
c	003D2	0	253	0	253	0	m:01DB
c	003DD	0	254	0	254	0	m:01DB
c	003E6	0	255	0	255	0	m:01DB
c	003E9	0	256	0	256	0	m:01DB
e	003EA	m:01DB
c	003ED	0	304	0	304	0	m:01F5
l	003ED	003F1	i	beacon1N	m:01F5	0
l	003ED	003F1	i	beacon2N	m:01F5	1
e	003F2	m:01F5
c	003F5	0	308	0	308	0	m:01F9
l	003F5	0040C	l	beacon1T	m:01F9	0
l	003F5	0040C	l	beacon2T	m:01F9	2
c	003FA	0	309	0	309	0	m:01F9
l	003FA	0040C	l	diffT	m:01F9	4
e	0040C	m:01F9
c	0040F	0	113	0	113	0	m:0206
l	0040F	00566	i	flags	m:0206	0
l	0040F	00566	c[]	data	m:0206	1
l	0040F	00566	i	len	m:0206	2
l	0040F	00566	i	info	m:0206	3
l	0040F	00566	l	time	m:0206	4
c	00412	0	114	0	114	0	m:0206
c	00414	0	117	0	117	0	m:0206
c	0041A	0	119	0	119	0	m:0206
l	0041A	00566	i	n	m:0206	6
c	00427	0	120	0	120	0	m:0206
c	00432	0	122	0	122	0	m:0206
c	00438	0	123	0	123	0	m:0206
c	00445	0	124	0	124	0	m:0206
c	0044B	0	125	0	125	0	m:0206
c	00453	0	126	0	126	0	m:0206
c	00457	0	127	0	127	0	m:0206
c	0045D	0	130	0	130	0	m:0206
l	0045D	00566	l	currentTime	m:0206	7
c	0046E	0	131	0	131	0	m:0206
c	00484	0	132	0	132	0	m:0206
c	0048D	0	133	0	133	0	m:0206
c	00490	0	134	0	134	0	m:0206
c	00492	0	136	0	136	0	m:0206
c	0049F	0	138	0	138	0	m:0206
c	004B1	0	139	0	139	0	m:0206
c	004C9	0	141	0	141	0	m:0206
c	004E8	0	142	0	142	0	m:0206
c	004F8	0	143	0	143	0	m:0206
l	004F8	0054D	i	diffN	m:0206	9
c	00509	0	144	0	144	0	m:0206
l	00509	0054D	l	diffT	m:0206	10
c	0051D	0	145	0	145	0	m:0206
c	00525	0	146	0	146	0	m:0206
l	00525	0054D	l	t	m:0206	12
c	00531	0	147	0	147	0	m:0206
c	00537	0	148	0	148	0	m:0206
c	0053C	0	149	0	149	0	m:0206
c	00540	0	150	0	150	0	m:0206
c	0054D	0	155	0	155	0	m:0206
c	00558	0	156	0	156	0	m:0206
c	00564	0	157	0	157	0	m:0206
e	00566	m:0206
c	00569	0	178	0	178	0	m:02B3
l	00569	005D8	i	flags	m:02B3	0
l	00569	005D8	c[]	data	m:02B3	1
l	00569	005D8	i	len	m:02B3	2
l	00569	005D8	i	info	m:02B3	3
l	00569	005D8	l	time	m:02B3	4
c	00591	0	182	0	182	0	m:02B3
c	0059C	0	183	0	183	0	m:02B3
c	005A5	0	184	0	184	0	m:02B3
c	005A8	0	185	0	185	0	m:02B3
c	005AE	0	186	0	186	0	m:02B3
c	005B6	0	187	0	187	0	m:02B3
c	005BC	0	188	0	188	0	m:02B3
c	005C4	0	189	0	189	0	m:02B3
c	005CA	0	190	0	190	0	m:02B3
c	005D2	0	191	0	191	0	m:02B3
c	005D6	0	192	0	192	0	m:02B3
e	005D8	m:02B3
c	005DB	0	197	0	197	0	m:02EC
l	005DB	0064E	i	currSinkIndex	m:02EC	0
l	005DB	0064E	i	x	m:02EC	1
c	005E1	0	198	0	198	0	m:02EC
l	005E1	0064E	l	nextBeaconTime	m:02EC	2
c	005E3	0	199	0	199	0	m:02EC
l	005E3	0064E	i	nextBeaconSinkIndex	m:02EC	4
c	005EC	0	200	0	200	0	m:02EC
c	005F0	0	201	0	201	0	m:02EC
c	00610	0	202	0	202	0	m:02EC
c	00619	0	203	0	203	0	m:02EC
c	0061B	0	199	0	199	0	m:02EC
c	00620	0	207	0	207	0	m:02EC
c	00624	0	208	0	208	0	m:02EC
c	0062D	0	210	0	210	0	m:02EC
c	00633	0	211	0	211	0	m:02EC
c	00637	0	212	0	212	0	m:02EC
c	00642	0	213	0	213	0	m:02EC
c	00648	0	215	0	215	0	m:02EC
c	0064C	0	216	0	216	0	m:02EC
e	0064E	m:02EC
c	00651	0	223	0	223	0	m:0327
l	00651	006CD	i	sinkIndex	m:0327	0
c	0065B	0	224	0	224	0	m:0327
c	00661	0	227	0	227	0	m:0327
c	00671	0	228	0	228	0	m:0327
c	0067A	0	229	0	229	0	m:0327
c	0068B	0	231	0	231	0	m:0327
c	00699	0	232	0	232	0	m:0327
c	006A8	0	235	0	235	0	m:0327
c	006AC	0	236	0	236	0	m:0327
c	006B1	0	238	0	238	0	m:0327
c	006B7	0	239	0	239	0	m:0327
c	006C2	0	240	0	240	0	m:0327
c	006C8	0	241	0	241	0	m:0327
c	006CC	0	242	0	242	0	m:0327
e	006CE	m:0327
c	006D1	0	322	0	322	0	m:0367
l	006D1	0070A	c	led	m:0367	0
c	006F4	0	323	0	323	0	m:0367
l	006F4	00704	c	b	m:0367	4
c	006F8	0	324	0	324	0	m:0367
c	006FF	0	326	0	326	0	m:0367
c	00704	0	322	0	322	0	m:0367
c	00709	0	329	0	329	0	m:0367
e	0070A	m:0367
c	0070D	0	267	0	267	0	m:0385
l	0070D	0074F	l	broadcastTime	m:0385	0
l	0070D	0074F	l	deadline	m:0385	2
l	0070D	0074F	i	sinkIndex	m:0385	4
l	0070D	0074F	l	currentTimeMS	m:0385	5
c	00713	0	268	0	268	0	m:0385
c	00717	0	269	0	269	0	m:0385
c	0071B	0	271	0	271	0	m:0385
c	00729	0	273	0	273	0	m:0385
c	00734	0	274	0	274	0	m:0385
c	00736	0	276	0	276	0	m:0385
c	00741	0	277	0	277	0	m:0385
c	00743	0	279	0	279	0	m:0385
c	0074E	0	282	0	282	0	m:0385
e	00750	m:0385
c	00753	0	246	0	246	0	m:03A8
c	00770	0	247	0	247	0	m:03A8
e	00772	m:03A8
c	00775	0	313	0	313	0	m:03B9
l	00775	0078D	i	led	m:03B9	0
c	0077B	0	314	0	314	0	m:03B9
l	0077B	0078D	i	ledState	m:03B9	1
c	0077E	0	315	0	315	0	m:03B9
c	00786	0	317	0	317	0	m:03B9
c	0078C	0	319	0	319	0	m:03B9
e	0078E	m:03B9
S	M:/EMBS/EMBS_assessment2/part2/src/embs/SourceNode.java
:	package embs;
:	
:	import com.ibm.saguaro.system.*;
:	import com.ibm.saguaro.logger.*;
:	//import embs.SinkParameter;
:	
:	
:	public class SourceNode {
:	
:		static Timer  timer0;
:		static Timer  timer1;
:		static Timer  timer2;
:		
:		static byte[] xmit;
:		static long   wait;
:		static Radio radio = new Radio();
:		
:		private static SinkParameters[] sinks = {
:			new SinkParameters((byte) 11,(byte)  0x11,(byte)  0x11), 
:			new SinkParameters((byte) 12, (byte) 0x12, (byte) 0x12),
:			new SinkParameters((byte) 13, (byte) 0x13, (byte) 0x13)};
:		// settings for SourceNode A
:		static int currentSinkIndex = 0;
:		static byte ownPanId = 0x11;
:		static byte ownShortAddr = 0x1;
:	
:	
:		static byte YELLOW_LED = (byte) 0;
:		static byte GREEN_LED = (byte) 1;
:		static byte RED_LED = (byte) 2;
:	
:		static int N_MIN = 2;
:		static int N_MAX = 10;
:		static long T_MIN = 250;
:		static long T_MAX = 1500;
:		
:		static int[] broadcasted = new int[]{0,0,0};
:	
:	//	static ChannelSwitch[] channelSwitches = new ChannelSwitch[3];
:		static Broadcast[] broadcasts = new Broadcast[3];
:	
:		static int previousChannel;
:		static long TIME_ADJUSTMENT = 3;
:		static long lastChannelSwitch = 0;
:		
:		
:		static {
:			// Open the default radio
:			radio.open(Radio.DID, null, 0, 0);
:	
:			LED.setState((byte) 0, (byte) 1);
:			LED.setState((byte) 1, (byte) 1);
:			LED.setState((byte) 2, (byte) 1);
:	
:			timer0 = new Timer();
:			timer0.setParam((byte) 0);
:			timer0.setCallback(new TimerEvent(null){
:				public void invoke(byte param, long time){
:					SourceNode.broadcastToSink(param, time);
:				}
:			});
:			
:			timer1 = new Timer();
:			timer1.setParam((byte) 1);
:			timer1.setCallback(new TimerEvent(null){
:				public void invoke(byte param, long time){
:					SourceNode.broadcastToSink(param, time);
:				}
:			});
:			
:			timer2 = new Timer();
:			timer2.setParam((byte) 2);
:			timer2.setCallback(new TimerEvent(null){
:				public void invoke(byte param, long time){
:					SourceNode.broadcastToSink(param, time);
:				}
:			});
:	
:			// Set channel 
:			radio.setChannel((byte) sinks[currentSinkIndex].getChannel());
:			// Set the PAN ID and the short address
:			radio.setPanId(sinks[currentSinkIndex].getPanid(), true);
:			radio.setShortAddr(sinks[currentSinkIndex].getAddress());
:	
:			// Prepare beacon frame with source and destination addressing
:			xmit = new byte[12];
:			xmit[0] = Radio.FCF_BEACON;
:			xmit[1] = Radio.FCA_SRC_SADDR|Radio.FCA_DST_SADDR;
:			Util.set16le(xmit, 3, sinks[currentSinkIndex].getPanid()); // destination PAN address 
:			Util.set16le(xmit, 5, 0xFFFF); // broadcast address 
:			Util.set16le(xmit, 7, sinks[currentSinkIndex].getPanid()); // own PAN address 
:			Util.set16le(xmit, 9, sinks[currentSinkIndex].getAddress()); // own short address 
:	
:			// register delegate for received frames
:			radio.setRxHandler(new DevCallback(null){
:				public int invoke (int flags, byte[] data, int len, int info, long time) {
:					return  SourceNode.onReceive(flags, data, len, info, time);
:				}
:			});
:	
:			radio.setTxHandler(new DevCallback(null){
:				public int invoke(int flags, byte[] data, int len, int info, long time) {
:					return SourceNode.onTransmit(flags, data, len, info, time);
:				}
:			});
:	//		radio.setRxMode(Radio.RXMODE_PROMISCUOUS);
:			radio.startRx(Device.ASAP, 0, Time.currentTicks()+0x7FFFFFFF);
:		}
:	
:		// Called when a frame is received or at the end of a reception period 
:		private static int onReceive (int flags, byte[] data, int len, int info, long time) {
:	
:			if (data == null) { // marks end of reception period
:				return 0;
:			}
:				
:			int n = data[11];
:			
:			if (n>sinks[currentSinkIndex].getMaxObservedN()){
:				sinks[currentSinkIndex].setMaxObservedN(n);
:			}
:			Logger.appendString(csr.s2b("Received packet c:"));
:			Logger.appendByte(sinks[currentSinkIndex].getChannel());
:			Logger.appendString(csr.s2b(" n:"));
:			Logger.appendByte(data[11]);
:			Logger.flush(Mote.WARN);
:			long currentTime = Time.currentTime(Time.MILLISECS);
:			
:			//Case where first beacon received is n=1 and no previous known beacons, switch channel
:			if (sinks[currentSinkIndex].getBeaconN()==-1 && n==1){
:				sinks[currentSinkIndex].setNextBeaconTime(currentTime + (11*T_MIN));
:				setChannel(pickNextSink(currentSinkIndex));
:				startListening();
:				return 0;
:			}
:			if (!sinks[currentSinkIndex].getBroadcastSet()){
:				//If T is known for sink
:				if (sinks[currentSinkIndex].getT()!=-1){
:					createNextBroadcast(n, currentTime, currentSinkIndex, sinks[currentSinkIndex].getT(), currentTime);
:				} else {
:					if (sinks[currentSinkIndex].getBeaconT()!=-1 && sinks[currentSinkIndex].getBeaconN()!=-1){
:						int diffN = getDiffN(sinks[currentSinkIndex].getBeaconN(), n);
:						long diffT = getDiffT(sinks[currentSinkIndex].getBeaconT(), currentTime);
:						if (diffN>0 && diffT-TIME_ADJUSTMENT <=(T_MAX*diffN)){
:							long t = diffT/diffN;
:							sinks[currentSinkIndex].setT(t);
:							Logger.appendString(csr.s2b("Calculated T: "));
:							Logger.appendLong(t);
:							Logger.flush(Mote.WARN);
:							createNextBroadcast(n, currentTime, currentSinkIndex, t, currentTime);
:						}
:					}
:				}
:			}
:			sinks[currentSinkIndex].setBeaconN(n);
:			sinks[currentSinkIndex].setBeaconT(currentTime);
:			return 0;
:		}
:	
:	
:		protected static void broadcastToSink(byte sinkIndex, long time){
:			Logger.appendString(csr.s2b("BROADCASTING! on channel: "));
:			Logger.appendByte(sinks[sinkIndex].getChannel());
:			Logger.appendString(csr.s2b("at time: "));
:			Logger.appendLong(Time.currentTicks());
:			Logger.flush(Mote.WARN);
:			
:			setChannel((int) sinkIndex);
:			broadcasted[sinkIndex]++;
:			previousChannel = (int) sinkIndex;
:			
:			radio.transmit(Device.TIMED, xmit, 0, 12, Time.currentTicks()+Time.toTickSpan(Time.MILLISECS, T_MIN/2));
:			Logger.appendString(csr.s2b("Finished broadcast."));
:			Logger.flush(Mote.INFO);
:		}
:	
:		private static int onTransmit(int flags, byte[] data, int len, int info, long time) {
:			sinks[currentSinkIndex].setNextBeaconTime(Time.currentTime(Time.MILLISECS)+(sinks[currentSinkIndex].getT()*(11+sinks[currentSinkIndex].getMaxObservedN())));
:			//TODO schedule listen callback
:	//		Logger.appendInt(currentSinkIndex);
:	//		Logger.flush(Mote.ERROR);
:			sinks[currentSinkIndex].setBroadcastSet(false);
:			setChannel(pickNextSink(currentSinkIndex));
:			startListening();
:			Logger.appendString(csr.s2b("Broadcast results: "));
:			Logger.appendInt(broadcasted[0]);
:			Logger.appendString(csr.s2b("/"));
:			Logger.appendInt(broadcasted[1]);
:			Logger.appendString(csr.s2b("/"));
:			Logger.appendInt(broadcasted[2]);
:			Logger.flush(Mote.WARN);
:			return 0;
:		}
:		
:		private static int pickNextSink(int currSinkIndex){
:			int x = 0;
:			long nextBeaconTime = -1;
:			int nextBeaconSinkIndex = -1;
:			for (x=0; x<sinks.length;x++){
:				if (x!=currSinkIndex){
:					if (nextBeaconTime==-1 | sinks[x].getNextBeaconTime()<nextBeaconTime){
:						nextBeaconTime = sinks[x].getNextBeaconTime();
:						nextBeaconSinkIndex = x;
:					}
:				}
:			}
:			if (nextBeaconSinkIndex==-1){
:				return (currSinkIndex+1) % (sinks.length);
:			} else {
:				Logger.appendString(csr.s2b("PICKED DIFFERENT CHANNEL!: "));
:				Logger.appendInt(nextBeaconSinkIndex);
:				if (((currSinkIndex+1) % (sinks.length))==nextBeaconSinkIndex){
:					Logger.appendString(csr.s2b("PAA!: "));
:				}
:				Logger.flush(Mote.ERROR);
:				return nextBeaconSinkIndex;
:			}
:		}
:		
:		
:		private static void setChannel(int sinkIndex){
:	
:			if (radio.getState()==Device.S_RXEN){
:				radio.stopRx();
:			}
:			
:			Util.set16le(xmit, 3, sinks[sinkIndex].getPanid()); // destination PAN address 
:			Util.set16le(xmit, 5, 0xFFFF); // broadcast address 
:			Util.set16le(xmit, 7, sinks[sinkIndex].getPanid()); // own PAN address 
:			
:			radio.setChannel((byte) sinks[sinkIndex].getChannel());
:			radio.setPanId(sinks[sinkIndex].getPanid(), true);
:	//		radio.setShortAddr(sinks[sinkIndex].getAddress());
:					
:			currentSinkIndex = sinkIndex;
:			setLEDListening((byte) sinkIndex);
:	
:			Logger.appendString(csr.s2b("Changed channel to: "));
:			Logger.appendByte(sinks[sinkIndex].getChannel());
:			Logger.appendString(csr.s2b(" at time: "));
:			Logger.flush(Mote.WARN);
:		}
:	
:		
:		private static void startListening(){
:			radio.startRx(Device.TIMED, Time.currentTicks()+Time.toTickSpan(Time.MILLISECS, 10), Time.currentTicks()+0x7FFFFFFF);
:		}
:		
:		private static void createNextBroadcast(int beaconN, long beaconT, int channel, long t, long currentTimeMS) {
:			long broadcastTimeByMSSpan = (t  * beaconN);
:			long deadline = broadcastTimeByMSSpan + T_MIN;
:			setupBroadcastAndCallBack(broadcastTimeByMSSpan, deadline, channel, currentTimeMS);
:			sinks[currentSinkIndex].setBroadcastSet(true);
:			setChannel(pickNextSink(currentSinkIndex));
:			startListening();
:		}
:	
:		private static void setupBroadcastAndCallBack(long broadcastTime, long deadline, int sinkIndex, long currentTimeMS){
:	//		ChannelSwitch cs = new ChannelSwitch(broadcastTime, sinks[sinkIndex].getChannel());
:	//		for (ChannelSwitch c: channelSwitches){
:	//			if (c!=null && c.getTime()==broadcastTime){
:	//				return;
:	//			}
:	//		}
:	//		channelSwitches = insertChannelSwitchInBuffer(channelSwitches, cs);
:			
:			Logger.appendString(csr.s2b("PREPARING BROADCAST! for channel: "));
:			Logger.appendInt(sinkIndex);
:			Logger.flush(Mote.WARN);
:			
:			switch (sinkIndex){
:			case 0:
:				timer0.setAlarmBySpan(Time.toTickSpan(Time.MILLISECS, broadcastTime));
:				break;
:			case 1:
:				timer1.setAlarmBySpan(Time.toTickSpan(Time.MILLISECS, broadcastTime));
:				break;
:			case 2:
:				timer2.setAlarmBySpan(Time.toTickSpan(Time.MILLISECS, broadcastTime));
:				break;
:			}
:		}
:		
:		
:	//	private static ChannelSwitch[] insertChannelSwitchInBuffer(ChannelSwitch[] css, ChannelSwitch cs){
:	//		// If space available in buffer
:	//		int x;
:	//		for (x=0; x<css.length; x++){
:	//			if (css[x]==null){
:	//				css[x] = cs;
:	//				return css;
:	//			}
:	//		}
:	//		ChannelSwitch[] newCss = new ChannelSwitch[css.length+2];
:	//		for (x=0; x<css.length; x++){
:	//			newCss[x] = css[x];
:	//		}
:	//		newCss[x+1] = cs;
:	//		return newCss;
:	//	}
:	
:	
:		private static int getDiffN(int beacon1N, int beacon2N) {
:			return beacon1N - beacon2N;
:		}
:	
:		private static long getDiffT(long beacon1T, long beacon2T) {
:			long diffT = beacon1T-beacon2T;
:			return (diffT < 0) ? -diffT : diffT;
:		}
:	
:		private static void toggleLed(int led){
:			int ledState = LED.getState((byte) led);
:			if (ledState==0){
:				LED.setState((byte) led, (byte) 1);
:			} else {
:				LED.setState((byte) led, (byte) 0);
:			}
:		}
:	
:		private static void setLEDListening(byte led){
:			for (byte b: new byte[]{YELLOW_LED, RED_LED, GREEN_LED}){
:				if (b==led){
:					LED.setState(b, (byte) 1);
:				} else {
:					LED.setState(b, (byte) 0);
:				}
:			}
:		}
:		
:		//	// Called on a timer alarm
:		//    public static void periodicSend(byte param, long time) {
:		//        
:		//        if(nc>0){
:		//	        // transmit a beacon 
:		//    	    radio.transmit(Device.ASAP|Radio.TXMODE_POWER_MAX, xmit, 0, 12, 0);
:		//        	// program new alarm
:		//        	tsend.setAlarmBySpan(wait);
:		//        	nc--;
:		//        	xmit[11]--;
:		//        }
:		//        else{
:		//        	//start reception phase
:		//	        radio.startRx(Device.ASAP, 0, Time.currentTicks()+wait);
:		//	        // turn green LED on 
:		//	        LED.setState((byte)1, (byte)1);
:		//	        
:		//        }
:		//        
:		//    }
:	}
S	M:/EMBS/EMBS_assessment2/part2/src/embs/SinkParameters.java
:	package embs;
:	
:	import com.ibm.saguaro.system.Timer;
:	
:	public class SinkParameters {
:	    private byte channel;
:	    private byte panid;
:	    private byte address;
:	    
:	    private int maxObservedN = -1;
:	    private long T = -1;
:	    private int beaconN = -1;
:	    private long beaconT = -1;
:	    private boolean broadcastSet = false;
:		private long nextBeaconTime;
:	    
:	    public SinkParameters(byte channel, byte panid, byte address){
:	    	this.channel =  channel;
:	    	this.panid =  panid;
:	    	this.address =  address;
:	    }
:	
:	    public boolean getBroadcastSet(){
:	    	return this.broadcastSet;
:	    }
:	    
:	    public void setBroadcastSet(boolean value){
:	    	this.broadcastSet = value;
:	    }
:	    
:	    public void addBeacon(int n, long t){
:	    	this.beaconN = n;
:	    	this.beaconT = t;
:	    }
:	    
:		public void setMaxObservedN(int n) {this.maxObservedN = n;}
:		public long getT() {return T;}
:		public void setT(long t) {this.T = t;}
:		public int getMaxObservedN() {return maxObservedN;}
:		public byte getChannel() {return channel;}
:		public byte getPanid() {return panid;}
:		public byte getAddress() {return address;}
:	
:		public int getBeaconN() {
:			return beaconN;
:		}
:		public void setBeaconN(int beaconN) {
:			this.beaconN = beaconN;
:		}
:		public long getBeaconT() {
:			return beaconT;
:		}
:		public void setBeaconT(long beaconT) {
:			this.beaconT = beaconT;
:		}
:	
:		public void setNextBeaconTime(long l) {
:			this.nextBeaconTime = l;
:		}
:		
:		public long getNextBeaconTime(){
:			return this.nextBeaconTime;
:		}
:	  
:		
:	}
S	M:/EMBS/EMBS_assessment2/part2/src/embs/ChannelSwitch.java
:	package embs;
:	
:	/**
:	 * Class used to represent channel switch events
:	 */
:	public class ChannelSwitch {
:	
:	    // Time: time at which to switch from current channel to channel specified below
:	    private long time;
:	
:	    // Channel: channel to begin listening to at time Time
:	    private byte channel;
:	
:	    public ChannelSwitch(long time, byte channel) {
:	        this.time = time;
:	        this.channel = channel;
:	    }
:	
:	    public long getTime() {
:	        return time;
:	    }
:	    public void setTime(long time) {
:	        this.time = time;
:	    }
:	
:	    public void setChannel(byte channel) {
:	        this.channel = channel;
:	    }
:	    public byte getChannel() {
:	        return channel;
:	    }
:	}
S	M:/EMBS/EMBS_assessment2/part2/src/embs/Broadcast.java
:	package embs;
:	
:	/**
:	 * Represents a scheduled broadcast
:	 */
:	public class Broadcast{
:	    private long broadcastTime; // broadcastTime: time at which to broadcast
:	
:	    public Broadcast(long broadcastTime) {
:	        this.broadcastTime = broadcastTime;
:	    }
:	
:	    public long getBroadcastTime() {
:	        return broadcastTime;
:	    }
:	    public void setBroadcastTime(long broadcastTime) {
:	        this.broadcastTime = broadcastTime;
:	    }
:	}
