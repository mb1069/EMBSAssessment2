A!	Sink1-1.8.43634	2.0	Java

X	c:01/000	com.ibm.saguaro.system.Assembly
X	c:01/001	com.ibm.saguaro.system.Util
X	c:01/002	com.ibm.saguaro.system.Timer
X	c:01/003	com.ibm.saguaro.system.Time
X	c:01/004	com.ibm.saguaro.system.MoteException
X	c:01/005	com.ibm.saguaro.system.Device
X	c:01/006	com.ibm.saguaro.system.SDev
X	c:01/007	com.ibm.saguaro.system.CDev
X	c:01/008	com.ibm.saguaro.system.OutOfResourcesException
X	c:01/009	com.ibm.saguaro.system.OsException
X	c:01/00A	com.ibm.saguaro.system.NullReferenceException
X	c:01/00B	com.ibm.saguaro.system.SystemException
X	c:01/00C	com.ibm.saguaro.system.Mote
X	c:01/00D	com.ibm.saguaro.system.LIP
X	c:01/00E	com.ibm.saguaro.system.LED
X	c:01/00F	com.ibm.saguaro.system.InvalidCastException
X	c:01/010	com.ibm.saguaro.system.IndexOutOfRangeException
X	c:01/011	com.ibm.saguaro.system.I2C
X	c:01/012	com.ibm.saguaro.system.GPIO
X	c:01/013	com.ibm.saguaro.system.Err
X	c:01/014	com.ibm.saguaro.system.DeviceException
X	c:01/015	com.ibm.saguaro.system.SPI
X	c:01/016	com.ibm.saguaro.system.Radio
X	c:01/017	com.ibm.saguaro.system.WLIP
X	c:01/018	com.ibm.saguaro.system.ArrayTypeMismatchException
X	c:01/019	com.ibm.saguaro.system.ArithmException
X	c:01/01A	com.ibm.saguaro.system.ArgumentException
X	c:01/01B	com.ibm.saguaro.system.AccessException
X	c:01/01C	com.ibm.saguaro.system.ADC
X	c:02/000	com.ibm.saguaro.logger.Logger

C!	c:004	embs.Sink1	-1	0	c:000
R	tsend	r:com.ibm.saguaro.system.Timer	0	0
R	tstart	r:com.ibm.saguaro.system.Timer	0	1
R	xmit	c[]	0	2
R	radio	r:com.ibm.saguaro.system.Radio	0	3
F	light	z	0	0
F	wait	l	0	1
F	n	i	0	3
F	nc	i	0	4
F	t	i	0	5
F	channel	c	0	6
F	panid	c	0	7
F	address	c	0	8
H	Finished_listening_c_11_t$UTF8	b[]	0	70,105,110,105,115,104,101,100,32,108,105,115,116,101,110,105,110,103,32,99,58,49,49,32,116,58,32
H	RECEIVED_11$UTF8	b[]	0	82,69,67,69,73,86,69,68,33,32,49,49,58,32
H	Started_listening_c_11_t$UTF8	b[]	0	83,116,97,114,116,101,100,32,108,105,115,116,101,110,105,110,103,58,32,99,58,49,49,32,116,58
M!	Sink1(r:embs.Sink1)v	-1	m:008A	00114	4
M	access$000(i,c[],i,i,l)i	-1	m:008C	00118	14
M	onReceive(i,c[],i,i,l)i	-1	m:0093	00126	106
M!	periodicSend(c,l)v	-1	m:00C8	00190	106
M!	restart(c,l)v	-1	m:00FD	001FA	32

C	c:006	com.ibm.saguaro.system.$tatics	-1	-1	c:01/000
r	embs.Sink1.tsend	r:com.ibm.saguaro.system.Timer	-1	0
r	embs.Sink1.tstart	r:com.ibm.saguaro.system.Timer	-1	1
r	embs.Sink1.xmit	c[]	-1	2
r	embs.Sink1.radio	r:com.ibm.saguaro.system.Radio	-1	3
f	embs.Sink1.light	z	-1	0
f	embs.Sink1.wait	l	-1	1
f	embs.Sink1.n	i	-1	3
f	embs.Sink1.nc	i	-1	4
f	embs.Sink1.t	i	-1	5
f	embs.Sink1.channel	c	-1	6
f	embs.Sink1.panid	c	-1	7
f	embs.Sink1.address	c	-1	8
M	__init()v	-1	m:0010	00020	244

c	0002D	0	11	0	11	0	m:0010
c	00031	0	15	0	15	0	m:0010
c	0003B	0	16	0	16	0	m:0010
c	0003F	0	19	0	19	0	m:0010
c	00045	0	22	0	22	0	m:0010
c	0004A	0	23	0	23	0	m:0010
c	0004F	0	24	0	24	0	m:0010
c	00054	0	28	0	28	0	m:0010
c	00060	0	32	0	32	0	m:0010
c	00069	0	36	0	36	0	m:0010
c	00073	0	37	0	37	0	m:0010
c	0007C	0	41	0	41	0	m:0010
c	00082	0	42	0	42	0	m:0010
c	00088	0	43	0	43	0	m:0010
c	00090	0	44	0	44	0	m:0010
c	0009B	0	45	0	45	0	m:0010
c	000A4	0	46	0	46	0	m:0010
c	000B0	0	47	0	47	0	m:0010
c	000BC	0	49	0	49	0	m:0010
c	000C6	0	53	0	53	0	m:0010
c	000D0	0	60	0	60	0	m:0010
c	000DA	0	61	0	61	0	m:0010
c	000E4	0	68	0	68	0	m:0010
c	000EE	0	69	0	69	0	m:0010
c	000F8	0	76	0	76	0	m:0010
c	00103	0	78	0	78	0	m:0010
c	00112	0	80	0	80	0	m:0010
e	00114	m:0010
c	00117	0	6	0	6	0	m:008A
l!	00117	00118	r:embs.Sink1	this	m:008A	0
e!	00118	m:008A
c	0011B	0	6	0	6	0	m:008C
l	0011B	00125	i	x0	m:008C	0
l	0011B	00125	c[]	x1	m:008C	1
l	0011B	00125	i	x2	m:008C	2
l	0011B	00125	i	x3	m:008C	3
l	0011B	00125	l	x4	m:008C	4
e	00126	m:008C
c	00129	0	84	0	84	0	m:0093
l	00129	00190	i	flags	m:0093	0
l	00129	00190	c[]	data	m:0093	1
l	00129	00190	i	len	m:0093	2
l	00129	00190	i	info	m:0093	3
l	00129	00190	l	time	m:0093	4
c	0012C	0	86	0	86	0	m:0093
c	00131	0	88	0	88	0	m:0093
c	00140	0	89	0	89	0	m:0093
c	00146	0	90	0	90	0	m:0093
c	0014B	0	91	0	91	0	m:0093
c	0014F	0	92	0	92	0	m:0093
c	00151	0	95	0	95	0	m:0093
c	00156	0	97	0	97	0	m:0093
c	0015B	0	98	0	98	0	m:0093
c	00162	0	101	0	101	0	m:0093
c	00167	0	103	0	103	0	m:0093
c	00173	0	104	0	104	0	m:0093
c	00179	0	105	0	105	0	m:0093
c	0017E	0	106	0	106	0	m:0093
c	00182	0	108	0	108	0	m:0093
c	0018A	0	109	0	109	0	m:0093
c	0018E	0	110	0	110	0	m:0093
e	00190	m:0093
c	00193	0	118	0	118	0	m:00C8
l!	00193	001FA	c	param	m:00C8	0
l!	00193	001FA	l	time	m:00C8	1
c	00198	0	119	0	119	0	m:00C8
c	0019D	0	121	0	121	0	m:00C8
c	001AF	0	123	0	123	0	m:00C8
c	001B8	0	124	0	124	0	m:00C8
c	001C0	0	125	0	125	0	m:00C8
c	001CE	0	128	0	128	0	m:00C8
c	001D3	0	130	0	130	0	m:00C8
c	001E6	0	132	0	132	0	m:00C8
c	001EB	0	133	0	133	0	m:00C8
c	001F1	0	134	0	134	0	m:00C8
c	001F5	0	135	0	135	0	m:00C8
c	001F9	0	138	0	138	0	m:00C8
e!	001FA	m:00C8
c	001FD	0	144	0	144	0	m:00FD
l!	001FD	00219	c	param	m:00FD	0
l!	001FD	00219	l	time	m:00FD	1
c	00203	0	145	0	145	0	m:00FD
c	0020D	0	146	0	146	0	m:00FD
c	00218	0	148	0	148	0	m:00FD
e!	0021A	m:00FD
S	M:/EMBS/EMBS_assessment2/part2/src/embs/Sink1.java
:	package embs;
:	
:	import com.ibm.saguaro.system.*;
:	import com.ibm.saguaro.logger.*;
:	
:	public class Sink1 {
:	
:	    private static Timer  tsend;
:	    private static Timer  tstart;
:	    
:	    private static boolean light=false;
:	    
:	    private static byte[] xmit;
:	    private static long   wait;
:	    static Radio radio = new Radio();
:	    private static int n = 5; // number of beacons of sync phase - sample only, assessment will use unknown values
:	    private static int nc;
:	    
:	    private static int t = 800; // milliseconds between beacons - sample only, assessment will use unknown values 
:	    
:	    // settings for sink A
:	    private static byte channel = 11; // channel 11
:	    private static byte panid = 0x11;
:	    private static byte address = 0x11;
:	
:	    static {
:	        // Open the default radio
:	        radio.open(Radio.DID, null, 0, 0);
:	        
:	        
:	        // Set channel 
:	        radio.setChannel(channel);
:	        
:	        
:	        // Set the PAN ID and the short address
:	        radio.setPanId(panid, true);
:	        radio.setShortAddr(address);
:	
:	
:	        // Prepare beacon frame with source and destination addressing
:	        xmit = new byte[12];
:	        xmit[0] = Radio.FCF_BEACON;
:	        xmit[1] = Radio.FCA_SRC_SADDR|Radio.FCA_DST_SADDR;
:	        Util.set16le(xmit, 3, panid); // destination PAN address 
:	        Util.set16le(xmit, 5, 0xFFFF); // broadcast address 
:	        Util.set16le(xmit, 7, panid); // own PAN address 
:	        Util.set16le(xmit, 9, address); // own short address 
:	
:	        xmit[11] = (byte)n;
:	        
:	        
:			// register delegate for received frames
:	        radio.setRxHandler(new DevCallback(null){
:	                public int invoke (int flags, byte[] data, int len, int info, long time) {
:	                    return  Sink1.onReceive(flags, data, len, info, time);
:	                }
:	            });
:	        
:	        // Setup a periodic timer callback for beacon transmissions
:	        tsend = new Timer();
:	        tsend.setCallback(new TimerEvent(null){
:	                public void invoke(byte param, long time){
:	                    Sink1.periodicSend(param, time);
:	                }
:	            });
:	        
:	        // Setup a periodic timer callback to restart the protocol
:	        tstart = new Timer();
:	        tstart.setCallback(new TimerEvent(null){
:	                public void invoke(byte param, long time){
:	                    Sink1.restart(param, time);
:	                }
:	            });
:	            
:	        // Convert the periodic delay from ms to platform ticks
:	        wait = Time.toTickSpan(Time.MILLISECS, t);
:	        
:	        tstart.setAlarmBySpan(Time.toTickSpan(Time.SECONDS, 5)); //starts the protocol 5 seconds after constructing the assembly
:	        
:	    }
:	
:	    // Called when a frame is received or at the end of a reception period 
:	    private static int onReceive (int flags, byte[] data, int len, int info, long time) {
:	        if (data == null) { // marks end of reception period
:	            // turn green LED off 
:		        LED.setState((byte)1, (byte)0);
:		        //set alarm to restart protocol
:		    	tstart.setAlarmBySpan(10*wait);
:		    	Logger.appendString(csr.s2b("Finished listening c:11 t: "));
:		    	Logger.appendLong(time);
:		    	Logger.flush(Mote.INFO);
:	            return 0;
:	        }
:	
:	        LED.setState((byte)1, (byte)1);
:			// frame received, so blink red LED and log its payload
:	        if(light){
:	         	LED.setState((byte)2, (byte)1);
:	        }
:	        else{
:	        	LED.setState((byte)2, (byte)0);
:			}
:			light=!light;
:			Logger.appendString(csr.s2b("RECEIVED! 11: "));
:			Logger.appendLong(time);
:			Logger.flush(Mote.WARN);
:			
:			Logger.appendByte(data[11]);
:	        Logger.flush(Mote.WARN);
:	        return 0;
:	        
:	    }
:	
:	
:	    // Called on a timer alarm
:	    public static void periodicSend(byte param, long time) {
:	        
:	        if(nc>0){
:	        	 LED.setState((byte)0, (byte)1);
:		        // transmit a beacon 
:	    	    radio.transmit(Device.ASAP|Radio.TXMODE_POWER_MAX, xmit, 0, 12, 0);
:	        	// program new alarm
:	        	tsend.setAlarmBySpan(wait);
:	        	nc--;
:	        	xmit[11]--;
:	        }
:	        else{
:	        	 LED.setState((byte)0, (byte)0);
:	        	//start reception phase
:		        radio.startRx(Device.ASAP, 0, Time.currentTicks()+wait);
:		        // turn green LED on 
:		        LED.setState((byte)1, (byte)1);
:		        Logger.appendString(csr.s2b("Started listening: c:11 t:"));
:		        Logger.appendLong(time);
:		        Logger.flush(Mote.INFO);
:	        }
:	        
:	    }
:	
:	
:	    // Called on a timer alarm, starts the protocol
:	    public static void restart(byte param, long time) {
:	        
:	        nc=n;
:	        xmit[11]=(byte)n;
:	       	tsend.setAlarmBySpan(0);
:	        
:	    }
:	
:	
:	
:	}
