A!	SourceNode-2.0.05544	2.0	Java

X	c:01/000	com.ibm.saguaro.system.Assembly
X	c:01/001	com.ibm.saguaro.system.Util
X	c:01/002	com.ibm.saguaro.system.Timer
X	c:01/003	com.ibm.saguaro.system.Time
X	c:01/004	com.ibm.saguaro.system.MoteException
X	c:01/005	com.ibm.saguaro.system.Device
X	c:01/006	com.ibm.saguaro.system.SDev
X	c:01/007	com.ibm.saguaro.system.CDev
X	c:01/008	com.ibm.saguaro.system.OutOfResourcesException
X	c:01/009	com.ibm.saguaro.system.OsException
X	c:01/00A	com.ibm.saguaro.system.NullReferenceException
X	c:01/00B	com.ibm.saguaro.system.SystemException
X	c:01/00C	com.ibm.saguaro.system.Mote
X	c:01/00D	com.ibm.saguaro.system.LIP
X	c:01/00E	com.ibm.saguaro.system.LED
X	c:01/00F	com.ibm.saguaro.system.InvalidCastException
X	c:01/010	com.ibm.saguaro.system.IndexOutOfRangeException
X	c:01/011	com.ibm.saguaro.system.I2C
X	c:01/012	com.ibm.saguaro.system.GPIO
X	c:01/013	com.ibm.saguaro.system.Err
X	c:01/014	com.ibm.saguaro.system.DeviceException
X	c:01/015	com.ibm.saguaro.system.SPI
X	c:01/016	com.ibm.saguaro.system.Radio
X	c:01/017	com.ibm.saguaro.system.WLIP
X	c:01/018	com.ibm.saguaro.system.ArrayTypeMismatchException
X	c:01/019	com.ibm.saguaro.system.ArithmException
X	c:01/01A	com.ibm.saguaro.system.ArgumentException
X	c:01/01B	com.ibm.saguaro.system.AccessException
X	c:01/01C	com.ibm.saguaro.system.ADC
X	c:02/000	com.ibm.saguaro.logger.Logger

C!	c:004	embs.SourceNode	-1	0	c:000
R	tstart	r:com.ibm.saguaro.system.Timer	0	0
R	xmit	c[]	0	1
R	radio	r:com.ibm.saguaro.system.Radio	0	2
R	sinks	r:embs.SinkParameter[]	0	3
R	tsend	r:com.ibm.saguaro.system.Timer	0	3327
F	light	z	0	0
F	wait	l	0	1
F	currentChannel	i	0	3
F	ownPanId	c	0	4
F	ownShortAddr	c	0	5
M!	SourceNode(r:embs.SourceNode)v	-1	m:00BA	00174	4
M	access$000(i,c[],i,i,l)i	-1	m:00BC	00178	14
M	onReceive(i,c[],i,i,l)i	-1	m:00C3	00186	58
M	setChannel(c)v	-1	m:00E0	001C0	12
M	toggleLed(i)v	-1	m:00E6	001CC	28

C!	c:006	embs.SinkParameter	1	1	c:000
f	T	i	1	0
f	N	i	1	1
f	address	c	1	2
f	panid	c	1	3
f	channel	c	1	4
m!	getAddress()c	1	m:009E	0013C	8	6
m!	getChannel()c	1	m:00A2	00144	8	4
m!	getN()i	1	m:00A6	0014C	8	3
m!	getPanid()c	1	m:00AA	00154	8	5
m!	getT()i	1	m:00AE	0015C	8	1
m!	setN(i)v	1	m:00B2	00164	8	0
m!	setT(i)v	1	m:00B6	0016C	8	2
M!	SinkParameter(r:embs.SinkParameter,i,i,i)v	1	m:0094	00128	20

C	c:00E	com.ibm.saguaro.system.$tatics	-1	-1	c:01/000
r	embs.SourceNode.tstart	r:com.ibm.saguaro.system.Timer	-1	0
r	embs.SourceNode.xmit	c[]	-1	1
r	embs.SourceNode.radio	r:com.ibm.saguaro.system.Radio	-1	2
r	embs.SourceNode.sinks	r:embs.SinkParameter[]	-1	3
f	embs.SourceNode.light	z	-1	0
f	embs.SourceNode.wait	l	-1	1
f	embs.SourceNode.currentChannel	i	-1	3
f	embs.SourceNode.ownPanId	c	-1	4
f	embs.SourceNode.ownShortAddr	c	-1	5
M	__init()v	-1	m:0020	00040	232

c	0004D	0	12	0	12	0	m:0020
c	00051	0	16	0	16	0	m:0020
c	0005B	0	18	0	18	0	m:0020
c	00092	0	20	0	20	0	m:0020
c	00097	0	21	0	21	0	m:0020
c	0009C	0	22	0	22	0	m:0020
c	000A0	0	25	0	25	0	m:0020
c	000AC	0	28	0	28	0	m:0020
c	000B6	0	30	0	30	0	m:0020
c	000BF	0	31	0	31	0	m:0020
c	000C8	0	34	0	34	0	m:0020
c	000CE	0	35	0	35	0	m:0020
c	000D4	0	36	0	36	0	m:0020
c	000DC	0	37	0	37	0	m:0020
c	000E7	0	38	0	38	0	m:0020
c	000F0	0	39	0	39	0	m:0020
c	000FC	0	40	0	40	0	m:0020
c	00108	0	43	0	43	0	m:0020
c	00112	0	69	0	69	0	m:0020
c	00127	0	70	0	70	0	m:0020
e	00128	m:0020
c	0012B	1	12	0	12	0	m:0094
l!	0012B	0013B	r:embs.SinkParameter	this	m:0094	0
l!	0012B	0013B	i	channel	m:0094	1
l!	0012B	0013B	i	panid	m:0094	2
l!	0012B	0013B	i	address	m:0094	3
c	00130	1	13	0	13	0	m:0094
c	00135	1	14	0	14	0	m:0094
c	0013A	1	15	0	15	0	m:0094
e!	0013C	m:0094
c	0013F	1	23	0	23	0	m:009E
l	0013F	00143	r:embs.SinkParameter	this	m:009E	0
e!	00144	m:009E
c	00147	1	21	0	21	0	m:00A2
l	00147	0014B	r:embs.SinkParameter	this	m:00A2	0
e!	0014C	m:00A2
c	0014F	1	20	0	20	0	m:00A6
l	0014F	00153	r:embs.SinkParameter	this	m:00A6	0
e!	00154	m:00A6
c	00157	1	22	0	22	0	m:00AA
l	00157	0015B	r:embs.SinkParameter	this	m:00AA	0
e!	0015C	m:00AA
c	0015F	1	18	0	18	0	m:00AE
l	0015F	00163	r:embs.SinkParameter	this	m:00AE	0
e!	00164	m:00AE
c	00167	1	17	0	17	0	m:00B2
l!	00167	0016C	r:embs.SinkParameter	this	m:00B2	0
l	00167	0016C	i	n	m:00B2	1
e!	0016C	m:00B2
c	0016F	1	19	0	19	0	m:00B6
l!	0016F	00174	r:embs.SinkParameter	this	m:00B6	0
l	0016F	00174	i	t	m:00B6	1
e!	00174	m:00B6
c	00177	0	8	0	8	0	m:00BA
l!	00177	00178	r:embs.SourceNode	this	m:00BA	0
e!	00178	m:00BA
c	0017B	0	8	0	8	0	m:00BC
l	0017B	00185	i	x0	m:00BC	0
l	0017B	00185	c[]	x1	m:00BC	1
l	0017B	00185	i	x2	m:00BC	2
l	0017B	00185	i	x3	m:00BC	3
l	0017B	00185	l	x4	m:00BC	4
e	00186	m:00BC
c	00189	0	74	0	74	0	m:00C3
l	00189	001BF	i	flags	m:00C3	0
l	00189	001BF	c[]	data	m:00C3	1
l	00189	001BF	i	len	m:00C3	2
l	00189	001BF	i	info	m:00C3	3
l	00189	001BF	l	time	m:00C3	4
c	0018C	0	76	0	76	0	m:00C3
c	00191	0	79	0	79	0	m:00C3
c	001A0	0	81	0	81	0	m:00C3
c	001A2	0	86	0	86	0	m:00C3
c	001A7	0	87	0	87	0	m:00C3
c	001AC	0	88	0	88	0	m:00C3
c	001B1	0	90	0	90	0	m:00C3
c	001B9	0	91	0	91	0	m:00C3
c	001BD	0	92	0	92	0	m:00C3
e	001C0	m:00C3
c	001C3	0	107	0	107	0	m:00E0
l	001C3	001CB	c	channel	m:00E0	0
c	001CA	0	108	0	108	0	m:00E0
e	001CC	m:00E0
c	001CF	0	97	0	97	0	m:00E6
l	001CF	001E7	i	led	m:00E6	0
c	001D5	0	98	0	98	0	m:00E6
l	001D5	001E7	i	ledState	m:00E6	1
c	001D8	0	99	0	99	0	m:00E6
c	001E0	0	101	0	101	0	m:00E6
c	001E6	0	103	0	103	0	m:00E6
e	001E8	m:00E6
S	M:/EMBS/EMBS_assessment/part2/src/embs/SourceNode.java
:	package embs;
:	
:	import com.ibm.saguaro.system.*;
:	import com.ibm.saguaro.logger.*;
:	//import embs.SinkParameter;
:	
:	
:	public class SourceNode {
:	
:	    private static Timer  tsend;
:	    private static Timer  tstart;
:	    private static boolean light=false;
:	    
:	    private static byte[] xmit;
:	    private static long   wait;
:	    static Radio radio = new Radio();
:	
:	    private static SinkParameter[] sinks = {new SinkParameter(11, 11, 11), new SinkParameter(12, 12, 12),new SinkParameter(13, 13, 13)};
:	    // settings for SourceNode A
:	    private static int currentChannel = 11;
:	    private static byte ownPanId = 0x11;
:	    private static byte ownShortAddr = 0x1;
:	    static {
:	        // Open the default radio
:	        radio.open(Radio.DID, null, 0, 0);
:	
:	        // Set channel 
:	        radio.setChannel((byte) currentChannel);
:	        // Set the PAN ID and the short address
:	        radio.setPanId(0x11, true);
:	        radio.setShortAddr(ownShortAddr);
:	        
:	        // Prepare beacon frame with source and destination addressing
:	        xmit = new byte[12];
:	        xmit[0] = Radio.FCF_BEACON;
:	        xmit[1] = Radio.FCA_SRC_SADDR|Radio.FCA_DST_SADDR;
:	        Util.set16le(xmit, 3, ownPanId); // destination PAN address 
:	        Util.set16le(xmit, 5, 0xFFFF); // broadcast address 
:	        Util.set16le(xmit, 7, ownPanId); // own PAN address 
:	        Util.set16le(xmit, 9, ownShortAddr); // own short address 
:	
:			// register delegate for received frames
:	        radio.setRxHandler(new DevCallback(null){
:	                public int invoke (int flags, byte[] data, int len, int info, long time) {
:	                    return  SourceNode.onReceive(flags, data, len, info, time);
:	                }
:	            });
:	
:	//        // Setup a periodic timer callback for beacon transmissions
:	//        tsend = new Timer();
:	//        tsend.setCallback(new TimerEvent(null){
:	//                public void invoke(byte param, long time){
:	//                    SourceNode.periodicSend(param, time);
:	//                }
:	//            });
:	        // Setup a periodic timer callback to restart the protocol
:	//        tstart = new Timer();
:	//        tstart.setCallback(new TimerEvent(null){
:	//                public void invoke(byte param, long time){
:	//                    SourceNode.restart(param, time);
:	//                }
:	//            });
:	
:	//            
:	        // Convert the periodic delay from ms to platform ticks
:	//        wait = Time.toTickSpan(Time.MILLISECS, t);
:	        
:	//        tstart.setAlarmBySpan(Time.toTickSpan(Time.SECONDS, 5)); //starts the protocol 5 seconds after constructing the assembly
:	        radio.startRx(Device.ASAP, 0, Time.currentTicks()+0x7FFFFFFF);
:	    }
:	
:	    // Called when a frame is received or at the end of a reception period 
:	    private static int onReceive (int flags, byte[] data, int len, int info, long time) {
:	        if (data == null) { // marks end of reception period
:	            // turn green LED off 
:		        LED.setState((byte)1, (byte)0);
:		        
:		        //set alarm to restart protocol
:		    	tstart.setAlarmBySpan(10*wait);
:	                    
:	            return 0;
:	        }
:	
:	
:			// frame received, so blink red LED and log its payload
:	        LED.setState((byte) 0, (byte) 1);
:	        LED.setState((byte) 1, (byte) 1);
:	        LED.setState((byte) 2, (byte) 1);
:	
:			Logger.appendByte(data[11]);
:	        Logger.flush(Mote.WARN);
:	        return 0;
:	        
:	    }
:	    
:	    private static void toggleLed(int led){
:	    	int ledState = LED.getState((byte) led);
:	    	if (ledState==0){
:	    		LED.setState((byte) led, (byte) 1);
:	    	} else {
:	    		LED.setState((byte) led, (byte) 0);
:	    	}
:	    }
:	
:	
:	    private static void setChannel(byte channel) {
:	        radio.setChannel(channel);
:		}
:	
:	
:	//	// Called on a timer alarm
:	//    public static void periodicSend(byte param, long time) {
:	//        
:	//        if(nc>0){
:	//	        // transmit a beacon 
:	//    	    radio.transmit(Device.ASAP|Radio.TXMODE_POWER_MAX, xmit, 0, 12, 0);
:	//        	// program new alarm
:	//        	tsend.setAlarmBySpan(wait);
:	//        	nc--;
:	//        	xmit[11]--;
:	//        }
:	//        else{
:	//        	//start reception phase
:	//	        radio.startRx(Device.ASAP, 0, Time.currentTicks()+wait);
:	//	        // turn green LED on 
:	//	        LED.setState((byte)1, (byte)1);
:	//	        
:	//        }
:	//        
:	//    }
:	}
S	M:/EMBS/EMBS_assessment/part2/src/embs/SinkParameter.java
:	package embs;
:	
:	public class SinkParameter {
:	    private byte channel;
:	    private byte panid;
:	    private byte address;
:	    
:	    private int N;
:	    private int T;
:	    
:	    public SinkParameter(int channel, int panid, int address){
:	    	this.channel = (byte) channel;
:	    	this.panid = (byte) panid;
:	    	this.address = (byte) address;
:	    }
:	
:		public void setN(int n) {this.N = n;}
:		public int getT() {return T;}
:		public void setT(int t) {this.T = t;}
:		public int getN() {return N;}
:		public byte getChannel() {return channel;}
:		public byte getPanid() {return panid;}
:		public byte getAddress() {return address;}
:	    
:	    
:	}
