A!	SourceNode-12.0.18449	2.0	Java

X	c:01/000	com.ibm.saguaro.system.Assembly
X	c:01/001	com.ibm.saguaro.system.Util
X	c:01/002	com.ibm.saguaro.system.Timer
X	c:01/003	com.ibm.saguaro.system.Time
X	c:01/004	com.ibm.saguaro.system.MoteException
X	c:01/005	com.ibm.saguaro.system.Device
X	c:01/006	com.ibm.saguaro.system.SDev
X	c:01/007	com.ibm.saguaro.system.CDev
X	c:01/008	com.ibm.saguaro.system.OutOfResourcesException
X	c:01/009	com.ibm.saguaro.system.OsException
X	c:01/00A	com.ibm.saguaro.system.NullReferenceException
X	c:01/00B	com.ibm.saguaro.system.SystemException
X	c:01/00C	com.ibm.saguaro.system.Mote
X	c:01/00D	com.ibm.saguaro.system.LIP
X	c:01/00E	com.ibm.saguaro.system.LED
X	c:01/00F	com.ibm.saguaro.system.InvalidCastException
X	c:01/010	com.ibm.saguaro.system.IndexOutOfRangeException
X	c:01/011	com.ibm.saguaro.system.I2C
X	c:01/012	com.ibm.saguaro.system.GPIO
X	c:01/013	com.ibm.saguaro.system.Err
X	c:01/014	com.ibm.saguaro.system.DeviceException
X	c:01/015	com.ibm.saguaro.system.SPI
X	c:01/016	com.ibm.saguaro.system.Radio
X	c:01/017	com.ibm.saguaro.system.WLIP
X	c:01/018	com.ibm.saguaro.system.ArrayTypeMismatchException
X	c:01/019	com.ibm.saguaro.system.ArithmException
X	c:01/01A	com.ibm.saguaro.system.ArgumentException
X	c:01/01B	com.ibm.saguaro.system.AccessException
X	c:01/01C	com.ibm.saguaro.system.ADC
X	c:02/000	com.ibm.saguaro.logger.Logger

C!	c:006	embs.SourceNode	-1	0	c:000
R	timer1	r:com.ibm.saguaro.system.Timer	0	0
R	xmit	c[]	0	1
R	radio	r:com.ibm.saguaro.system.Radio	0	2
R	sinks	r:embs.SinkParameters[]	0	3
R	channelSwitches	r:embs.ChannelSwitch[]	0	4
F	currentChannel	i	0	0
F	ownPanId	c	0	1
F	ownShortAddr	c	0	2
F	YELLOW_LED	c	0	3
F	GREEN_LED	c	0	4
F	RED_LED	c	0	5
F	N_MIN	i	0	6
F	N_MAX	i	0	7
F	T_MIN	l	0	8
F	T_MAX	l	0	10
F	previousChannel	c	0	12
F	broadcastSet	z	0	13
F	wait	l	0	3327
H	BROADCASTING$UTF8	b[]	0	66,82,79,65,68,67,65,83,84,73,78,71,33
H	Calculated_T$UTF8	b[]	0	67,97,108,99,117,108,97,116,101,100,32,84,58,32
H	Current_Beacon$UTF8	b[]	0	67,117,114,114,101,110,116,32,66,101,97,99,111,110,58,32
H	PREPARING_BROADCAST_for_time$UTF8	b[]	0	80,82,69,80,65,82,73,78,71,32,66,82,79,65,68,67,65,83,84,33,32,102,111,114,32,116,105,109,101,58,32
H	Received_packet$UTF8	b[]	0	82,101,99,101,105,118,101,100,32,112,97,99,107,101,116
H	Transmitted$UTF8	b[]	0	84,114,97,110,115,109,105,116,116,101,100,46
M!	SourceNode(r:embs.SourceNode)v	-1	m:0182	00304	4
M	access$000(i,c[],i,i,l)i	-1	m:0184	00308	14
M	access$100(i,c[],i,i,l)i	-1	m:018B	00316	14
M!	broadcastToSink(c,l)v	-1	m:0192	00324	82
M	createNextBroadcast(i,l,i,l,l)v	-1	m:01BB	00376	42
M!	getChannelSwitch(l,r:embs.ChannelSwitch[])c	-1	m:01D0	003A0	50
M	getDiffN(i[],i)i	-1	m:01E9	003D2	16
M	getDiffT(l[],i)l	-1	m:01F1	003E2	30
M	insertChannelSwitchInBuffer(r:embs.ChannelSwitch[],r:embs.ChannelSwitch)r:embs.ChannelSwitch[]	-1	m:0200	00400	60
M	onReceive(i,c[],i,i,l)i	-1	m:021E	0043C	284
M	onTransmit(i,c[],i,i,l)i	-1	m:02AC	00558	108
M	setupBroadcastAndCallBack(l,l,i,l)v	-1	m:02E2	005C4	122
M	toggleLed(i)v	-1	m:031F	0063E	28

C!	c:008	embs.SinkParameters	1	1	c:000
r	beaconT	l[]	1	0
r	beaconN	i[]	1	1
f	numBeacons	i	1	0
f	T	l	1	1
f	N	i	1	3
f	address	c	1	4
f	panid	c	1	5
f	channel	c	1	6
m!	addBeacon(i,l)v	1	m:013D	0027A	34	0
m!	getAddress()c	1	m:014E	0029C	8	7
m!	getBeaconN()i[]	1	m:0152	002A4	8	10
m!	getBeaconT()l[]	1	m:0156	002AC	8	12
m!	getChannel()c	1	m:015A	002B4	8	5
m!	getN()i	1	m:015E	002BC	8	4
m!	getNumBeacons()i	1	m:0162	002C4	8	8
m!	getPanid()c	1	m:0166	002CC	8	6
m!	getT()l	1	m:016A	002D4	8	2
m!	setBeaconN(i[])v	1	m:016E	002DC	8	11
m!	setBeaconT(l[])v	1	m:0172	002E4	8	13
m!	setN(i)v	1	m:0176	002EC	8	1
m!	setNumBeacons(i)v	1	m:017A	002F4	8	9
m!	setT(l)v	1	m:017E	002FC	8	3
M!	SinkParameters(r:embs.SinkParameters,c,c,c)v	1	m:0128	00250	42

C!	c:015	embs.ChannelSwitch	2	2	c:000
f	channel	c	2	0
f	time	l	2	1
m!	getChannel()c	2	m:0118	00230	8	3
m!	getTime()l	2	m:011C	00238	8	0
m!	setChannel(c)v	2	m:0120	00240	8	2
m!	setTime(l)v	2	m:0124	00248	8	1
M!	ChannelSwitch(r:embs.ChannelSwitch,l,c)v	2	m:0112	00224	12

C!	c:01A	embs.Broadcast	3	3	c:000
f	deadline	l	3	0
f	broadcastTime	l	3	2
m!	getBroadcastTime()l	3	m:0102	00204	8	0
m!	getDeadline()l	3	m:0106	0020C	8	2
m!	setBroadcastTime(l)v	3	m:010A	00214	8	1
m!	setDeadline(l)v	3	m:010E	0021C	8	3
M!	Broadcast(r:embs.Broadcast,l,l)v	3	m:00FC	001F8	12

C	c:01F	com.ibm.saguaro.system.$tatics	-1	-1	c:01/000
r	embs.SourceNode.timer1	r:com.ibm.saguaro.system.Timer	-1	0
r	embs.SourceNode.xmit	c[]	-1	1
r	embs.SourceNode.radio	r:com.ibm.saguaro.system.Radio	-1	2
r	embs.SourceNode.sinks	r:embs.SinkParameters[]	-1	3
r	embs.SourceNode.channelSwitches	r:embs.ChannelSwitch[]	-1	4
f	embs.SourceNode.currentChannel	i	-1	0
f	embs.SourceNode.ownPanId	c	-1	1
f	embs.SourceNode.ownShortAddr	c	-1	2
f	embs.SourceNode.YELLOW_LED	c	-1	3
f	embs.SourceNode.GREEN_LED	c	-1	4
f	embs.SourceNode.RED_LED	c	-1	5
f	embs.SourceNode.N_MIN	i	-1	6
f	embs.SourceNode.N_MAX	i	-1	7
f	embs.SourceNode.T_MIN	l	-1	8
f	embs.SourceNode.T_MAX	l	-1	10
f	embs.SourceNode.previousChannel	c	-1	12
f	embs.SourceNode.broadcastSet	z	-1	13
M	__init()v	-1	m:0042	00084	372

c	00091	0	13	0	13	0	m:0042
c	0009B	0	15	0	15	0	m:0042
c	000D2	0	20	0	20	0	m:0042
c	000D6	0	21	0	21	0	m:0042
c	000DB	0	22	0	22	0	m:0042
c	000DF	0	25	0	25	0	m:0042
c	000E3	0	26	0	26	0	m:0042
c	000E7	0	27	0	27	0	m:0042
c	000EB	0	29	0	29	0	m:0042
c	000EF	0	30	0	30	0	m:0042
c	000F4	0	31	0	31	0	m:0042
c	000FC	0	32	0	32	0	m:0042
c	00104	0	35	0	35	0	m:0042
c	0010B	0	38	0	38	0	m:0042
c	0010F	0	42	0	42	0	m:0042
c	0011B	0	44	0	44	0	m:0042
c	00120	0	45	0	45	0	m:0042
c	00125	0	46	0	46	0	m:0042
c	0012A	0	48	0	48	0	m:0042
c	00134	0	49	0	49	0	m:0042
c	0013E	0	56	0	56	0	m:0042
c	0014E	0	58	0	58	0	m:0042
c	0015F	0	59	0	59	0	m:0042
c	0016F	0	62	0	62	0	m:0042
c	00175	0	63	0	63	0	m:0042
c	0017B	0	64	0	64	0	m:0042
c	00183	0	65	0	65	0	m:0042
c	00195	0	66	0	66	0	m:0042
c	0019E	0	67	0	67	0	m:0042
c	001B1	0	68	0	68	0	m:0042
c	001C4	0	71	0	71	0	m:0042
c	001CE	0	77	0	77	0	m:0042
c	001D8	0	82	0	82	0	m:0042
c	001E1	0	83	0	83	0	m:0042
c	001F6	0	84	0	84	0	m:0042
e	001F8	m:0042
c	001FB	3	11	0	11	0	m:00FC
l!	001FB	00204	r:embs.Broadcast	this	m:00FC	0
l!	001FB	00204	l	broadcastTime	m:00FC	1
l	001FB	00204	l	cutoffTime	m:00FC	3
c	001FF	3	12	0	12	0	m:00FC
c	00203	3	13	0	13	0	m:00FC
e!	00204	m:00FC
c	00207	3	16	0	16	0	m:0102
l	00207	0020B	r:embs.Broadcast	this	m:0102	0
e!	0020C	m:0102
c	0020F	3	23	0	23	0	m:0106
l	0020F	00213	r:embs.Broadcast	this	m:0106	0
e!	00214	m:0106
c	00217	3	19	0	19	0	m:010A
l!	00217	0021C	r:embs.Broadcast	this	m:010A	0
l	00217	0021C	l	broadcastTime	m:010A	1
c	0021B	3	20	0	20	0	m:010A
e!	0021C	m:010A
c	0021F	3	26	0	26	0	m:010E
l!	0021F	00224	r:embs.Broadcast	this	m:010E	0
l	0021F	00224	l	deadline	m:010E	1
c	00223	3	27	0	27	0	m:010E
e!	00224	m:010E
c	00227	2	15	0	15	0	m:0112
l!	00227	00230	r:embs.ChannelSwitch	this	m:0112	0
l!	00227	00230	l	time	m:0112	1
l	00227	00230	c	channel	m:0112	3
c	0022B	2	16	0	16	0	m:0112
c	0022F	2	17	0	17	0	m:0112
e!	00230	m:0112
c	00233	2	30	0	30	0	m:0118
l	00233	00237	r:embs.ChannelSwitch	this	m:0118	0
e!	00238	m:0118
c	0023B	2	20	0	20	0	m:011C
l	0023B	0023F	r:embs.ChannelSwitch	this	m:011C	0
e!	00240	m:011C
c	00243	2	27	0	27	0	m:0120
l!	00243	00248	r:embs.ChannelSwitch	this	m:0120	0
l	00243	00248	c	channel	m:0120	1
c	00247	2	28	0	28	0	m:0120
e!	00248	m:0120
c	0024B	2	23	0	23	0	m:0124
l!	0024B	00250	r:embs.ChannelSwitch	this	m:0124	0
l	0024B	00250	l	time	m:0124	1
c	0024F	2	24	0	24	0	m:0124
e!	00250	m:0124
c	00253	1	8	0	8	0	m:0128
l!	00253	0027A	r:embs.SinkParameters	this	m:0128	0
l!	00253	0027A	c	channel	m:0128	1
l!	00253	0027A	c	panid	m:0128	2
l!	00253	0027A	c	address	m:0128	3
c	00257	1	9	0	9	0	m:0128
c	0025F	1	10	0	10	0	m:0128
c	00264	1	11	0	11	0	m:0128
c	00269	1	12	0	12	0	m:0128
c	0026D	1	15	0	15	0	m:0128
c	00271	1	16	0	16	0	m:0128
c	00275	1	17	0	17	0	m:0128
c	00279	1	18	0	18	0	m:0128
e!	0027A	m:0128
c	0027D	1	21	0	21	0	m:013D
l!	0027D	0029C	r:embs.SinkParameters	this	m:013D	0
l!	0027D	0029C	i	n	m:013D	1
l	0027D	0029C	l	t	m:013D	2
c	00283	1	22	0	22	0	m:013D
c	0028B	1	23	0	23	0	m:013D
c	00293	1	24	0	24	0	m:013D
c	0029B	1	26	0	26	0	m:013D
e!	0029C	m:013D
c	0029F	1	34	0	34	0	m:014E
l	0029F	002A3	r:embs.SinkParameters	this	m:014E	0
e!	002A4	m:014E
c	002A7	1	44	0	44	0	m:0152
l!	002A7	002AB	r:embs.SinkParameters	this	m:0152	0
e!	002AC	m:0152
c	002AF	1	53	0	53	0	m:0156
l!	002AF	002B3	r:embs.SinkParameters	this	m:0156	0
e!	002B4	m:0156
c	002B7	1	32	0	32	0	m:015A
l	002B7	002BB	r:embs.SinkParameters	this	m:015A	0
e!	002BC	m:015A
c	002BF	1	31	0	31	0	m:015E
l	002BF	002C3	r:embs.SinkParameters	this	m:015E	0
e!	002C4	m:015E
c	002C7	1	37	0	37	0	m:0162
l	002C7	002CB	r:embs.SinkParameters	this	m:0162	0
e!	002CC	m:0162
c	002CF	1	33	0	33	0	m:0166
l	002CF	002D3	r:embs.SinkParameters	this	m:0166	0
e!	002D4	m:0166
c	002D7	1	29	0	29	0	m:016A
l	002D7	002DB	r:embs.SinkParameters	this	m:016A	0
e!	002DC	m:016A
c	002DF	1	49	0	49	0	m:016E
l!	002DF	002E4	r:embs.SinkParameters	this	m:016E	0
l	002DF	002E4	i[]	beaconN	m:016E	1
c	002E3	1	50	0	50	0	m:016E
e!	002E4	m:016E
c	002E7	1	58	0	58	0	m:0172
l!	002E7	002EC	r:embs.SinkParameters	this	m:0172	0
l	002E7	002EC	l[]	beaconT	m:0172	1
c	002EB	1	59	0	59	0	m:0172
e!	002EC	m:0172
c	002EF	1	28	0	28	0	m:0176
l!	002EF	002F4	r:embs.SinkParameters	this	m:0176	0
l	002EF	002F4	i	n	m:0176	1
e!	002F4	m:0176
c	002F7	1	39	0	39	0	m:017A
l!	002F7	002FC	r:embs.SinkParameters	this	m:017A	0
l	002F7	002FC	i	numBeacons	m:017A	1
c	002FB	1	41	0	41	0	m:017A
e!	002FC	m:017A
c	002FF	1	30	0	30	0	m:017E
l!	002FF	00304	r:embs.SinkParameters	this	m:017E	0
l	002FF	00304	l	t	m:017E	1
e!	00304	m:017E
c	00307	0	8	0	8	0	m:0182
l!	00307	00308	r:embs.SourceNode	this	m:0182	0
e!	00308	m:0182
c	0030B	0	8	0	8	0	m:0184
l	0030B	00315	i	x0	m:0184	0
l	0030B	00315	c[]	x1	m:0184	1
l	0030B	00315	i	x2	m:0184	2
l	0030B	00315	i	x3	m:0184	3
l	0030B	00315	l	x4	m:0184	4
e	00316	m:0184
c	00319	0	8	0	8	0	m:018B
l	00319	00323	i	x0	m:018B	0
l	00319	00323	c[]	x1	m:018B	1
l	00319	00323	i	x2	m:018B	2
l	00319	00323	i	x3	m:018B	3
l	00319	00323	l	x4	m:018B	4
e	00324	m:018B
c	00327	0	146	0	146	0	m:0192
l!	00327	00375	c	param	m:0192	0
l!	00327	00375	l	time	m:0192	1
c	0032C	0	147	0	147	0	m:0192
c	00332	0	148	0	148	0	m:0192
c	00336	0	150	0	150	0	m:0192
c	0033C	0	151	0	151	0	m:0192
c	00340	0	152	0	152	0	m:0192
c	00348	0	156	0	156	0	m:0192
l	00348	00375	c	channelNum	m:0192	3
c	00351	0	157	0	157	0	m:0192
c	00358	0	158	0	158	0	m:0192
c	0036A	0	159	0	159	0	m:0192
c	00370	0	160	0	160	0	m:0192
c	00374	0	161	0	161	0	m:0192
e!	00376	m:0192
c	00379	0	173	0	173	0	m:01BB
l	00379	003A0	i	beaconN	m:01BB	0
l	00379	003A0	l	beaconT	m:01BB	1
l	00379	003A0	i	channel	m:01BB	3
l	00379	003A0	l	t	m:01BB	4
l	00379	003A0	l	currentTimeMS	m:01BB	6
c	00383	0	174	0	174	0	m:01BB
l	00383	003A0	l	broadcastTime	m:01BB	8
c	0038B	0	175	0	175	0	m:01BB
l	0038B	003A0	l	deadline	m:01BB	10
c	0039F	0	176	0	176	0	m:01BB
e	003A0	m:01BB
c	003A3	0	164	0	164	0	m:01D0
l!	003A3	003D2	l	time	m:01D0	0
l	003A3	003D2	r:embs.ChannelSwitch[]	css	m:01D0	2
c	003B2	0	165	0	165	0	m:01D0
l	003B2	003C2	r:embs.ChannelSwitch	cs	m:01D0	6
c	003BD	0	166	0	166	0	m:01D0
c	003C2	0	164	0	164	0	m:01D0
c	003C7	0	169	0	169	0	m:01D0
e!	003D2	m:01D0
c	003D5	0	215	0	215	0	m:01E9
l	003D5	003E1	i[]	beaconN	m:01E9	0
l	003D5	003E1	i	numBeacons	m:01E9	1
e	003E2	m:01E9
c	003E5	0	219	0	219	0	m:01F1
l	003E5	00400	l[]	beaconT	m:01F1	0
l	003E5	00400	i	numBeacons	m:01F1	1
c	003F1	0	220	0	220	0	m:01F1
l	003F1	00400	l	diffT	m:01F1	2
e	00400	m:01F1
c	00403	0	199	0	199	0	m:0200
l	00403	0043C	r:embs.ChannelSwitch[]	css	m:0200	0
l	00403	0043C	r:embs.ChannelSwitch	cs	m:0200	1
l	00405	0043C	i	x	m:0200	2
c	0040A	0	200	0	200	0	m:0200
c	0040F	0	201	0	201	0	m:0200
c	00413	0	202	0	202	0	m:0200
c	00415	0	199	0	199	0	m:0200
c	0041A	0	205	0	205	0	m:0200
c	00422	0	206	0	206	0	m:0200
l	00422	0043C	r:embs.ChannelSwitch[]	newCss	m:0200	3
c	00429	0	207	0	207	0	m:0200
c	0042F	0	206	0	206	0	m:0200
c	00434	0	209	0	209	0	m:0200
c	0043A	0	210	0	210	0	m:0200
e	0043C	m:0200
c	0043F	0	106	0	106	0	m:021E
l	0043F	00557	i	flags	m:021E	0
l	0043F	00557	c[]	data	m:021E	1
l	0043F	00557	i	len	m:021E	2
l	0043F	00557	i	info	m:021E	3
l	0043F	00557	l	time	m:021E	4
c	00445	0	107	0	107	0	m:021E
c	00449	0	108	0	108	0	m:021E
c	0044C	0	110	0	110	0	m:021E
c	00451	0	112	0	112	0	m:021E
c	00453	0	114	0	114	0	m:021E
c	00459	0	115	0	115	0	m:021E
l	00459	00557	i	n	m:021E	6
c	0045F	0	117	0	117	0	m:021E
l	0045F	00557	l	currentTime	m:021E	7
c	00471	0	118	0	118	0	m:021E
c	00489	0	120	0	120	0	m:021E
c	00496	0	121	0	121	0	m:021E
c	004A2	0	122	0	122	0	m:021E
l	004A2	0053F	i	numBeacons	m:021E	9
c	004AE	0	123	0	123	0	m:021E
c	004B2	0	124	0	124	0	m:021E
c	004CB	0	125	0	125	0	m:021E
l	004CB	0053F	i	diffN	m:021E	10
c	004E4	0	126	0	126	0	m:021E
l	004E4	0053F	l	diffT	m:021E	11
c	004F4	0	127	0	127	0	m:021E
c	004FC	0	128	0	128	0	m:021E
l	004FC	0053F	l	t	m:021E	13
c	00508	0	129	0	129	0	m:021E
c	0050E	0	130	0	130	0	m:021E
c	00513	0	131	0	131	0	m:021E
c	00517	0	132	0	132	0	m:021E
c	0053F	0	136	0	136	0	m:021E
c	00545	0	137	0	137	0	m:021E
c	0054D	0	138	0	138	0	m:021E
c	00551	0	139	0	139	0	m:021E
c	00555	0	140	0	140	0	m:021E
e	00558	m:021E
c	0055B	0	87	0	87	0	m:02AC
l	0055B	005C4	i	flags	m:02AC	0
l	0055B	005C4	c[]	data	m:02AC	1
l	0055B	005C4	i	len	m:02AC	2
l	0055B	005C4	i	info	m:02AC	3
l	0055B	005C4	l	time	m:02AC	4
c	0055F	0	89	0	89	0	m:02AC
c	00569	0	90	0	90	0	m:02AC
c	0056F	0	92	0	92	0	m:02AC
c	00578	0	93	0	93	0	m:02AC
c	00582	0	94	0	94	0	m:02AC
c	0059F	0	98	0	98	0	m:02AC
c	005AB	0	99	0	99	0	m:02AC
c	005B7	0	100	0	100	0	m:02AC
c	005C2	0	101	0	101	0	m:02AC
e	005C4	m:02AC
c	005C7	0	179	0	179	0	m:02E2
l	005C7	0063D	l	broadcastTime	m:02E2	0
l	005C7	0063D	l	deadline	m:02E2	2
l	005C7	0063D	i	sinkIndex	m:02E2	4
l	005C7	0063D	l	currentTimeMS	m:02E2	5
c	005D3	0	180	0	180	0	m:02E2
c	005D8	0	181	0	181	0	m:02E2
c	005E9	0	182	0	182	0	m:02E2
l	005E9	0063D	r:embs.ChannelSwitch	cs	m:02E2	7
c	00603	0	183	0	183	0	m:02E2
l	00603	00611	r:embs.ChannelSwitch	c	m:02E2	11
c	00610	0	184	0	184	0	m:02E2
c	00611	0	182	0	182	0	m:02E2
c	00616	0	188	0	188	0	m:02E2
c	0061C	0	189	0	189	0	m:02E2
c	00620	0	190	0	190	0	m:02E2
c	00624	0	191	0	191	0	m:02E2
c	0062E	0	192	0	192	0	m:02E2
c	0063C	0	193	0	193	0	m:02E2
e	0063E	m:02E2
c	00641	0	224	0	224	0	m:031F
l	00641	00659	i	led	m:031F	0
c	00647	0	225	0	225	0	m:031F
l	00647	00659	i	ledState	m:031F	1
c	0064A	0	226	0	226	0	m:031F
c	00652	0	228	0	228	0	m:031F
c	00658	0	230	0	230	0	m:031F
e	0065A	m:031F
S	M:/EMBS/EMBS_assessment2/part2/src/embs/SourceNode.java
:	package embs;
:	
:	import com.ibm.saguaro.system.*;
:	import com.ibm.saguaro.logger.*;
:	//import embs.SinkParameter;
:	
:	
:	public class SourceNode {
:	
:		static Timer  timer1;
:		static byte[] xmit;
:		static long   wait;
:		static Radio radio = new Radio();
:	
:		private static SinkParameters[] sinks = {
:			new SinkParameters((byte) 11,(byte)  0x11,(byte)  0x11), 
:			new SinkParameters((byte) 12, (byte) 0x12, (byte) 0x12),
:			new SinkParameters((byte) 13, (byte) 0x13, (byte) 0x13)};
:		// settings for SourceNode A
:		static int currentChannel = 0;
:		static byte ownPanId = 0x11;
:		static byte ownShortAddr = 0x1;
:	
:	
:		static byte YELLOW_LED = (byte) 0;
:		static byte GREEN_LED = (byte) 1;
:		static byte RED_LED = (byte) 2;
:	
:		static int N_MIN = 2;
:		static int N_MAX = 10;
:		static long T_MIN = 250;
:		static long T_MAX = 1500;
:		
:	
:		static ChannelSwitch[] channelSwitches = new ChannelSwitch[5];
:	
:		static byte previousChannel;
:		static boolean broadcastSet = false;
:		
:		static {
:			// Open the default radio
:			radio.open(Radio.DID, null, 0, 0);
:	
:			LED.setState((byte) 0, (byte) 1);
:			LED.setState((byte) 1, (byte) 1);
:			LED.setState((byte) 2, (byte) 1);
:	
:			timer1 = new Timer();
:			timer1.setCallback(new TimerEvent(null){
:				public void invoke(byte param, long time){
:					SourceNode.broadcastToSink(param, time);
:				}
:			});
:	
:			// Set channel 
:			radio.setChannel((byte) sinks[currentChannel].getChannel());
:			// Set the PAN ID and the short address
:			radio.setPanId(sinks[currentChannel].getPanid(), true);
:			radio.setShortAddr(sinks[currentChannel].getAddress());
:	
:			// Prepare beacon frame with source and destination addressing
:			xmit = new byte[12];
:			xmit[0] = Radio.FCF_BEACON;
:			xmit[1] = Radio.FCA_SRC_SADDR|Radio.FCA_DST_SADDR;
:			Util.set16le(xmit, 3, sinks[currentChannel].getPanid()); // destination PAN address 
:			Util.set16le(xmit, 5, 0xFFFF); // broadcast address 
:			Util.set16le(xmit, 7, sinks[currentChannel].getPanid()); // own PAN address 
:			Util.set16le(xmit, 9, sinks[currentChannel].getAddress()); // own short address 
:	
:			// register delegate for received frames
:			radio.setRxHandler(new DevCallback(null){
:				public int invoke (int flags, byte[] data, int len, int info, long time) {
:					return  SourceNode.onReceive(flags, data, len, info, time);
:				}
:			});
:	
:			radio.setTxHandler(new DevCallback(null){
:				public int invoke(int flags, byte[] data, int len, int info, long time) {
:					return SourceNode.onTransmit(flags, data, len, info, time);
:				}
:			});
:			radio.setRxMode(Radio.RXMODE_PROMISCUOUS);
:			radio.startRx(Device.ASAP, 0, Time.currentTicks()+0x7FFFFFFF);
:		}
:	
:		private static int onTransmit(int flags, byte[] data, int len, int info, long time) {
:			broadcastSet = false;
:			
:			if (radio.getState()==Device.S_RXEN){
:				radio.stopRx();
:			}
:			radio.setChannel((byte) previousChannel);
:			if (radio.getState()!=Device.S_RXEN){
:				radio.startRx(Device.TIMED, Time.currentTicks()+Time.toTickSpan(Time.MILLISECS, 10), Time.currentTicks()+0x7FFFFFFF);
:			}
:	//		Logger.appendString(csr.s2b("Turned on radio:"));
:	//		Logger.flush(Mote.INFO);
:			sinks[currentChannel].setBeaconN(new int[3]);
:			sinks[currentChannel].setBeaconT(new long[3]);
:			sinks[currentChannel].setNumBeacons(0);
:			return 0;
:		}
:	
:		// Called when a frame is received or at the end of a reception period 
:		private static int onReceive (int flags, byte[] data, int len, int info, long time) {
:			Logger.appendString(csr.s2b("Received packet"));
:			Logger.flush(Mote.INFO);
:			if (data == null) { // marks end of reception period
:				// turn green LED off 
:				LED.setState((byte)1, (byte)0);
:				
:				return 0;
:			}
:			int n = data[11];
:			long currentTime = Time.currentTime(Time.MILLISECS);
:			//If T is known for sink
:			if (sinks[currentChannel].getT()!=-1){
:				createNextBroadcast(n, currentTime, currentChannel, sinks[currentChannel].getT(), currentTime);
:			} else {
:				sinks[currentChannel].addBeacon(n, currentTime);
:				int numBeacons = sinks[currentChannel].getNumBeacons();
:				if (numBeacons>1 && !broadcastSet){
:					broadcastSet  = true;
:					int diffN = getDiffN(sinks[currentChannel].getBeaconN(), sinks[currentChannel].getNumBeacons());
:					long diffT = getDiffT(sinks[currentChannel].getBeaconT(), sinks[currentChannel].getNumBeacons());
:					if (diffN>0 && diffT<=(T_MAX*diffN)){
:						long t = diffT/diffN;
:						sinks[currentChannel].setT(t);
:						Logger.appendString(csr.s2b("Calculated T: "));
:						Logger.appendLong(t);
:						Logger.flush(Mote.WARN);
:						createNextBroadcast(sinks[currentChannel].getBeaconN()[numBeacons-1], sinks[currentChannel].getBeaconT()[numBeacons-1], currentChannel, t, currentTime);
:					}
:				}
:			}
:			Logger.appendString(csr.s2b("Current Beacon: "));
:			Logger.appendByte(data[11]);
:			Logger.flush(Mote.WARN);
:			toggleLed(2);
:			return 0;
:		}
:	
:	
:		protected static void broadcastToSink(byte param, long time){
:			
:			LED.setState((byte) 2, (byte) 1);
:			Logger.appendString(csr.s2b("BROADCASTING!"));
:			Logger.flush(Mote.WARN);
:			
:			radio.stopRx();
:			toggleLed(2);
:			byte channelNum = getChannelSwitch(time, channelSwitches);
:	//		Logger.appendString(csr.s2b("Got channelNum: "));
:	//		Logger.appendByte(channelNum);
:	//		Logger.flush(Mote.INFO);
:			previousChannel = radio.getChannel();
:			radio.setChannel(channelNum);
:			radio.transmit(Device.ASAP|Radio.TXMODE_POWER_MAX, xmit, 0, 12, 0);
:			Logger.appendString(csr.s2b("Transmitted."));
:			Logger.flush(Mote.INFO);
:		}
:	
:		protected static byte getChannelSwitch(long time, ChannelSwitch[] css){
:			for (ChannelSwitch cs: css){
:				if (cs!=null && cs.getTime()==time){
:					return cs.getChannel();
:				}
:			}
:			return sinks[currentChannel].getChannel();
:		}
:	
:		private static void createNextBroadcast(int beaconN, long beaconT, int channel, long t, long currentTimeMS) {
:			long broadcastTime = (t  * beaconN) + currentTimeMS;
:			long deadline = broadcastTime + T_MIN;
:			setupBroadcastAndCallBack(broadcastTime + (T_MIN/2), deadline, channel, currentTimeMS);
:		}
:	
:		private static void setupBroadcastAndCallBack(long broadcastTime, long deadline, int sinkIndex, long currentTimeMS){
:			broadcastTime+= T_MIN/4;
:			LED.setState((byte) 2, (byte) 0);
:			ChannelSwitch cs = new ChannelSwitch(broadcastTime, sinks[sinkIndex].getChannel());
:			for (ChannelSwitch c: channelSwitches){
:				if (c!=null && c.getTime()==broadcastTime){
:					return;
:				}
:			}
:			
:			Logger.appendString(csr.s2b("PREPARING BROADCAST! for time: "));
:			Logger.appendLong(broadcastTime);
:			Logger.flush(Mote.WARN);
:			channelSwitches = insertChannelSwitchInBuffer(channelSwitches, cs);
:			timer1.setAlarmBySpan(Time.toTickSpan(Time.MILLISECS, broadcastTime-currentTimeMS));
:		}
:		
:		
:		private static ChannelSwitch[] insertChannelSwitchInBuffer(ChannelSwitch[] css, ChannelSwitch cs){
:			// If space available in buffer
:			int x;
:			for (x=0; x<css.length; x++){
:				if (css[x]==null){
:					css[x] = cs;
:					return css;
:				}
:			}
:			ChannelSwitch[] newCss = new ChannelSwitch[css.length+2];
:			for (x=0; x<css.length; x++){
:				newCss[x] = css[x];
:			}
:			newCss[x+1] = cs;
:			return newCss;
:		}
:	
:	
:		private static int getDiffN(int[] beaconN, int numBeacons) {
:			return beaconN[numBeacons-2]-beaconN[numBeacons-1];
:		}
:	
:		private static long getDiffT(long[] beaconT, int numBeacons) {
:			long diffT = beaconT[numBeacons-1]-beaconT[numBeacons-2];
:			return (diffT < 0) ? -diffT : diffT;
:		}
:	
:		private static void toggleLed(int led){
:			int ledState = LED.getState((byte) led);
:			if (ledState==0){
:				LED.setState((byte) led, (byte) 1);
:			} else {
:				LED.setState((byte) led, (byte) 0);
:			}
:		}
:	
:		//	// Called on a timer alarm
:		//    public static void periodicSend(byte param, long time) {
:		//        
:		//        if(nc>0){
:		//	        // transmit a beacon 
:		//    	    radio.transmit(Device.ASAP|Radio.TXMODE_POWER_MAX, xmit, 0, 12, 0);
:		//        	// program new alarm
:		//        	tsend.setAlarmBySpan(wait);
:		//        	nc--;
:		//        	xmit[11]--;
:		//        }
:		//        else{
:		//        	//start reception phase
:		//	        radio.startRx(Device.ASAP, 0, Time.currentTicks()+wait);
:		//	        // turn green LED on 
:		//	        LED.setState((byte)1, (byte)1);
:		//	        
:		//        }
:		//        
:		//    }
:	}
S	M:/EMBS/EMBS_assessment2/part2/src/embs/SinkParameters.java
:	package embs;
:	
:	public class SinkParameters {
:	    private byte channel;
:	    private byte panid;
:	    private byte address;
:	    
:	    private int N = -1;
:	    private long T = -1;
:	    private int[] beaconN = new int[3];
:	    private long[] beaconT = new long[3];
:	    private int numBeacons = 0;
:	    
:	    public SinkParameters(byte channel, byte panid, byte address){
:	    	this.channel =  channel;
:	    	this.panid =  panid;
:	    	this.address =  address;
:	    }
:	
:	    public void addBeacon(int n, long t){
:	    	if (numBeacons<2){
:		    	beaconN[numBeacons]=n;
:		    	beaconT[numBeacons]=t;
:		    	numBeacons++;
:	    	}
:	    }
:	    
:		public void setN(int n) {this.N = n;}
:		public long getT() {return T;}
:		public void setT(long t) {this.T = t;}
:		public int getN() {return N;}
:		public byte getChannel() {return channel;}
:		public byte getPanid() {return panid;}
:		public byte getAddress() {return address;}
:	
:		public int getNumBeacons() {
:			return numBeacons;
:		}
:		public void setNumBeacons(int numBeacons) {this.numBeacons = numBeacons;
:	
:		}
:	
:		public int[] getBeaconN() {
:			return beaconN;
:		}
:	
:		public void setBeaconN(int[] beaconN) {
:	
:			this.beaconN = beaconN;
:		}
:	
:		public long[] getBeaconT() {
:			return beaconT;
:		}
:	
:		public void setBeaconT(long[] beaconT) {
:	
:			this.beaconT = beaconT;
:		}
:	    
:		
:	}
S	M:/EMBS/EMBS_assessment2/part2/src/embs/ChannelSwitch.java
:	package embs;
:	
:	/**
:	 * Class used to represent channel switch events
:	 */
:	public class ChannelSwitch {
:	
:	    // Time: time at which to switch from current channel to channel specified below
:	    private long time;
:	
:	    // Channel: channel to begin listening to at time Time
:	    private byte channel;
:	
:	    public ChannelSwitch(long time, byte channel) {
:	        this.time = time;
:	        this.channel = channel;
:	    }
:	
:	    public long getTime() {
:	        return time;
:	    }
:	    public void setTime(long time) {
:	        this.time = time;
:	    }
:	
:	    public void setChannel(byte channel) {
:	        this.channel = channel;
:	    }
:	    public byte getChannel() {
:	        return channel;
:	    }
:	}
S	M:/EMBS/EMBS_assessment2/part2/src/embs/Broadcast.java
:	package embs;
:	
:	/**
:	 * Represents a scheduled broadcast
:	 */
:	public class Broadcast{
:	    private long broadcastTime; // broadcastTime: time at which to broadcast
:	    private long deadline; // deadline: time at which
:	
:	    public Broadcast(long broadcastTime, long cutoffTime) {
:	        this.broadcastTime = broadcastTime;
:	        this.deadline = cutoffTime;
:	    }
:	
:	    public long getBroadcastTime() {
:	        return broadcastTime;
:	    }
:	    public void setBroadcastTime(long broadcastTime) {
:	        this.broadcastTime = broadcastTime;
:	    }
:	
:	    public long getDeadline() {
:	        return deadline;
:	    }
:	    public void setDeadline(long deadline) {
:	        this.deadline = deadline;
:	    }
:	}
